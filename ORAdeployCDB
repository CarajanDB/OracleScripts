# @(#) ================================================================================================================
# @(#) File        : ORAdeployCDB
# @(#) Author      : Johannes Ahrends, CarajanDB GmbH
# @(#) Version     : 2.9
# @(#) Date        : 2024-09-11
# @(#) Description : Create New CDB and all related tasks
# @(#)
# @@(#)  Change History:
# @@(#)  Version  Date        Author        Description
# @@(#)  ------------------------------------------------------------------------------------------------
# @@(#)  1.0      2024-02-05  jahr   Neue Version
# @@(#)  1.1      2024-02-16  jahr   Einspringpunkte (jump)
# @@(#)  1.2      2024-02-22  jahr   Aendern jump auf skip
# @@(#)  1.3      2024-03-18  jahr   Check Database Stages
# @@(#)  1.4      2024-03-20  jahr   Install Software, etc.
# @@(#)  1.5      2024-04-02  jahr   Register Database with Cohesity
# @@(#)  1.6      2024-04-03  jahr   Changed CreateCDB call
# @@(#)  1.7      2024-04-04  jahr   Added createPDB
# @@(#)  1.8      2024-05-16  mpils  Added unset/set env, re-init logger, fs creation,
# @@(#)                              huge page config and several fixes
# @@(#)  1.9      2024-05-22  mpils  Fixed RESTARTFILE definitions, some checks and PDB creation
# @@(#)  1.10     2024-05-23  mpils  Fixed restart check for ORAcreatePDB command
# @@(#)  1.11     2024-05-27  mpils  Renamed CreateService to CreateDBService
# @@(#)  1.12     2024-06-04  mpils  Redesigned --skip option and added fs creation to skip options
# @@(#)  1.13     2024-06-07  jahr   Added Function CreateLogicalVolume and parameter nocreatelv
# @@(#)  1.14     2024-06-13  jahr   Changed Hugepages, switched configuration as last entry
# @@(#)  1.15     2024-06-27  mpils  Added support for UTF8 for NLS_NCHAR_SET (for DMS)
# @@(#)                              Replaced --nocreatelv by new --skip option
# @@(#)                              Added ORABINDIR and added ora_env_setup.sh execution
# @@(#)  1.16     2024-07-03  mpils  Some minor fixes and cleanups
# @@(#)  1.17     2024-07-19  mpils  Fixed JUMP id calc when FS skipped
# @@(#)                              Added ORAmkAD_authwallet, CTMhostgroup
# @@(#)  1.18     2024-07-23  mpils  Fixed ora_setup_env usage and added Foglight integration
# @@(#)  2.0      2024-07-24  jahr   Rename from ORAcreateCDB to ORAdeployCDB
# @@(#)  2.1      2024-07-24  mpils  Fixed ctm hostgroup management, added set defaults, remove not used --compatible
# @@(#)  2.2      2024-07-29  jahr   Changes because of using Read only Oracle Home and Goldenimage deploy
# @@(#)  2.3      2024-08-01  jahr   do not terminate if listener has errors
# @@(#)  2.4      2024-08-07  jahr   use orignal fra and data size
# @@(#)  2.5      2024-08-08  jahr   Prepare old database
# @@(#)  2.6      2024-08-29  jahr   Allow variable Software Version
# @@(#)  2.7      2024-09-02  jahr   Loop to wait for preparation date
# @@(#)  2.8      2024-09-10  jahr   Added UTF8 as allowed Character Set
# @@(#)  2.9      2024-09-12  jahr   NOPROTECTION allowed

# @(#) ================================================================================================================
set -o pipefail

# Set this variable if you want to test / develop on an other path
ORABASEDIR="${ORABASEDIR:-/app/oracle}"
ORABINDIR="${ORABINDIR:-/app/oracle/bin}"

# Read Oracle Library including Logger
source $ORABINDIR/ORAlib
source $ORABINDIR/ORACDBlib

# Init log4sh with default logfile name
Logger
#logger_debug "1.ORABINDIR=$ORABINDIR"

# Unset already set ORACLE related env variables
#logger_info "Unset already set environment variables .."
#source $ORABINDIR/dbset none >/dev/null 2>&1
#logger_debug "2.ORABINDIR=$ORABINDIR"
for i in `env|grep -i -e "^ORACLE" -e "^AGENT" -e "^DB"|sort|cut -d= -f1`
do
  echo "unset $i=`eval echo \\$$i`" | logger_debug
  unset $i
done

# Read default parameters
Parameter

# =================================================================================================
#
# Function Usage
#
# =================================================================================================

usage() {
  local RC=${1:-0}
  # set dummy value for $RESTARFILE
  [ "$DBNAME" != "NONE" ] || DBNAME="<DBNAME>"
  logger_info ""
  logger_info "  Command     : $SCRIPTNAME"
  logger_info "  Description : $SCRIPTSHORTDESC"
  logger_info ""
  logger_info "  Parameters  : -d | --database           Database Name "
  logger_info "                -s | --dgside             DataGuard Side (s1|s2),  Default: $DGSIDE1"
  logger_info "                -t | --dbtemplate         Database Template Name,  Default: $DEFAULTTEMPLATE"
  # logger_info "                --compatible              Compatible Mode          Default: $COMPATDEFAULT"
  logger_info "                -c | --charset            characterset             Default: $DEFAULTCHARSET, [WE8ISO8859P15|AL32UTF8]"
  logger_info "                -n | --ncharset           national characterset    Default: $DEFAULTNCHARSET, [AL16UTF16|UTF8 (for DMS only)]"
  logger_info "                -i | --installsw          Flag to install Software, if database Name is empty, exit after installation"
  logger_info "                -j | --protectiongroup    Add Database to Cohesity Protectiongroup No Default"
  logger_info "                                          the list with allowed protectiongroups can be found in $ORABINDIR/python/OraProtectionGroups.lst"
  logger_info "                -p | --pdbname            Create PDB after creating CDB"
  logger_info "                --datasize                MB Size of Datavolume          Default: $DEFAULTDATASIZEMB"
  logger_info "                --frasize                 MB Size of Recovery File Dest  Default: $DEFAULTFRASIZEMB"
  logger_info "                -f | --force              delete Database etc."
  logger_info "                --skip 'fs,ls,db'         Comma separated list of skip options for creation steps"
  logger_info "                                          fs=filesystem, ls=listener, db=database"
  logger_info "                -r |--restart             skip functions already done"
  logger_info "                                          see $(eval echo $RESTARTFILE)"
  logger_info "                -l |--listjobs            List allowed protectiongroups"
  logger_info "                -v |--version             Select dedicated Software Version. Default: hightest Version"
  logger_info "                --lv                      List Oracle Software Versions"
  logger_info "                -h | --help               help screen"
  logger_info ""
  logger_info "  Example     : ORAcreateCDB --database CABCK"
  logger_info ""
  logger_info "  Attention   : This script must be started as user ORACLE"
  logger_info ""
  exit $RC
}

# =================================================================================================
#
# Read Script Options (getopt)
#
# Define Options
#
#  SHORT --> short option (e.g. -d)
#  LONG --> long option (e.g. --database)
#  : means that a second argument is required
#
# Return Values
#   0 : Successful
#  10 : Unsuccessful
#  11 : Invalid Argument
#
# =================================================================================================

ReadOptions() {
  logger_debug "--> Function $FUNCNAME"
  if [ $# -eq 0 ]
  then
    logger_fatal "Arguments required"
    return 10
  fi
  SHORT="fhirld:c:n:j:o:p:s:t:v:"
  LONG="help,force,database:,charset:,ncharset:,oraclehome:dgside:dbtemplate:,skip:,datasize:,frasize:,installsw,restart,listjobs,lv,version:,protectiongroup:,pdb:"
  logger_debug "LONG=$LONG"
  logger_debug "Arguments=$*"
  OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@" 2>/dev/null)
  RC=$?
  logger_debug "OPTIONS=$OPTIONS"
  if [ "$RC" -ne 0 ]
  then
    logger_fatal "Invalid Arguments"
    return 11
  fi

  eval set -- $OPTIONS
  while true
  do
    case $1 in
      -h|--help)        usage
                        shift;;
      -d|--database)    DBNAME="$2"
                        logger_debug "DBNAME=$DBNAME"
                        shift 2;;
      -c|--charset)     CHARSET="$2"
                        logger_debug "Characterset=$CHARSET"
                        shift 2;;
      -n|--ncharset)    NCHARSET="$2"
                        logger_debug "National Characterset=$NCHARSET"
                        shift 2;;
      -o|--oraclehome)  TMPORACLE_HOME="$2"
                        logger_debug "TMPORACLE_HOME=$TMPORACLE_HOME"
                        shift 2;;
      -j|--protectiongroup)      PROTECTIONGROUP="$2"
                        logger_debug "PROTECTIONGROUP=$PROTECTIONGROUP"
                        shift 2;;
      -p|--pdb)         PDBNAME="$2"
                        logger_debug "PDBNAME=$PDBNAME"
                        shift 2;;
      -s|--dgside)      DGSIDE="$2"
                        logger_debug "DGSIDE=$DGSIDE"
                        shift 2;;
      -t|--dbtemplate)  DBTEMPLATE="$2"
                        logger_debug "DBTEMPLATE=$DBTEMPLATE"
                        shift 2;;
      --datasize)       DATASIZEMB="$2"
                        logger_debug "DATASIZEMB=$DATASIZEMB"
                        shift 2;;
      --frasize)        FRASIZEMB="$2"
                        logger_debug "FRASIZEMB=$FRASIZEMB"
                        shift 2;;
      -i|--installsw)   INSTALLSW=1
                        logger_debug "INSTALLSW=$INSTALLSW"
                        shift ;;
      -v|--version)     SWVERSION="$2"
                        logger_debug "SWVERSION=$SWVERSION"
                        shift 2;;
      --lv)             LISTVERSIONS=1
                        logger_debug "LISTVERSIONS=$LISTVERSIONS"
                        shift ;;
      -r|--restart)     export RESTART=1
                        logger_debug "RESTART=$RESTART"
                        shift ;;
      -l|--listjobs)    export LISTJOBS=1
                        logger_debug "LISTJOBS=$LISTJOBS"
                        shift ;;
      --skip)           SKIP="$(echo $2 | tr -d ' ' | tr 'A-Z' 'a-z')"
                        logger_debug "SKIP=$SKIP"
                        shift 2;;
      -f|--force)       FORCE=1
                        logger_debug "FORCE=$FORCE"
                        shift ;;
      --)               shift;break;;
    esac
  done
  logger_debug "<-- Function $FUNCNAME"
  return 0
}

# =================================================================================================
#
# Main
#
# =================================================================================================

# Set some defaults
DBTEMPLATE="$DEFAULTTEMPLATE"
CHARSET="$DEFAULTCHARSET"
NCHARSET="$DEFAULTNCHARSET"

# Read input parameter
ReadOptions $*
RC=$?
if [ $RC -ne 0 ]; then
  usage 1
fi
if [ -z "$DATASIZEMB" ]
then
  DATASIZEMB=$DEFAULTDATASIZEMB
fi
if [ -z "$FRASIZEMB" ]
then
  FRASIZEMB=$DEFAULTFRASIZEMB
fi
logger_debug "FRASIZEMB=$FRASIZEMB"
logger_debug "DATASIZEMB=$DATASIZEMB"

#
# Do some initial checks
#
# List Oracle db software Versions

if [ -n "$LISTVERSIONS" ]
then
  ListSWVersion
  exit 0
fi

if [ -n "$SWVERSION" ]
then
  CheckSWVersion $SWVERSION
else
  SWVERSION=`cut -d: -f1 ${DBSOFTWAREDIR}/*/database/images.ini |sort -r |head -1`
fi
logger_debug "SWVERSION=$SWVERSION"

# Check DBNAME
if [ -z "$DBNAME" -o "$DBNAME" == "NONE" ]; then
  if [ "$INSTALLSW" -eq 0 ]
  then
    logger_error "Databasename not set"
    usage 1
  else
    INSTALLSW=2
  fi
fi

# Install Oracle db software

if [ "$INSTALLSW" -gt 0 ]; then
  InstallSoftware $SWVERSION
  RC=$?
  if [ "$RC" -ne 0 ]; then
    exit 1
  fi
  if [ "$INSTALLSW" -eq 2 ]
  then
     exit 0
  fi
fi

# Check User
logger_debug USER="$USER"
if [ "$USER" != "oracle" ]; then
  logger_fatal "Wrong User"
  exit 2
fi

# List Cohesity protection groups and exit
if [ "$LISTJOBS" -eq 1 ]; then
  logger_info "List valid Protection Groups"
  cat $ORABINDIR/python/OraProtectionGroups.lst
  exit
fi

# Check Cohesity Protection Group
if [ "$PROTECTIONGROUP" != "NOPROTECTION" && "$PROTECTIONGROUP" == "NONE" ]
then
  logger_error "Cohesity Protection Group not set"
  usage 1
fi

#
# Re-Init some values
#

# Set CDB specific restartfile name
RESTARTFILE="$ORABASEDIR/admin/log/`basename $0`_${DBNAME}.lck"

# Re-Init log4sh with CDB specific logfile name
logger_debug "Re-Init Logger using '`basename $0|cut -d. -f1`'${DBNAME/#/_}-{type}-{date}.log"
Logger "${DBNAME/#/_}" 1

# Get stage from dbname
DBNAME=$(echo $DBNAME|tr '[:lower:]' '[:upper:]')
GetStage $DBNAME
RC=$?
if [ "$RC" -ne 0 ]; then
  logger_error "Invalid Databasename $DBNAME"
  exit 1
fi

# Export some variables
logger_info "Set environment variables .."
DBUNAME="${DBNAME}_${DBUNAMEPOSTFIX}"
export DBUNAME
logger_info "exported DBUNAME=$DBUNAME"
export DBNAME
logger_info "exported DBNAME=$DBNAME"
export ORACLE_BASE
logger_debug "exported ORACLE_BASE=$ORACLE_BASE"
export ORACLE_HOME
logger_debug "exported ORACLE_HOME=$ORACLE_HOME"

#
# Start of CDB installation process
#
# Set ORACLE_HOME (get newest supported one if none was defined)
# This set ORACLE_HOME and ORACLE_VERSION
   
OracleHome "$TMPORACLE_HOME"

RC=$?
if [ "$RC" -ne 0 ]; then
  exit 1
fi

# Check Characterset
logger_info "CHARSET=$CHARSET"
if [ "$CHARSET" != "AL32UTF8" -a "$CHARSET" != "WE8ISO8859P15" -a "$CHARSET" != "UTF8" ]; then
  logger_error "Wrong Characterset ${CHARSET}, only AL32UTF8 and WE8ISO8859P15 are allowed"
  usage 1
fi
logger_info "NCHARSET=$NCHARSET"
if [ "$NCHARSET" != "AL16UTF16" -a "$NCHARSET" != "UTF8" ]; then
  logger_error "Wrong National Characterset ${CHARSET}, only AL16UTF16 (and UTF8 for DMS) are allowed"
  usage 1
fi

#
# Create Filesystems for DATA and FRA
#
if [ $(IsElementInList "fs" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip filesystem creation!"
  JUMP=`expr $JUMP + 2`
else
  logger_info "Create db filesystems .."
  CreateLogicalVolume data "$DATASIZEMB"
  CreateLogicalVolume fra "$FRASIZEMB"
fi

#
# Check Database Template
#

CheckTemplate "$ORACLE_VERSION" "$DBTEMPLATE"
[[ "$?" -eq 0 ]] || exit 1

#
# Copy Password Files
#
logger_info "Copy password files .."
JUMP=`expr $JUMP + 1`
CopyPasswords $JUMP
[[ "$?" -eq 0 ]] || exit 1

#
#  Create Listener
#
LISTENER=LISTENER_${DBNAME}
if [ "$FORCE" -eq 1 ]; then
  logger_info "Delete listener $LISTENER .."
  DeleteListener
  [[ "$?" -eq 0 ]] || exit 1
fi
JUMP=`expr $JUMP + 1`
if [ $(IsElementInList "ls" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip listener creation!"
else
  logger_info "Create listener $LISTENER .."
  CreateListener $JUMP
  RC=$?
  if [ "$RC" -ne 0 ]
  then
     logger_warn "Listener Creation needs investigation"
  fi
fi

#
# Create Database
#
JUMP=`expr $JUMP + 1`
if [ $(IsElementInList "db" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip database creation!"
  SetOracleSID $DBNAME
  logger_debug "ORACLE_HOME=$ORACLE_HOME"
  logger_debug "TMPORACLE_HOME=$TMPORACLE_HOME"
else
  logger_info "Create database $DBNAME .."
  CreateCDB "$JUMP" "$DBNAME" "$CHARSET" "$NCHARSET" "$ORACLE_HOME" "$DBTEMPLATE"
  RC=$?
  if [ $RC -ne 0 ]; then
    logger_error "Unable to create Database $DBNAME"
    exit 1
  fi
fi

#
# Configure oratab (set :N to :Y)
#
logger_info "Configure oratab .."
JUMP=`expr $JUMP + 1`
ConfigOratab "$JUMP"
[[ "$?" -eq 0 ]] || exit 1

# Set environment (dbset can not be used here because env setup is not complete yet)
logger_info "Set database environment .."
SetOracleSID "$DBNAME"
ENVVARS="$(env|grep -e "^ORACLE_HOME" -e "^ORACLE_SID" -e "^PATH" -e "^DBNAME" -e "^DBUNAME"|sort)"
if [ -z "$ORACLE_HOME" -o -z "$ORACLE_SID" -o -z "$PATH" -o -z "$DBNAME" -o -z "$DBUNAME" ]; then
  logger_fatal "Required environment variables missing!"
  logger_info "Check ORACLE_HOME, ORACLE_SID, PATH, DBNAME, DBUNAME"
  echo "Used variables: "$ENVVARS || logger_info
  exit 1
fi
logger_debug "$ENVVARS"

#
# Deploy environment configuration files
#
logger_info 'Deploy environment configuration files ..'
$ORABINDIR/environment/envsetup/ora_setup_env.sh "$ORACLE_SID" | tee >(logger_debug)
[ "$?" -eq 0 ] || ENVWARN=1
$ORABINDIR/environment/envsetup/ora_setup_env.sh "AGENT" | tee >(logger_debug)
[ "$?" -eq 0 ] || ENVWARN=1
if [ "$ENVWARN" == "1" ]; then
  logger_warn "Error in env config files deployment"
  WARN=1
fi

#
# Create db services
#
logger_info 'Create service CDB$ROOT ..'
JUMP=`expr $JUMP + 1`
CreateDBService "$JUMP" 'CDB$ROOT' "${DBNAME}.${DBDOMAIN}"
[[ "$?" -eq 0 ]] || exit 1

#
# EUS register CDB
#
logger_info "Register CDB in OUD .."
JUMP=`expr $JUMP + 1`
RegisterDB "$JUMP"
if [ "$?" -ne 0 ]; then
  logger_warn "Unable to register CDB in OUD"
  WARN=1
fi

logger_info "Run mandatory scripts .."
JUMP=`expr $JUMP + 1`
RunMandatoryCDB "$JUMP"
[[ "$?" -eq 0 ]] || exit 1

logger_info "Recompile db objects .."
DBRecompile 0
[[ "$?" -eq 0 ]] || exit 1

logger_info "Run database checks .."
DatabaseChecks 0
[[ "$?" -eq 0 ]] || exit 1

#
# Falls der Parameter PDB gesetzt ist, wird eine PDB angelegt
#
JUMP=`expr $JUMP + 1`
if [ -z "$PDBNAME" -o "$PDBNAME" == "NONE" ]; then
  logger_info "Skip PDB creation (no PDB specified)"
else
 logger_info "Create PDB $PDBNAME .."
  CheckRestartFile "$JUMP" "ORAcreatePDB"
  if [ $? -ne 0 ]; then
    [ "$RESTART" -eq 1 ] && RESTARTOPT="-r" || RESTARTOPT=""
    echo -e "\n$(env|grep -e "ORACLE_HOME" -e "ORACLE_SID" -e "^PATH" -e "DBNAME" -e "DBUNAME")"|logger_debug
    CMD="${ORABINDIR}/ORAcreatePDB -d '$DBNAME' -p '$PDBNAME' $RESTARTOPT"
    logger_debug "$CMD"
    eval "$CMD" | logger_debug
    RC=$?
    UpdateRestartFile "$JUMP" "$RC" "ORAcreatePDB"
    echo -e "\n$(env|grep -e "ORACLE_HOME" -e "ORACLE_SID" -e "^PATH" -e "DBNAME" -e "DBUNAME")"|logger_debug
    if [ "$RC" -ne 0 ]; then
      logger_error "PDB creation failed (RC=$RC)"
      exit 1
    fi
    logger_info "PDB $PDBNAME created"
  fi
fi

#
# Some final configuration steps
#

# Enable block change tracking
logger_info "Enable BCT for database .."
JUMP=`expr $JUMP + 1`
BlockChangeTracking $JUMP
if [ "$?" -ne 0 ]; then
  logger_warn "Unable to activate Block Change Tracking"
  WARN=1
fi

# Create init.ora file required for dbset
logger_info "Create pfile init${DBNAME}.ora from spfile .."
CreatePFile
if [ "$?" -ne 0 ]
then
  logger_warn "Unable to create pfile"
  WARN=1
fi

# Create Enterprise Manager configuration task
logger_info "Create OEM configuration task config .."
JUMP=`expr $JUMP + 1`
ConfigOEM add $JUMP
if [ "$?" -ne 0 ]
then
  logger_warn "Unable to Create Enterprise Manager Configurations"
  WARN=1
fi

# Run Cohesity protection
logger_info "Protect database .."
JUMP=`expr $JUMP + 1`
if [ "$PROTECTIONGROUP" != "NOPROTECTION" ]
then
  ProtectDatabase "$JUMP" "$PROTECTIONGROUP"
  if [ "$?" -ne 0 ]
  then
    logger_warn "Unable to Protect Database with Cohesity"
    WARN=1
  fi
fi

# # COH Backup runs into ERROR - Unable to find Database
# # - /app/oracle/admin/log/COHrunORAbackupCMP1K-debug-yyyymmdd.log
# # - [ERROR] (COHrunORAbackup.sh) - Unable to find Database CMP1K_S1
# #
# # Run initial Cohesity backup
# logger_info "Run database backup .."
# JUMP=`expr $JUMP + 1`
# BackupDatabase $JUMP
# [[ "$?" -eq 0 ]] || exit 1              # maybe doesn't work yet

# Configure HugePages
JUMP=`expr $JUMP + 1`
ConfigureHugepages $JUMP
if [ "$?" -ne 0 ]
then
  logger_warn "Unable to Configure Hugepages"
  WARN=1
fi

# ADauth_wallet anlegen
logger_info "Create AD authwallet .."
JUMP=`expr $JUMP + 1`
CheckRestartFile "$JUMP" "CreateADauthWallet"
if [ $? -ne 0 ]; then
  CMD="${ORABINDIR}/ORAmkAD_authwallet"
  logger_debug "$CMD"
  eval "$CMD" 2>&1 | logger_debug
  RC=$?
  UpdateRestartFile "$JUMP" "$RC" "CreateADauthWallet"
  if [ "$RC" -ne 0 ]; then
    logger_error "Create AD authwallet failed (RC=$RC)"
    WARN=1
  else
    logger_debug "Create AD authwallet succeeded"
  fi
fi

# Configure ControlM host groups
logger_info "Configure CTM host groups .."
ConfigCtmHostGroups default
[ "$?" -eq 0 ] || WARN=1
ConfigCtmHostGroups netbackup
[ "$?" -eq 0 ] || WARN=1

# Add database entry to cmdb for Foglight integration
JUMP=`expr $JUMP + 1`
ConfigFoglight create `hostname -s` "$DBUNAME" "$PORT" "$JUMP"
[ "$?" -eq 0 ] || WARN=1

# Check warnings
if [ "$WARN" -ne 0 ]
then
  logger_error "Database $DBNAME created successfully with warnings"
  exit 1
fi

logger_info "Database $DBNAME successfully created"
logger_info "Please reset env using '. dbset $DBNAME'"
exit 0
