#!/bin/bash
# @(#) ================================================================================================================
# @(#) Name .........: ORAclone_db
# @(#) Autor ........: Daniel Oberdick
# @(#) Funktion .....: This script clones Oracle software
# @(#) Version ......: 3.4.1
# @(#) Datum ........: 25.01.2023
# @(#)
# @(#) Attention ....: This script must be started as user ORACLE
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)    1.0    2012-06-21  Oberdick Created
# @@(#)    2.0    2012-11-09  Pils     Changed a lot of
# @@(#)    2.1    2013-09-03  Pils     Changed for creating clone image files
# @@(#)    2.2    2016-04-14  Thiel    Option -lv eingef√ºhrt
# @@(#)    2.3    2017-10-10  Thiel    Aufruf von runInstaller mit -ignoreSysPreReqs
# @@(#)    2.4    2017-11-07  Thiel    in der Datei /app/oracle/software/clones/12.1.0/database/images.ini wird fuer jedes ORACLE-Image der 
# @@(#)                                benoetigte Platzbedarf aufgefuehrt. Dieser wird auf der Zielmaschine ueberprueft, und falls nicht vorhanden
# @@(#)                                bricht das Skript ab
# @@(#)                                ein vorhandenes aber leeres neues ORACLE_HOME-Directory wird erlaubt
# @@(#)    2.5    2017-11-29  Thiel    RunInstaller nur noch zum attachHome aufrufen, (kein komplettes Softwareklonen!)
# @@(#)    2.6    2017-11-30  Jupp     Verfuegbaren Platz abhaengig von OS Version ermittelt
# @@(#)           2017-12-01  Thiel    kleine Fehlerberichtigung bei Bestimmung von FREEMB
# @@(#)    2.7    13.02.2018  Thiel    runinstaller mit -ignoreSysPrereqs aufrufen, um bei zu wenig swap-space keine Fehlermeldung zu erhalten
# @@(#)                                Option -p beim Auspacken des TAR-Files hinzugefuegt
# @@(#)    2.8    14.02.2018  Thiel    wenn ORAclone_db auf lxora aufgerufen wird; den runInstaller mit -clone Syntax starten
# @@(#)                                auf allen anderen Systemen mit -attachHome-Syntax
# @@(#)    2.9    08.03.2018  Thiel    variable $ORAVERS changed to $ORAVERSION
# @@(#)    3.0    04.10.2018  Thiel    OSVERSION 6.10 has to be regarded
# @@(#)    3.1    18.07.2022  Thiel    relink oracle software with current libraries after installation
# @@(#)    3.2    24.01.2023  Thiel    changed logdir
# @@(#)    3.3    24.01.2023  Thiel    create productdir, if not exists
# @@(#)    3.4    25.01.2023  TOW      Only when Parameter -e is given execute relink oracle executables 
# @@(#)    3.4.1  25.01.2023  TOW      change compareing parameter
# @(#) ================================================================================================================

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
HOST=`hostname -s`
#LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Clones an oracle db software image"
ORACLE_BASE="/app/oracle"
LOGDIR="/app/oracle/admin/log"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -home,     ORACLE_HOME (/app/oracle/product/11.2.0/dbxxxxxx) "
echo "                -img,      database image, derived from ORACLE_HOME if not spezified"
echo "                           (/app/oracle/software/clone/<MajorRelease>/database/<ImageFile>)"
echo "                -l,        lists all available database images"
echo "                -lv,       lists only the version of all available database images"
echo "                -norootsh, doesn't execute root.sh - needed to create a clone image tar file"
echo "                -e,        relink oracle executables"
echo "                -h,        help screen"
echo ""
echo "  Example     : ORAclone_db -home /app/oracle/product/11.2.0/db112032"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: List all available clone images
#-----------------------------------------------------------------------------------------------------------------
function list_images()
{
Bmsg -bm "Available database clone images.."
find /app/oracle/software/clones/*/database -name "db*.tgz"
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: List all available clone image versions
#-----------------------------------------------------------------------------------------------------------------
function list_image_version()
{
CLONEDIR=/app/oracle/software/clones/*/database
for TGZ in `find $CLONEDIR -name "db*.tgz"`
do
   basename $TGZ|sed s/\.tgz//|sed s/db// >>/tmp/versions.txt
done
cat /tmp/versions.txt|grep -v "_"|sort -n > /tmp/versions_sorted.txt
for MAJOR_VERS in `cat /tmp/versions.txt|grep "_"|awk -F_ '{print $1}'|sort -n|uniq`
do
   grep -e $MAJOR_VERS /tmp/versions.txt|grep -e "_"|sort -n >>/tmp/versions_sorted.txt
done
rm /tmp/versions.txt
cat /tmp/versions_sorted.txt
rm /tmp/versions_sorted.txt
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check free space for image installation
#-----------------------------------------------------------------------------------------------------------------
function check_free_space()
{
IMAGEINI="${CLONESOURCEDIR}/images.ini"
if [ ! -s $IMAGEINI ]
then
   Bmsg -rl $LOGFILE -m  "Datei $IMAGEINI nicht gefunden!"
   Bmsg -rl $LOGFILE -m  "Check auf genuegend freien Platz kann nicht ausgefuehrt werden!"
   return
fi
OSVERSION=`cat /etc/system-release|awk '{print $7}'`
ORAVERSION=`basename $IMAGEFILE .tgz|sed s/db//`
NEEDMB=`grep $ORAVERSION $IMAGEINI|awk -F: '{print $2}'`
#ein bisschen Reserve hinzu
NEEDMB=`expr $NEEDMB + 500 `
ORAPRODUCT=/app/oracle/product
if [ ! -d $ORAPRODUCT ]
then
   mkdir -p $ORAPRODUCT
   if [ $? -ne 0 ]
   then
      Bmsg -rl $LOGFILE -m  "Verzeichnis >$ORAPRODUCT< konnte nicht angelegt werden!"
   fi
fi
cd $ORAPRODUCT
FREEMB=`df -m .|grep "/app"|awk '{print $4}'`
if [ "$OSVERSION" == "6.7" -o "$OSVERSION" == "6.10" ]
then
    FREEMB=`df -m .|grep "/app"|awk '{print $3}'`
fi
if [ $FREEMB -gt $NEEDMB ]
then
   Bmsg -gl $LOGFILE -m  "ORACLE-Version $ORAVERSION kann installiert werden!"
else
   Bmsg -rl $LOGFILE -m  "freier Platz >$FREEMB< nicht ausreichend zur Installation von ORACLE-Version $ORAVERSION"
   Bmsg -rl $LOGFILE -m  "benoetigt werden >$NEEDMB< freier Platz unter /app!"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort   
#-----------------------------------------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "error code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
while true; do
  case "$1" in
    -home | --oracle_home ) ORACLE_HOME="$2";home=1; shift 2 ;;
    -img ) CLONEIMAGE="$2";img=1; shift 2 ;;
    -l ) list_images; exit ;;
    -lv ) list_image_version; exit ;;
    -norootsh ) norootsh=1; shift 1 ;;
    -e ) execute=1; shift 1;; 
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "x" == "x$home" ]; then
  Bmsg -rm "-home | --oracle_home [option] is required"; echo ""; usage
fi

#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
ORACLE_HOME_NAME=`basename $ORACLE_HOME`
DBARCHIVE="${ORACLE_HOME_NAME}.tgz"
MAJORRELEASE=`echo "${ORACLE_HOME_NAME}"|cut -b 3-4`
MAJORRELEASE="${MAJORRELEASE}."
MAJORRELEASE="${MAJORRELEASE}`echo "${ORACLE_HOME_NAME}"|cut -b 5`"
MAJORRELEASE="${MAJORRELEASE}.0"
CLONESOURCEDIR="${ORACLE_BASE}/software/clones/${MAJORRELEASE}/database"
IMAGEFILE=$CLONESOURCEDIR/$DBARCHIVE
INSTALL_BASE="${ORACLE_BASE}/product/${MAJORRELEASE}"
OSDBA_GROUP="dba"
OSOPER_GROUP="oper"
ORAINVENTORY="/app/oraInventory/ContentsXML/inventory.xml"
if [ "x1" == "x$img" ]; then
   IMAGEFILE=$CLONEIMAGE
fi

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
Bscriptstart -l $LOGFILE "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

##### ORACLE_HOME Check ############
Bmsg -1l $LOGFILE -m "Check if ORACLE_HOME already exists"
if [ -d ${ORACLE_HOME} ];then
  Bmsg -rl $LOGFILE -m "${ORACLE_HOME} already exists"
  FILESFOUND=`find ${ORACLE_HOME} 2>&1|grep -v 'lost+found'|wc -l`
  if [ $FILESFOUND -eq 1 ]
  then
     Bmsg -gl $LOGFILE -m "${ORACLE_HOME} is empty! -->OK"
  else
     RC=255
     Bmsg -rl $LOGFILE -m "error code: ${RC}"
     Bscriptend -l $LOGFILE
     exit $RC
  fi
else
  Bmsg -gl $LOGFILE -m "ORACLE_HOME Check successfully"
  umask 0022
  check_free_space
  mkdir -p ${ORACLE_HOME}
  rmdir ${ORACLE_HOME} 
fi

##### Oracle Inventory Check #######
Bmsg -1l $LOGFILE -m "Check if ORACLE_HOME exists in Oracle Inventory"
ORAINVLINE=$(grep $INSTALL_BASE/$ORACLE_HOME_NAME $ORAINVENTORY 2>/dev/null|grep -v "REMOVED=\"T\"") 
if [ "$ORAINVLINE" != "" ]; then
  Bmsg -rl $LOGFILE -m "ORACLE_HOME already exists in Oracle Inventory.\n"
  Bmsg -rl $LOGFILE -m "$ORAINVLINE"
  Bmsg -rl $LOGFILE -m "\nYou have to remove it first from $ORAINVENTORY"
  RC=255
  Bmsg -rl $LOGFILE -m "error code: ${RC}"
  Bscriptend -l $LOGFILE
  exit $RC
fi
Bmsg -gl $LOGFILE -m "Oracle Inventory check successfully"

##### Clone Image Check ############
Bmsg -1l $LOGFILE -m "Check if DB Clone Image exists"
#if [ ! -e ${CLONESOURCEDIR}/${DBARCHIVE} ]
if [ ! -e ${IMAGEFILE} ]; then
  if [ "x1" == "x$img" ]; then
    Bmsg -rl $LOGFILE -m "Selected Image File doesn't exists."
    Bmsg -rl $LOGFILE -m "(${IMAGEFILE})"
    list_images
  else
    Bmsg -rl $LOGFILE -m "Selected ORACLE_HOME Image not available in Image Directory"
    Bmsg -rl $LOGFILE -m "    '${CLONESOURCEDIR}'\n"
    Bmsg -rl $LOGFILE -m "DB Imeages available for this HOMEs only:\n"
    for i in `ls ${CLONESOURCEDIR}`;do
      Bmsg -rl $LOGFILE -m "    ${INSTALL_BASE}/${i%%.tgz}   (${i})"
    done
  fi
  echo " "
  RC=255
  Bmsg -rl $LOGFILE -m "error code: ${RC}"
  Bscriptend -l $LOGFILE
  exit $RC
else
  Bmsg -gl $LOGFILE -m "DB Clone Image Check successfully"
fi

##### Unpack DB Clone Image ########
Bmsg -1l $LOGFILE -m "Unpack Clone Image ..."
#CMD="tar zxvf ${CLONESOURCEDIR}/${DBARCHIVE} -C ${INSTALL_BASE} >> ${LOGFILE}"
TRANSFORMRULE=""
if [ "x1" == "x$img" ]; then
  PATTERN=$(tar -tf $IMAGEFILE | head -1)
  TRANSFORMRULE="--transform=s,$PATTERN,$ORACLE_HOME_NAME/,"
fi
CMD="tar $TRANSFORMRULE -zxvpf ${IMAGEFILE} -C ${INSTALL_BASE} >> ${LOGFILE}"
Bmsg -l $LOGFILE -m "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]
then
  Bmsg -rl $LOGFILE -m "Unpack failed with error code: ${RC}"
  Bscriptend -l $LOGFILE
  exit $RC
else
  Bmsg -gl $LOGFILE -m "Unpack successfully"
fi

##### Clone DB Software ############
Bmsg -1l $LOGFILE -m "Clone DB Software ..."
if [ "$HOST" == "lxora" ]
then
   CMD="$ORACLE_HOME/oui/bin/runInstaller -clone -silent -waitforcompletion -ignorePreReq -ignoreSysPreReqs ORACLE_HOME=\"$ORACLE_HOME\" ORACLE_HOME_NAME=\"$ORACLE_HOME_NAME\" ORACLE_BASE=\"$ORACLE_BASE\" oracle_install_OSDBA=\"$OSDBA_GROUP\" oracle_install_OSOPER=\"$OSOPER_GROUP\""
else
   CMD="$ORACLE_HOME/oui/bin/runInstaller -ignoreSysPrereqs -attachHome ORACLE_HOME=\"$ORACLE_HOME\" ORACLE_HOME_NAME=\"$ORACLE_HOME_NAME\""
fi
Bmsg -l $LOGFILE -m  "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]
then
  Bmsg -rl $LOGFILE -m "OH creation failed with error code: $RC"
  Bscriptend -l $LOGFILE
  exit $RC 
else
  Bmsg -gl $LOGFILE -m "OH $ORACLE_HOME successfully created"
fi

##### relink oracle executables ##############
if [ "x" != "x$execute" ]; then
Bmsg -1l $LOGFILE -m "relink oracle executables"
ORArelink_execs
RC=$?
   if [ $RC -ne 0 ]
   then
     Bmsg -rl $LOGFILE -m "relinking oracle executables failed with error code: $RC"
     Bscriptend -l $LOGFILE
     exit $RC 
   fi
fi
##### Execute root.sh ##############
if [ "x" == "x$norootsh" ]; then
  Bmsg -1l $LOGFILE -m "Run sudo root.sh ..."
  CMD="sudo ${ORACLE_HOME}/root.sh >> ${LOGFILE}"
  Bmsg -l $LOGFILE -m  "$CMD"
  bash -c "$CMD"
  RC=$?
  if [ $RC -ne 0 ]
  then
    Bmsg -rl $LOGFILE -m "sudo root.sh failed with error code: $RC"
    Bscriptend -l $LOGFILE
    exit $RC
  else
    Bmsg -gl $LOGFILE -m "sudo root.sh successfully"
  fi
else
  Bmsg -bl $LOGFILE -m "root.sh will not be executed because of '-norootsh' Parameter."
fi

#-----------------------------------------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------------------------------------
Bscriptend -l $LOGFILE
exit
