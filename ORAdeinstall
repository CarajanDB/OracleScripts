#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAdeinstall
# @(#) Author      : Daniel Oberdick
# @(#) Modified    :
# @(#)
# @(#) Description : This script deinstalls Oracle software
# @(#)
# @(#) Version     : 2.2
# @(#) Datum       : 25.01.2023
# @(#)
# @(#)
# @(#) Attention   : This script must be started as user ORACLE
# @(#)
# @@(#  Change History:
# @@(#)
# @@(#)   1.0  2012-06-21  Oberdick                        Created
# @@(#)   2.0  2013-10-16  Pils                            Changed a lot of
# @@(#)   2.1  26.03.2018  Thiel  changed header format, added runInstaller option -ignoreSysPreReqs
# @@(#)   2.2  25.01.2023  Thiel  changed LOGDIR
# @(#) ================================================================================================================

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Deinstall agent or db software"
ORACLE_BASE="/app/oracle"
LOGDIR="/app/oracle/admin/log"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"
#OMSSERVER="<oraem.unix.lan|oraoms.unix.lan>"
OMSSERVER="<oms-server>"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME -type <agent|db> -home <path> "
echo "  Descrition  : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -type,                    Type agent or db"
echo "                -home,                    ORACLE_HOME to be deleted"
echo ""
echo "  Example     : $SCRIPTNAME -type db -home /app/oracle/product/11.2.0/db112030"
echo "              : $SCRIPTNAME -type agent -home /app/oracle/product/em/agent/core/12.1.0.1.0"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Delete DB
#-----------------------------------------------------------------------------------------------------------------
delete_db() 
{
Bmsg -1l $LOGFILE -m "Detach DB Home ..."
CMD="$RUNINST -silent -waitforcompletion -ignoreSysPreReqs -detachHome \"ORACLE_HOME=${ORAHOME}\" >> $LOGFILE"
Bmsg -l $LOGFILE -m "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Detach db home failed with RC=${RC}"
  Bscriptend -l $LOGFILE
  exit $RC
else
  Bmsg -gl $LOGFILE -m "Detach db home succeded."
fi

Bmsg -1l $LOGFILE -m "Remove DB Home ..."
CMD="rm -rf ${ORAHOME} >> $LOGFILE"
Bmsg -l $LOGFILE -m "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Remove db home failed with RC=${RC}"
  Bscriptend -l $LOGFILE
  exit $RC
else
  Bmsg -gl $LOGFILE -m "Remove db home succeded."
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Stop agent
#-----------------------------------------------------------------------------------------------------------------
stop_agent() 
{
if [ ! -x $EMCTL ]; then
  Bmsg -rl $LOGFILE -m "no emctl: $EMCTL found!" 
  Bmsg -l $LOGFILE -m "Stop Agent manually!"
  Bscriptend -l $LOGFILE
  exit 255
fi

AGENTDOWN=$($EMCTL status agent|grep "Agent is Not Running"|grep -v grep|wc -l)
if [ "x$AGENTDOWN" = "x0" ]; then
  CMD="${EMCTL} stop agent >> ${LOGFILE}"
  Bmsg -l $LOGFILE -m "$CMD"
  bash -c "$CMD"
  RC=$?
  if [ $RC -ne 0 ]; then
    Bmsg -rl $LOGFILE -m "Agent stop failed with error code: ${RC}"
    Bscriptend -l $LOGFILE
    exit $RC
  else
    Bmsg -gl $LOGFILE -m "Agent stop succeded."
  fi
else
  Bmsg -gl $LOGFILE -m "Agent stopped allready."
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Delete agent
#-----------------------------------------------------------------------------------------------------------------
delete_agent() 
{
AGENTHOME=$ORAHOME
AGENTBASE=$(dirname $(dirname $AGENTHOME))
EMCTL=$AGENTHOME/bin/emctl

if [ ! -x $RUNINST ]; then
  Bmsg -rl $LOGFILE -m "no runInstaller: $RUNINST found!"
  Bscriptend -l $LOGFILE
  exit 255
fi

##### stop agent #####
Bmsg -1l $LOGFILE -m "Stop agent ..."
stop_agent

##### deinstall agent #####
Bmsg -1l $LOGFILE -m "Deinstall agent ..."
RC1=0
CMD="cp -f $INVXML $BACKUPINVXML >>$LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"

# Deinstall the plug-in homes
HOMEPATHS=$(echo $(grep "HOME NAME.*${AGENTBASE}/plugins" $INVXML |sed -e 's/.*LOC="//g;s/".*$/,/g')|sed 's/,$//g')
CMD="$RUNINST -silent -deinstall -waitforcompletion -removeallfiles \"REMOVE_HOMES={$HOMEPATHS}\" >> $LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"
RC=$?; RC1=$(expr $RC1 + $RC)

# Deinstall the sbin home
HOMEPATHS=$(echo $(grep "HOME NAME.*${AGENTBASE}/sbin" $INVXML |sed -e 's/.*LOC="//g;s/".*$/,/g')|sed 's/,$//g')
CMD="$RUNINST -silent -deinstall -waitforcompletion -removeallfiles \"REMOVE_HOMES={$HOMEPATHS}\" >> $LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"
RC=$?; RC1=$(expr $RC1 + $RC)

# Deinstall the Management Agent
HOMEPATHS=$(echo $(grep "HOME NAME.*${AGENTBASE}/core" $INVXML |sed -e 's/.*LOC="//g;s/".*$/,/g')|sed 's/,$//g')
CMD="$RUNINST -silent -deinstall -waitforcompletion -removeallfiles \"REMOVE_HOMES={$HOMEPATHS}\" >> $LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"
RC=$?; RC1=$(expr $RC1 + $RC)

if [ $RC1 -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Deinstall agent failed. Please visit logfile $LOGFILE"
else
  Bmsg -gl $LOGFILE -m "Deinstall agent succeded."
fi

##### remove agent base dir #####
Bmsg -1l $LOGFILE -m "Remove agent directory ..."
CMD="rm -rf $AGENTBASE >>$LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Remove agent directory failed." 
else
  Bmsg -gl $LOGFILE -m "Remove agent directory succeded."
fi

##### Cleanup GCHomeList #####
LINES=$(cat $ORAGCHOMELIST|wc -l)
if [ $LINES -lt 2 ];then
  echo " " >> $ORAGCHOMELIST
fi
CMD="cp -f $ORAGCHOMELIST $BACKUPORAGCHOMELIST >>$LOGFILE"
Bmsg -l $LOGFILE -m "\n$CMD"
bash -c "$CMD"
CMD="grep -v \"$AGENTBASE/core\" $BACKUPORAGCHOMELIST > $ORAGCHOMELIST"
Bmsg -l $LOGFILE -m "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Cleanup GCHomeList failed."
else
  Bmsg -gl $LOGFILE -m "Cleanup GCHomeList succeded."
fi

# cleanup files
#sudo rm -rf /etc/init.d/gcstartup >> $LOGFILE
#sudo rm -rf /etc/oragchomelist >> $LOGFILE

##### Print emcli Commands #####
Bmsg -1l $LOGFILE -m "Remove agent from EM repository ..."
Bmsg -l $LOGFILE -m "Use next commands to remove agent from EM repository"
Bmsg -bl $LOGFILE -m "ssh $OMSSERVER"
Bmsg -bl $LOGFILE -m "sudo su - oracle"
Bmsg -bl $LOGFILE -m ". dbset oms"
Bmsg -bl $LOGFILE -m "emcli login -username=SYSMAN"
Bmsg -bl $LOGFILE -m "emcli sync"
Bmsg -bl $LOGFILE -m "emcli get_targets -targets=%:oracle_emd|grep -e \"$LONGHOST\""
Bmsg -bl $LOGFILE -m "emcli delete_target -name=\"$LONGHOST:<port from emcli output>\" -type=\"oracle_emd\" -delete_monitored_targets -async\n"
}

##-----------------------------------------------------------------------------------------------------------------
##     Check if ORACLE_HOME is set
##-----------------------------------------------------------------------------------------------------------------
#if [ "x" = "x${ORACLE_HOME}" ]; then
#  Bmsg -rm "ORACLE_HOME not set. It must be set first!"
#  RC=255
#  Bmsg -rm "Error Code: ${RC}"
#  exit $RC
#fi
#

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
while true; do
  case "$1" in
    -type  ) TYPE="$2";type=1; shift 2 ;;
    -home | --oracle_home ) ORAHOME="$2";home=1; shift 2 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "x" == "x$type" ]; then
  Bmsg -rm "-type {db|agent} [option] is required"; echo ""; usage
fi
if [ "x" == "x$home" ]; then
  Bmsg -rm "-home | --oracle_home [option] is required"; echo ""; usage
fi

#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
TYPE_LC=$(echo $TYPE|tr '[:upper:]' '[:lower:]')
OWNER="oracle"
GROUP="oinstall"
INVXML=/app/oraInventory/ContentsXML/inventory.xml
RUNINST=$ORAHOME/oui/bin/runInstaller
BACKUPINVXML="${LOGDIR}/${SCRIPTNAME}.`date +%Y%m%d%H%M%S`.inventoryxml"
ORAGCHOMELIST="/etc/oragchomelist"
BACKUPORAGCHOMELIST="${LOGDIR}/${SCRIPTNAME}.`date +%Y%m%d%H%M%S`.oragchomelist"

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
Bscriptstart -l $LOGFILE "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

case $TYPE_LC in
   db )    delete_db ;;
   agent ) delete_agent ;;
   * )     Bmsg -rm "Type '$TYPE' is not supported."; usage ;;
esac

#-----------------------------------------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------------------------------------
Bscriptend -l $LOGFILE
exit

