# @(#) ================================================================================================================
# @(#) File        : ORAcreatePDB
# @(#) Author      : Johannes Ahrends, CarajanDB GmbH
# @(#) Version     : 1.7
# @(#) Date        : 2024-07-03
# @(#) Description : Create new PDB with mandatory Objects
# @(#)
# @@(#)  Change History:
# @@(#)  Version  Date        Author  Description
# @@(#)  ------------------------------------------------------------------------------------------
# @@(#)  1.0      2024-02-19  jahr    new version
# @@(#)  1.1      2024-02-20  jahr    check skripte
# @@(#)  1.2      2024-02-22  jahr    aendern jump auf skip
# @@(#)  1.3      2024-03-06  jahr    SKIP Parameter geaendert
# @@(#)  1.4      2024-05-21  mpils   added restart option, re-init logger, db recompile,
# @@(#)                               create db+tns services and some fixes
# @@(#)  1.5      2024-05-22  mpils   fixed RESTARTFILE definition and some checks
# @@(#)  1.6      2024-05-27  mpils   renamed CreateService to CreateDBService
# @@(#)  1.7      2024-07-03  mpils   added WARN if RegisterDB failed and RC to usage
# @@(#)                               redesigned --skip option
# @(#) ================================================================================================================

#
# Set Variable SCRIPTDIR if you want to test / develop
#
if [ -z "$SCRIPTDIR" ]
then
  export SCRIPTDIR=/app/oracle/bin
fi
if [ -z "$ORABASEDIR" ]
then
  export ORABASEDIR=$ORACLE_BASE
fi

# Read Oracle Library including Logger
source $SCRIPTDIR/ORAlib
source $SCRIPTDIR/ORACDBlib

# Init log4sh with default logfile name
Logger

# Read default parameter
Parameter
WARN=0

# =================================================================================================
#
# Function Usage
#
# =================================================================================================

usage() {
  local RC="${1:-0}"
  # set dummy values for $RESTARFILE
  [ "$PDBNAME" != "NONE" ] || PDBNAME="{PDBNAME}"
  [ "$DBNAME" != "NONE" ] || DBNAME="{DBNAME}"
  logger_info "  Command     : $SCRIPTNAME"
  logger_info "  Description : $SCRIPTSHORTDESC"
  logger_info ""
  logger_info "  Parameters  : -d | --database           Database Name "
  logger_info "                -u | --dbuname            Database Unique Name (default:\$DBNAME_S1)"
  logger_info "                -p | --pdb                PDB Name "
  logger_info "                -h | --help               help screen"
  logger_info ""
  # logger_info "                -f | --force              delete PDB etc."
  logger_info "                --skip 'pdb,oud,sql       Comma separated list of skip options for creation steps"
  logger_info "                                          pdb=pdb creation, oud=oud registration, sql=mandatory scripts"
  logger_info "                -r |--restart             skip functions already done"
  logger_info "                                          see $(eval echo $RESTARTFILE)"
  logger_info ""
  logger_info "  Example     : $SCRIPTNAME --database CABCK --pdb JOTEST1"
  logger_info ""
  logger_info "  Attention   : This script must be started as user ORACLE"
  logger_info ""
  exit $RC
}

# =================================================================================================
#
# Read Script Options (getopt)
#
# Define Options
#
#  SHORT --> short option (e.g. -d)
#  LONG --> long option (e.g. --database)
#  : means that a second argument is required
#
# Return Values
#   0 : Successful
#  10 : Unsuccessful
#  11 : Invalid Argument
#
# =================================================================================================

ReadOptions() {
  logger_debug "--> Function $FUNCNAME"
  if [ $# -eq 0 ]
  then
    logger_fatal "Arguments required"
    return 10
  fi
  SHORT="fhrd:u:p:"
  LONG="help,force,restart,database:,dbuname:,pdb:,skip:"
  logger_debug "LONG=$LONG"
  logger_debug "Arguments=$*"
  OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@" 2>/dev/null)
  RC=$?
  logger_debug "OPTIONS=$OPTIONS"
  if [ "$RC" -ne 0 ]
  then
    logger_fatal "Invalid Arguments"
    return 11
  fi

  eval set -- $OPTIONS
  while true
  do
    case $1 in
    -h|--help)
        usage
        shift;;
    -d|--database)
        DBNAME="$2"
        logger_debug "DBNAME=$DBNAME"
        shift 2;;
    -u|--dbuname)
        DBUNAME="$2"
        logger_debug "DBUNAME=$DBUNAME"
        shift 2;;
    -p|--pdb)
        PDBNAME="$2"
        logger_debug "PDBNAME=$PDBNAME"
        shift 2;;
    -r|--restart)
        export RESTART=1
        logger_debug "RESTART=$RESTART"
        shift ;;
    --skip)
        SKIP="$(echo $2 | tr -d ' ' | tr 'A-Z' 'a-z')"
        logger_debug "SKIP=$SKIP"
        shift 2;;
    -f|--force)
        FORCE=1
        logger_debug "FORCE=$FORCE"
        shift ;;
    --) shift;break;;
    esac
  done
  logger_debug "<-- Function $FUNCNAME"
  return 0
}

# =================================================================================================
#
# Main
#
# =================================================================================================

ReadOptions $*
RC=$?
if [ $RC -ne 0 ]; then
  usage $RC
fi

#
# Do some initial checks
#

# Check if DBNAME is set
if [ -z "$DBNAME" -o "$DBNAME" == "NONE" ]; then
  logger_error "Databasename not set"
  usage
fi
DBNAME=$(echo $DBNAME|tr '[:lower:]' '[:upper:]')
logger_debug "DBNAME=$DBNAME"

# Check if PDBNAME is set
if [ -z "$DBNAME" -o "$PDBNAME" == "NONE" ]; then
  logger_error "PDBNAME not set"
  usage
fi
# Ensure upper case PDBNAME
PDBNAME=$(echo $PDBNAME|tr '[:lower:]' '[:upper:]')
logger_debug "PDBNAME=$PDBNAME"

DBUNAME="${DBUNAME:-${DBNAME}_S1}"
logger_debug "DBUNAME=$DBUNAME"

#
# Re-Init some values
#

# Set CDB and PDB specific restartfile name
RESTARTFILE="$ORABASEDIR/admin/log/`basename $0`_${DBNAME}_${PDBNAME}.lck"

# Re-Init log4sh with CDB and PDB specified log file name
logger_debug "Re-Init Logger using '`basename $0|cut -d. -f1`'${DBNAME/#/_}${PDBNAME/#/_}-{type}-{date}.log"
Logger "${DBNAME/#/_}${PDBNAME/#/_}" 1

# Check stage
logger_info "Get stage of CDB $DBNAME.."
GetStage $DBNAME
# STAGE=`echo $DBNAME|rev|cut -c1`
# logger_debug "STAGE=$STAGE"
# ValidStages $STAGE
RC=$?
if [ "$RC" -ne 0 ]; then
  exit 5
fi

#
# Start of PDB installation process
#

export ORACLE_HOME ORACLE_SID DBNAME DBUNAME
echo -e "\n$(env|grep -e "ORACLE_HOME" -e "ORACLE_SID" -e "^PATH" -e "DBNAME" -e "DBUNAME")"|logger_debug

# Check if Instance is running
logger_info "Check for running CDB $DBNAME.."
InstanceUp $DBNAME
RC=$?
if [ "$RC" -ne 0 ]; then
  logger_error "Instance $DBNAME is not open"
  exit 1
fi

# Create Pluggable Database if not skipped
logger_info "Create PDB $PDBNAME .."
JUMP=`expr $JUMP + 1`
if [ $(IsElementInList "pdb" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip PDB creation!"
else
  CreatePDB $JUMP $DBNAME $PDBNAME
  RC=$?
  if [ $RC -eq 0 ]; then
    logger_info "Pluggable Database $PDBNAME successfully created"
  else
    logger_error "Unable to create Pluggable Database $PDBNAME"
    exit 2
  fi
fi

# Register with Directory Service if not skipped
JUMP=`expr $JUMP + 1`
if [ $(IsElementInList "oud" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip PDB registration!"
else
  logger_info "Register PDB in OUD .."
  RegisterDB $JUMP $PDBNAME
  RC=$?
  if [ $RC -eq 0 ]; then
    logger_info "Pluggable Database $PDBNAME successfully registered with Directory Service"
  else
    logger_error "Unable to register PDB $PDBNAME in OUD"
    WARN=1
  fi
fi

# Create db services
logger_info "Create database services .."
# # db service used for pdb eus registration: "${PDBNAME}.${DBDOMAIN}"
# db service used for pdb eus registration: "${PDBNAME}"
# db service used for app connections:      "${PDBNAME:0:-1}"
# for SRV in "${PDBNAME:0:-1}" "${PDBNAME}"
for SRV in "${PDBNAME}" # "${PDBNAME}${STAGE}"   ### ??? <SRV> or <SRV>.<DOMAIN> ???
do
  JUMP=`expr $JUMP + 1`
  CreateDBService $JUMP $PDBNAME "$SRV"
  [ "$?" -eq 0 ] || exit 1
done

# Create TNS-Aliase
logger_info "Create tns service .."
JUMP=`expr $JUMP + 1`
CheckRestartFile "$JUMP" "ORAtnsService"
if [ $? -ne 0 ]; then
  RC=0
  # TNSALIAS="${PDBNAME:0:-1}-${PDBNAME: -1}"
  TNSALIAS="${PDBNAME}-${STAGE}"
  TNSOUT="$($SCRIPTDIR/ORAtnsService -opt list -type tns -tnssrv "$TNSALIAS" -dump)"
  if [ `echo "$TNSOUT"|grep -iq "cn=${TNSALIAS},"; echo $?` -eq 0 ]; then
    logger_warn "TNS-Alias '$TNSALIAS' already exists"
    logger_warn "$TNSOUT"
    WARN=1
  else
    # Alternate:
    # CreateTNSalias ....    # function from ORACDBlib
    CMD="$SCRIPTDIR/ORAtnsService -opt add -type tns
      -sid '${ORACLE_SID}' -host '`hostname -f`' -port '${PORT}'
      -tnssrv '${TNSALIAS}'
      -dbsrv '${PDBNAME}.${DBDOMAIN}'
      -f"
    eval $CMD | logger_debug
    RC=$?
  fi
  UpdateRestartFile "$JUMP" "$RC" "ORAtnsService"
  if [ $RC -ne 0 ]; then
    logger_error "TNS-Alias '$TNSALIAS' creation failed with RC=$RC"
    exit 1
  fi
fi

# Run Mandatory Scripts if not skipped
JUMP=`expr $JUMP + 1`
if [ $(IsElementInList "sql" "$SKIP"; echo $?) -eq 0 ]; then
  logger_info "Skip mandatory scripts!"
else
  logger_info "Run mandatory scripts .."
  RunMandatoryPDB "$JUMP" "$PDBNAME"
  RC=$?
  if [ $RC -ne 0 ]; then
    logger_error "Unable to run mandatory scripts in $PDBNAME"
    exit 4
  fi
fi

# Recompile db objects
logger_info "Recompile db objects .."
DBRecompile 0 "$PDBNAME"
[[ "$?" -eq 0 ]] || exit 1

# Run some database check SQLs
logger_info "Run database check scripts .."
DatabaseChecks 0 "$PDBNAME"
[[ "$?" -eq 0 ]] || exit 1

if [ "$WARN" -ne 0 ]; then
  logger_warn "Pluggable Database $PDBNAME created successfully with warnings"
else
  logger_info "Pluggable Database $PDBNAME successfully created"
fi
exit 0
