#!/bin/bash
# ================================================================================================================
#  File        : ORAconfigdb_opt
#  Author      : Marcel Pils
#  Modified    :
#
#  Description : This is a optional Oracle database configuration script.
#                It implements some optional Oracle databases configurations.
#
#  Version     : 1.3
#  Date        : 22.02.2023

#
#  Attention   : This script must be started as user ORACLE!
#                Executet SQL scripts must not use any "set ..." sqlplus commands!
#
#  Change History:
#
#    1.0  2013-05-02  Pils                            Created
#    1.1  2017-05-09  Pils                            option -stage added
#    1.2  2018-03-07  Smets                           Änderungen / Anpassungen an Auditing Implementierung 
#    1.3  22.02.2023  Thiel                           sqlplus-Aufruf mit Pfad
#
# ----------------------------------------------------------------------------------------------------------------
#set -x
set +x      #needed to hide passwords in shell variables from "set -x" bash execution (e.g. ControlM Logfile)

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
#HOST=`hostname -s`
#LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Implements optional database configurations"
ORACLE_BASE="/app/oracle"
LOGDIR="/app/logs"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME -sid <database name>"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -sid,                     Database Name "
echo "                -showonly,                shows but don't execute configuration scripts"
echo "                -stage,                   oracle database stage (E,K,F,I,P) - script will ask for if not defined"
echo "                -h,                       help screen"
echo ""
echo "  Example     : ORAconfiguredb -sid ORATST"
echo "              : ORAconfiguredb -sid ORATST -stage I"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Initialization of script execution
#-----------------------------------------------------------------------------------------------------------------
function runinit()
{
Bmsg -1l $LOGFILE -m "${STEPHEAD}"
echo -e "${STEPMSG}"
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: User request and dependent SQL script execution
#-----------------------------------------------------------------------------------------------------------------
function askandrun()
{
SQLSCRIPT=$1
SQLPARAMS=$2

# if script started with parameter "SHOWONLY"
if [[ "${SHOWONLY}" == "Y" ]]; then
  Bmsg -bm "Do you want run '${SQLSCRIPT} ${SQLPARAMS}' {Y|N}?"
  return;
fi

# user request for running script
while true; do
  read -p "Do you want run '${SQLSCRIPT} ${SQLPARAMS}' {Y|N}?" yn
  case $yn in
       [Yy]* ) RUNSCRIPT=Y; break;;
       [Nn]* ) RUNSCRIPT=N; break;;
       * ) echo "Please answer Y or N.";;
    esac
done

# user respond "NO"
if [[ "$RUNSCRIPT" == "N" ]]; then
  Bmsg -sl $LOGFILE -m "Do you want run '${SQLSCRIPT} ${SQLPARAMS}' {Y|N}? \t <-- N"
  return; 
fi

# user respond "YES"
Bmsg -sl $LOGFILE -m "Do you want run '${SQLSCRIPT} ${SQLPARAMS}' {Y|N}? \t <-- Y"
runsql "${1}" "${2}"

}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: SQL script execution
#-----------------------------------------------------------------------------------------------------------------
function runsql()
{
SQLSCRIPT=$1
SQLPARAMS=$2

Bmsg -l $LOGFILE -m "\nrunning ${SQLSCRIPT} .."
$ORACLE_HOME/bin/sqlplus / as sysdba <<EOSQL >> $LOGFILE 2>&1
set echo on verify off time on
@${SQLSCRIPT} ${SQLPARAMS}
exit
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Error in sql script (error code ${RC}!"
  Bmsg -rl $LOGFILE -m "Check logfile $LOGFILE"
else
  Bmsg -gl $LOGFILE -m "SQL script finished successfully."
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort   
#-----------------------------------------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Check if ORACLE_HOME is set
#-----------------------------------------------------------------------------------------------------------------
if [ "x" = "x${ORACLE_HOME}" ]; then
  Bmsg -rm "ORACLE_HOME not set. It must be set first!"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
SHOWONLY=N
while true; do
  case "$1" in
    -sid | --oracle_sid ) ORACLE_SID="$2";sid=1; shift 2 ;;
    -showonly ) SHOWONLY="Y";LOGFILE="/dev/null";showonly=1; shift 1 ;;
    -stage ) STAGE=$(echo "$2" | tr [:lower:] [:upper:]); shift 2 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "x" == "x$sid" ]; then
  Bmsg -rm "-sid | --oracle_sid [option] is required"; echo ""; usage
fi

#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
ORACLE_SID_LC=`echo $ORACLE_SID|tr 'A-Z' 'a-z'`
ORACLE_SID_UC=`echo $ORACLE_SID|tr 'a-z' 'A-Z'`
OWNER="oracle"
GROUP="oinstall"
ORANFSDIR="/oranfs/share/ora_admin/SYSTEM"
ACTUALDIR=$PWD

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
Bscriptstart -l $LOGFILE "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

##### Some DB Configurations #######
export ORACLE_SID=${ORACLE_SID_UC}

### sql script execution template
#STEPHEAD="<my sql script heading>"
#STEPMSG="<my optional comments for sql script excution>" 
#runinit; askandrun "<my sql script name>" "<my sql script parameter list>"

#cd $ORANFSDIR/2_privs
#STEPHEAD="Step: Anlegen zusaetzlicher DBA's"
#STEPMSG=""
#runinit; askandrun "3_BVDBA_Ahrends.sql"
#         askandrun "3_BVDBA_Pils.sql"

#cd $ORANFSDIR/3_procs
#STEPHEAD="Step: Anlegen Standard-Procedures"
#STEPMSG="Diese Proc nur anlegen, wenn von "Informationslogist" / DWH angefordert!
#>>> User BVDWHUSR_n muss existieren <<<"
#runinit; askandrun "dwh_email_subst.sql"

cd $ORANFSDIR/3_procs/schema_save
STEPHEAD="Step: Berechtigen SCHEMA_SAVE Package"
STEPMSG="Package fuer PUBLIC freigeben? I.a.R nur fuer Stages E,K,F!"
case $STAGE in 
  [EKF]) runsql "3_schema_save_grant.sql"
         ;;
  [IP] ) ;;
  * )    runinit; askandrun "3_schema_save_grant.sql"
         ;;
esac

#cd $ORANFSDIR/8_Auditing
#STEPHEAD="Step: Aktivierung Auditing"
#STEPMSG="Aktivierung des User-Auditing: P-Stage DB? (RESTART erforderlich!)"
#runinit; askandrun "32_audit_tech_user_logins_proc.act";
#         askandrun "33_audit_user_dml_proc.act"
#         askandrun "34_audit_user_logins_proc.act"
#         askandrun "41_opt_set_audit_trail_extended.cmd"
#STEPMSG="Aktivierung des User-Auditing: I-Stage DB?"
#runinit; askandrun "32_audit_tech_user_logins_proc.act";
#         askandrun "34_audit_user_logins_proc.act";
#STEPMSG="Aktivierung des Standard-Auditing (nur fuer Oracle V12!)"
#runinit; askandrun "41_opt_V12_aud_auditing.sql";

cd $ORANFSDIR/8_AuditingAndOUD
STEPHEAD="Step: Aktivierung Auditing und OUD"
STEPMSG="Handelt es sich um eine DB der Stages I oder P?"
case $STAGE in 
  [EKF]) runsql "44_audit_last_user_logins_proc.act"
         runsql "45_audit_appl_user_logins_proc.act"
         ;;
  [I]  ) runsql "41_audit_user_logins_proc.act"
         runsql "43_audit_tech_user_logins_proc.act"
         runsql "44_audit_last_user_logins_proc.act"
         runsql "45_audit_appl_user_logins_proc.act"
         runsql "50_aud_oud_init_ip.sql"
         ;;
  [P]  ) runsql "41_audit_user_logins_proc.act"
         runsql "42_audit_user_dml_proc.act"
         runsql "43_audit_tech_user_logins_proc.act"
         runsql "44_audit_last_user_logins_proc.act"
         runsql "45_audit_appl_user_logins_proc.act"
         runsql "50_aud_oud_init_ip.sql"
         runsql "50_aud_oud_init_p.sql"
         ;;
  * )    runinit; askandrun "50_aud_oud_init_ip.sql"
         ;;
esac

cd $ACTUALDIR
#-----------------------------------------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------------------------------------
Bscriptend -l $LOGFILE
exit
