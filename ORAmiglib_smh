#!/bin/bash
# @(#) ===========================================================================================================
# @(#) File        : ORAmiglib_smh
# @(#) Author      : Heinz-Dieter Smets
# @(#)
# @(#) Version     : 0.34
# @(#) Date        : 09.04.2024
# @(#)
# @(#) Description : Library with useful Oracle Functions for migration from 12c to 19c
# @(#) Functions:
# @(#)
# @(#) Syntax      : cannot run on it's own
# @(#)
# @(#) Attention   : Integrate in other scripts with: source /app/oracle/bin/ORAmiglib_smh
# @(#)
# @(#) Presumption :
# @(#)
# @@(#) Change History:
# @@(#)
# @@(#) 0.1     29.03.2021 SMH        created
# @@(#) 0.2     30.03.2021 SMH        function get_cmdb_data created
# @@(#) 0.3     31.03.2021 SMH        function TnsSwitch created
# @@(#) 0.4     31.03.2021 SMH        Check of necessity to run, DEBUG Mode,
# @@(#)                               functions UnregEus, RegEus added
# @@(#) 0.5     01.04.2021 SMH        functions OraMigrate, CtmHG added
# @@(#) 0.6     01.04.2021 SMH        Prod-Aktionen fei geschaltet fuer DEBUG=0
# @@(#) 0.7     01.04.2021 SMH        DEBUG Error
# @@(#) 0.8     02.04.2021 SMH        Fallback Statements fuer UnregEus
# @@(#)                               functions ORAactivate, AutoUpgrade added
# @@(#) 0.9     03.04.2021 THI        Autoupgrade not relevant on source system
# @@(#) 0.10    05.04.2021 SMH        some minor changes
# @@(#) 0.11    06.04.2021 SMH        Script-Calls Filenames changed (CMDB_DB_NAME@HOSTNAME)
# @@(#) 0.12    06.04.2021 SMH        execute CTMhostgroup via File execution,
# @@(#)                               set variables DBNAME,DBUNAME before EUSreg.
# @@(#) 0.13    06.04.2021 SMH        CtmHG Function changed to handle ALL Hostgroups
# @@(#) 0.14    07.04.2021 SMH        added -f (force) Option to ORAtnsservice call
# @@(#) 0.15    07.04.2021 SMH        SELECT MAX(PORT) FROM ...
# @@(#) 0.16    09.04.2021 SMH        function TnsSwitch: error corrected.
# @@(#) 0.17    14.04.2021 THI        only use actual cmdb data; sysdate-1
# @@(#) 0.18    19.04.2021 SMH        Function TnsSwitch: added Condition DB_UNIQUE_NAME
# @@(#) 0.19    19.04.2021 SMH        Changed queries on CMDB: >= sysdate-1
# @@(#) 0.20    19.04.2021 SMH        Minor Changes / Checks
# @@(#) 0.21    20.04.2021 SMH        Function AutoUpgrade: Drop Restore Point added
# @@(#) 0.22    20.04.2021 SMH        Minor Changes: Drop Restore Point, Register DB
# @@(#) 0.23    20.04.2021 THI        changed function AutoUpgrade to call ORAcmdbJob.sh
# @@(#) 0.24    20.04.2021 THI        adjust oracle environment after autoupgrade
# @@(#) 0.25    21.04.2021 SMH        function FinalMaintenance added (DropRestorePoint,ORAcmdbJob,Unlock Users)
# @@(#) 0.26    21.04.2021 SMH        function FinalMaintenance: execution control canged.
# @@(#) 0.27    22.04.2021 SMH        function AutoUpgrade: removed double functionality
# @@(#) 0.28    23.04.2021 SMH        Get CMDB Data Condition changed
# @@(#) 0.29    23.04.2021 SMH        User Unlock Condition changed
# @@(#) 0.30    14.05.2021 THI        changed function FinalMaintenance to generate emcli commands for non 6.10 VMs
# @@(#) 0.31    17.05.2021 THI        we have to call GenEMInfo
# @@(#) 0.32    18.05.2021 THI        set optimizer_feature before calling user unlock script
# @@(#) 0.33    20.05.2021 THI        set ORACLE enviroenment before calling GenEMInfo
# @@(#) 0.34    09.04.2024 MPils      Added "" for Oracle Password
#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Get values from CMDB
#-----------------------------------------------------------------------------------------------------------------
#DEBUG=1   # set by Wrapper Script

MIG19C_BASE="/misc/orashare1/workshr/ora_admin/mig19c"

function get_cmdb_data()
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Get values from CMDB"
  logger_info "${MESSAGE}"
  export ORACLE_HOME=$DESIGNATED_12C_HOME
  TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}.tmp."`date +%s`

  ${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL #>/dev/null
  connect BV\$CMDB/"${PWDBVCMDB}"@DBA-P
  set serverout on size unlimited feedback off
  whenever sqlerror exit sql.sqlcode
  spool $TMPSQLOUT
  declare
    l_db_service_level		varchar2(30)   :='';
    l_db_name             varchar2(9)	   :='';
    l_db_version          varchar2(17)   :='';
    l_db_unique_name      varchar2(30)   :='';
    l_db_created          date           :='';
    l_hostname            varchar2(64)   :='';
    l_shorthost           varchar2(64)   :='';
    l_os_version          varchar2(10)   :='';
    l_cpu_count           varchar2(4000) :='';
    l_memory_size         pls_integer    :=0 ;
    l_vg_name            	varchar2(200)  :='';
    l_vg_total_mb       	pls_integer    :=0 ;
    l_vg_used_mb        	pls_integer    :=0 ;
    l_vg_free_pct       	pls_integer    :=0 ;
    l_fs_data_total_mb    pls_integer    :=0 ;
    l_fs_data_used_mb     pls_integer    :=0 ;
    l_fs_data_free_pct    pls_integer    :=0 ;
    l_fs_fra_total_mb     pls_integer    :=0 ;
    l_fs_fra_used_mb      pls_integer    :=0 ;
    l_fs_fra_free_pct	    pls_integer    :=0 ;
    l_stage               varchar2(10)   :='';
    l_patchgroup          varchar2(100)  :='';
    l_milestone           varchar2(3)    :='';
    l_upgrade_group	      varchar2(3)    :='';
    l_migration_group     varchar2(3)    :='';
    l_new_hostname       	varchar2(64)   :='';
    l_software_installed  varchar2(3)    :='';
    l_obsolete	        	varchar2(5)    :='';
    l_bemerkung	        	varchar2(250)  :='';

  BEGIN
    SELECT
       DB_SERVICE_LEVEL
      ,DB_NAME
      ,DB_VERSION
      ,DB_UNIQUE_NAME
      ,DB_CREATED
      ,HOSTNAME
      ,REGEXP_SUBSTR(HOSTNAME,'[^.]+', 1) as SHORTHOST
      ,OS_VERSION
      ,CPU_COUNT
      ,MEMORY_SIZE
      ,VG_NAME
      ,VG_TOTAL_MB
      ,VG_USED_MB
      ,VG_FREE_PCT
      ,FS_DATA_TOTAL_MB
      ,FS_DATA_USED_MB
      ,FS_DATA_FREE_PCT
      ,FS_FRA_TOTAL_MB
      ,FS_FRA_USED_MB
      ,FS_FRA_FREE_PCT
      ,STAGE
      ,PATCHGROUP
      ,MILESTONE
      ,UPGRADE_GROUP
      ,MIGRATION_GROUP
      ,NEW_HOSTNAME
      ,SOFTWARE_INSTALLED
      ,OBSOLETE
      ,BEMERKUNG
    INTO
       l_db_service_level
      ,l_db_name
      ,l_db_version
      ,l_db_unique_name
      ,l_db_created
      ,l_hostname
      ,l_shorthost
      ,l_os_version
      ,l_cpu_count
      ,l_memory_size
      ,l_vg_name
      ,l_vg_total_mb
      ,l_vg_used_mb
      ,l_vg_free_pct
      ,l_fs_data_total_mb
      ,l_fs_data_used_mb
      ,l_fs_data_free_pct
      ,l_fs_fra_total_mb
      ,l_fs_fra_used_mb
      ,l_fs_fra_free_pct
      ,l_stage
      ,l_patchgroup
      ,l_milestone
      ,l_upgrade_group
      ,l_migration_group
      ,l_new_hostname
      ,l_software_installed
      ,l_obsolete
      ,l_bemerkung
    FROM ORA_HOSTS_UPGRADE_PLAN
   WHERE
--   UPPER(SOFTWARE_INSTALLED) = 'X' AND
--     NEW_HOSTNAME IS NOT NULL AND NEW_HOSTNAME <> 'nein'
--     AND
     ( NEW_HOSTNAME = REGEXP_SUBSTR ('${HOSTNAME}', '[^.]+', 1)
      OR   REGEXP_SUBSTR (HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${SHORTHOST}', '[^.]+', 1)
         );

    dbms_output.put_line('CMDB_DB_SERVICE_LEVEL="'||l_db_service_level||'"');
    dbms_output.put_line('CMDB_DB_NAME="'||l_db_name||'"');
    dbms_output.put_line('CMDB_DB_VERSION="'||l_db_version||'"');
    dbms_output.put_line('CMDB_DB_UNIQUE_NAME="'||l_db_unique_name||'"');
    dbms_output.put_line('CMDB_DB_CREATED="'||l_db_created||'"');
    dbms_output.put_line('CMDB_HOSTNAME="'||l_hostname||'"');
    dbms_output.put_line('CMDB_SHORTHOST="'||l_shorthost||'"');
    dbms_output.put_line('CMDB_OS_VERSION="'||l_os_version||'"');
    dbms_output.put_line('CMDB_CPU_COUNT="'||l_cpu_count||'"');
    dbms_output.put_line('CMDB_MEMORY_SIZE="'||l_memory_size||'"');
    dbms_output.put_line('CMDB_VG_NAME="'||l_vg_name||'"');
    dbms_output.put_line('CMDB_VG_TOTAL_MB="'||l_vg_total_mb||'"');
    dbms_output.put_line('CMDB_VG_USED_MB="'||l_vg_used_mb||'"');
    dbms_output.put_line('CMDB_VG_FREE_PCT="'||l_vg_free_pct||'"');
    dbms_output.put_line('CMDB_FS_DATA_TOTAL_MB="'||l_fs_data_total_mb||'"');
    dbms_output.put_line('CMDB_FS_DATA_USED_MB="'||l_fs_data_used_mb||'"');
    dbms_output.put_line('CMDB_FS_DATA_FREE_PCT="'||l_fs_data_free_pct||'"');
    dbms_output.put_line('CMDB_FS_FRA_TOTAL_MB="'||l_fs_fra_total_mb||'"');
    dbms_output.put_line('CMDB_FS_FRA_USED_MB="'||l_fs_fra_used_mb||'"');
    dbms_output.put_line('CMDB_FS_FRA_FREE_PCT="'||l_fs_fra_free_pct||'"');
    dbms_output.put_line('CMDB_STAGE="'||l_stage||'"');
    dbms_output.put_line('CMDB_PATCHGROUP="'||l_patchgroup||'"');
    dbms_output.put_line('CMDB_MILESTONE="'||l_milestone||'"');
    dbms_output.put_line('CMDB_UPGRADE_GROUP="'||l_upgrade_group	||'"');
    dbms_output.put_line('CMDB_MIGRATION_GROUP="'||l_migration_group||'"');
    dbms_output.put_line('CMDB_NEW_HOSTNAME="'||l_new_hostname||'"');
    dbms_output.put_line('CMDB_SOFTWARE_INSTALLED="'||l_software_installed||'"');
    dbms_output.put_line('CMDB_OBSOLETE="'||l_obsolete||'"');
    dbms_output.put_line('CMDB_BEMERKUNG="'||l_bemerkung||'"');
  end;
/
EOSQL
  RC=$?
  if [ "$RC" -ne 0 ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during SELECT data from CMDB"
    logger_info "${MESSAGE}"
    cat $TMPSQLOUT
    rm $TMPSQLOUT 2>/dev/null
    exit 1
  fi

  source $TMPSQLOUT
  rm $TMPSQLOUT 2>/dev/null

# Get PORT from CMDB:
  ${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL #>/dev/null
  connect BV\$CMDB/"${PWDBVCMDB}"@DBA-P
  set serverout on size unlimited feedback off
  whenever sqlerror exit sql.sqlcode
  spool $TMPSQLOUT
  declare
    l_port                pls_integer    :=0;
  BEGIN
    SELECT
      MAX(LE.PORT)
    INTO
      l_port
    FROM ORA_LISTENER_ENDPOINT LE
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE LE.HOST = UP.HOSTNAME
     AND UP.HOSTNAME = '${CMDB_HOSTNAME}'
     AND LE.TS >= SYSDATE - 1
    ;

    dbms_output.put_line('CMDB_PORT="'||l_port||'"');
  end;
/
EOSQL
  RC=$?
  if [ "$RC" -ne 0 ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during SELECT of Port"
    logger_info "${MESSAGE}"
    cat $TMPSQLOUT
    rm $TMPSQLOUT 2>/dev/null
    exit 1
  fi
  source $TMPSQLOUT
  rm $TMPSQLOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Migrate DB Instance from old to current Host
#-----------------------------------------------------------------------------------------------------------------
function OraMigrate
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Migrate DB Instance from ${CMDB_SHORTHOST} to ${SHORTHOST}"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No Migration necessary - Actions will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  MIGCMD="${MIG19C_BASE}/ORAmigrate/${CMDB_DB_NAME}@${SHORTHOST}"

  if [ ${DEBUG} -eq 1 ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAmigrate --database ${CMDB_DB_UNIQUE_NAME} --oldhost ${CMDB_SHORTHOST} --oldport ${CMDB_PORT} --datasizemb ${CMDB_FS_DATA_TOTAL_MB} --frasizemb ${CMDB_FS_FRA_TOTAL_MB} -p 1601"
  fi
  echo "RC=0" > ${MIGCMD}
  echo "/app/oracle/bin/ORAmigrate --database ${CMDB_DB_UNIQUE_NAME} --oldhost ${CMDB_SHORTHOST} --oldport ${CMDB_PORT} --datasizemb ${CMDB_FS_DATA_TOTAL_MB} --frasizemb ${CMDB_FS_FRA_TOTAL_MB} -p 1601 ||let RC=\$RC+\$?" >> ${MIGCMD}
  echo "exit \${RC}" >> ${MIGCMD}
  if [ ${DEBUG} -ne 1  ]; then
    sh ${MIGCMD}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during ORAmigrate of ${CMDB_DB_UNIQUE_NAME}@${SHORTHOST}"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Activate DB Instance after ORAmigrate
#-----------------------------------------------------------------------------------------------------------------
function ORAactivate
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Activate DB Instance ${CMDB_DB_UNIQUE_NAME} after ORAmigrate"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No Activation necessary - Action will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  ACTCMD="${MIG19C_BASE}/ORAactivate/${CMDB_DB_NAME}@${SHORTHOST}"

  if [ ${DEBUG} -eq 1 ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAactivate -d ${CMDB_DB_UNIQUE_NAME} --oldhost ${CMDB_SHORTHOST} --oldport ${CMDB_PORT} --port 1601 --activate"
  fi
  echo "RC=0" > ${ACTCMD}
  echo "/app/oracle/bin/ORAactivate -d ${CMDB_DB_UNIQUE_NAME} --oldhost ${CMDB_SHORTHOST} --oldport ${CMDB_PORT} --port 1601 --activate ||let RC=\$RC+\$?" >> ${ACTCMD}
  echo "exit \${RC}" >> ${ACTCMD}
  if [ ${DEBUG} -ne 1  ]; then
    sh ${ACTCMD}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Activation of ${CMDB_DB_UNIQUE_NAME}@${SHORTHOST}"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Get TNS Services from old Host and generate and build them to new Host:
#-----------------------------------------------------------------------------------------------------------------
function TnsSwitch
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Generate TNS Services"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No TNS Actions necessary - Actions will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  export ORACLE_HOME=$DESIGNATED_12C_HOME
  TNS_SWITCH="${MIG19C_BASE}/tns_services/02_switch/${CMDB_DB_NAME}at${SHORTHOST}"
  TNS_SAVE="${MIG19C_BASE}/tns_services/01_save/${CMDB_DB_NAME}at${SHORTHOST}"
  TNS_FALLBACK="${MIG19C_BASE}/tns_services/03_fallback/${CMDB_DB_NAME}at${SHORTHOST}"

  ${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL >/dev/null
  connect BV\$CMDB/"${PWDBVCMDB}"@DBA-P
  set heading off trimspool on pagesize 0 linesize 255 feedback off
  whenever sqlerror exit sql.sqlcode

  spool $TNS_SAVE;

  SELECT 'RC=0' from dual
  union all
  SELECT '/app/oracle/bin/ORAtnsService -f -opt rename -tnssrv '||lower(T.CN)||' -newsrv '||lower(T.CN)||'-migsv ||let RC=\$RC+\$?'
    FROM ORA_TNS_SERVICE T
       , ORA_TNS_SERVICE_HOST TH
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE T.ID = TH.ORA_TNS_SERVICE_ID
     AND TH.HOST = UP.HOSTNAME
     AND T.TS >= SYSDATE-1
     AND TH.TS >= SYSDATE-1
     AND REGEXP_SUBSTR(UP.HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${CMDB_HOSTNAME}', '[^.]+', 1)
     AND UPPER(T.CN) <> UPPER('${CMDB_DB_UNIQUE_NAME}')
     AND UPPER(SOFTWARE_INSTALLED) = 'X'
     AND UP.NEW_HOSTNAME IS NOT NULL AND UP.NEW_HOSTNAME <> 'nein'
   union all
   SELECT 'exit \${RC}' from dual
   ;

  spool $TNS_SWITCH;

  SELECT 'RC=0' from dual
  union all
  SELECT '/app/oracle/bin/ORAtnsService -f -opt add -host '||UP.NEW_HOSTNAME||'.barmenia.lan -port 1601 -tnssrv '||lower(T.CN)||' -dbsrv '||lower(T.DBSERVICE)||' ||let RC=\$RC+\$?'
    FROM ORA_TNS_SERVICE T
       , ORA_TNS_SERVICE_HOST TH
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE T.ID = TH.ORA_TNS_SERVICE_ID
     AND TH.HOST = UP.HOSTNAME
     AND T.TS >= SYSDATE-1
     AND TH.TS >= SYSDATE-1
     AND REGEXP_SUBSTR(UP.HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${CMDB_HOSTNAME}', '[^.]+', 1)
     AND UPPER(T.CN) <> UPPER('${CMDB_DB_UNIQUE_NAME}')
     AND UPPER(SOFTWARE_INSTALLED) = 'X'
     AND UP.NEW_HOSTNAME IS NOT NULL AND UP.NEW_HOSTNAME <> 'nein'
   union all
   SELECT 'exit \${RC}' from dual
   ;

  spool $TNS_FALLBACK;

  SELECT 'RC=0' from dual
  union all
  SELECT '/app/oracle/bin/ORAtnsService -f -opt remove -tnssrv '||lower(T.CN)||' ||let RC=\$RC+\$?'
    FROM ORA_TNS_SERVICE T
       , ORA_TNS_SERVICE_HOST TH
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE T.ID = TH.ORA_TNS_SERVICE_ID
     AND TH.HOST = UP.HOSTNAME
     AND T.TS >= SYSDATE-1
     AND TH.TS >= SYSDATE-1
     AND REGEXP_SUBSTR(UP.HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${CMDB_HOSTNAME}', '[^.]+', 1)
     AND UPPER(T.CN) <> UPPER('${CMDB_DB_UNIQUE_NAME}')
     AND UPPER(SOFTWARE_INSTALLED) = 'X'
     AND UP.NEW_HOSTNAME IS NOT NULL AND UP.NEW_HOSTNAME <> 'nein'
  union all
  SELECT '/app/oracle/bin/ORAtnsService -f -opt copy -tnssrv '||lower(T.CN)||'-migsv -newsrv '||lower(T.CN)||' ||let RC=\$RC+\$?'
    FROM ORA_TNS_SERVICE T
       , ORA_TNS_SERVICE_HOST TH
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE T.ID = TH.ORA_TNS_SERVICE_ID
     AND TH.HOST = UP.HOSTNAME
     AND T.TS >= SYSDATE-1
     AND TH.TS >= SYSDATE-1
     AND REGEXP_SUBSTR(UP.HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${CMDB_HOSTNAME}', '[^.]+', 1)
     AND UPPER(T.CN) <> UPPER('${CMDB_DB_UNIQUE_NAME}')
     AND UPPER(SOFTWARE_INSTALLED) = 'X'
     AND UP.NEW_HOSTNAME IS NOT NULL AND UP.NEW_HOSTNAME <> 'nein'
   union all
   SELECT 'exit \${RC}' from dual
   ;
EOSQL
  RC=$?
  if [ "$RC" -ne 0 ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Generate of TNS-Services"
    logger_info "${MESSAGE}"
    cat ${TNS_SAVE}.lst
    cat ${TNS_SWITCH}.lst
    cat ${TNS_FALLBACK}.lst
    rm $TMPSQLOUT 2>/dev/null
    exit 1
  fi

  if [ ${DEBUG} -eq 1  ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "PRINT SAVE:"
    cat ${TNS_SAVE}.lst
    echo "PRINT SWITCH:"
    cat ${TNS_SWITCH}.lst
    echo "PRINT FALLBACK:"
    cat ${TNS_FALLBACK}.lst
  fi
  if [ ${DEBUG} -ne 1  ]; then
     sh ${TNS_SAVE}.lst
     sh ${TNS_SWITCH}.lst
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Unregister(Rename) old Instance from EUS
#-----------------------------------------------------------------------------------------------------------------
function UnregEus
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Unregister ${CMDB_DB_UNIQUE_NAME} from EUS"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No Unregister Action necessary - Actions will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  EUSREG_SAVE="${MIG19C_BASE}/eusreg/01_save/${CMDB_DB_NAME}@${SHORTHOST}"
  EUSREG_FALLBACK="${MIG19C_BASE}/eusreg/03_fallback/${CMDB_DB_NAME}@${SHORTHOST}"

  if [ ${DEBUG} -eq 1  ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAtnsService -f -type eus -tnssrv ${CMDB_DB_UNIQUE_NAME} -opt rename -newsrv ${CMDB_DB_UNIQUE_NAME}-MIGSV"
  fi
  echo "RC=0" > ${EUSREG_SAVE}
  echo "/app/oracle/bin/ORAtnsService -f -opt rename -type eus -tnssrv ${CMDB_DB_UNIQUE_NAME} -newsrv ${CMDB_DB_UNIQUE_NAME}-migsv ||let RC=\$RC+\$?" >> ${EUSREG_SAVE}
  echo "exit \${RC}" >> ${EUSREG_SAVE}

  echo "/app/oracle/bin/ORAtnsService -f -opt remove -type eus -tnssrv ${CMDB_DB_UNIQUE_NAME}" > ${EUSREG_FALLBACK}
  echo "/app/oracle/bin/ORAtnsService -f -opt rename -type eus -tnssrv ${CMDB_DB_UNIQUE_NAME}-migsv -newsrv ${CMDB_DB_UNIQUE_NAME}" >> ${EUSREG_FALLBACK}

  if [ ${DEBUG} -ne 1  ]; then
    sh ${EUSREG_SAVE}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Ungesister(Rename) of ${CMDB_DB_UNIQUE_NAME} from EUS"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Register new Instance in EUS
#-----------------------------------------------------------------------------------------------------------------
function RegEus
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Register ${CMDB_DB_UNIQUE_NAME} in EUS"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No Register Action necessary - Actions will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  EUSREG_SWITCH="${MIG19C_BASE}/eusreg/02_switch/${CMDB_DB_NAME}@${SHORTHOST}"

  if [ ${DEBUG} -eq 1  ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAeusreg -sid ${CMDB_DB_UNIQUE_NAME} -opt add"
  fi
  echo "RC=0" > ${EUSREG_SWITCH}
  echo "export DBNAME=${CMDB_DB_NAME}" >> ${EUSREG_SWITCH}
  echo "export DBUNAME=${CMDB_DB_UNIQUE_NAME}"  >> ${EUSREG_SWITCH}
  echo "/app/oracle/bin/ORAeusreg -sid ${CMDB_DB_NAME} -opt add ||let RC=\$RC+\$?" >> ${EUSREG_SWITCH}
  echo "exit \${RC}" >> ${EUSREG_SWITCH}
  if [ ${DEBUG} -ne 1  ]; then
    sh ${EUSREG_SWITCH}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Register of ${CMDB_DB_UNIQUE_NAME} in EUS"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Add new Host to CTM Hostgroups ORA_INST, ORA_SYS
#               and remove srchost from this groups
#-----------------------------------------------------------------------------------------------------------------
function CtmHG
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Add ${SHORTHOST} to CTM Hostgroups ORA_INST, ORA_SYS"
  logger_info "${MESSAGE}"

#      This Function is only relevant for Migration Process ( ${SHORTHOST} = 1. Part of Hostname )
  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No CTM Hostgroups Actions are necessary - Actions will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  CMDB_STAGE_LC=`echo ${CMDB_STAGE}|tr [A-Z] [a-z]`

  CTMHG_SWITCH="${MIG19C_BASE}/CTMhg/01_switch/${CMDB_DB_NAME}@${SHORTHOST}"
  CTMHG_FALLBACK="${MIG19C_BASE}/CTMhg/02_fallback/${CMDB_DB_NAME}@${SHORTHOST}"

  echo "RC=0" > ${CTMHG_SWITCH}
  echo "RC=0" > ${CTMHG_FALLBACK}
  for HG in `CTMhostgroup -opt listhg -stage ${CMDB_STAGE_LC} -hlist ${CMDB_SHORTHOST} |grep -v hosts:`
  do
    echo "/app/oracle/bin/CTMhostgroup -opt addhost -stage ${CMDB_STAGE_LC} -hgroup ${HG} -hlist ${SHORTHOST} ||let RC=\$RC+\$?" >> ${CTMHG_SWITCH}
    echo "/app/oracle/bin/CTMhostgroup -opt delhstfhg -stage ${CMDB_STAGE_LC} -hgroup ${HG} -hlist ${CMDB_SHORTHOST} ||let RC=\$RC+\$?" >> ${CTMHG_SWITCH}
    echo "/app/oracle/bin/CTMhostgroup -opt addhost -stage ${CMDB_STAGE_LC} -hgroup ${HG} -hlist ${CMDB_SHORTHOST} ||let RC=\$RC+\$?" >> ${CTMHG_FALLBACK}
    echo "/app/oracle/bin/CTMhostgroup -opt delhstfhg -stage ${CMDB_STAGE_LC} -hgroup ${HG} -hlist ${SHORTHOST} ||let RC=\$RC+\$?" >> ${CTMHG_FALLBACK}
  done
  echo "exit \${RC}" >> ${CTMHG_SWITCH}
  echo "exit \${RC}" >> ${CTMHG_FALLBACK}

  if [ ${DEBUG} -eq 1  ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    cat ${CTMHG_SWITCH}
  fi

  if [ ${DEBUG} -ne 1  ]; then
    sh ${CTMHG_SWITCH}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during CTMhostgroup of ${CMDB_DB_UNIQUE_NAME}"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: AutoUpgrade Oracle Version
#               After successful execution: Drop AutoUpgrade Restore Point
#               and finally call ORAcmdbJob
#-----------------------------------------------------------------------------------------------------------------
function AutoUpgrade
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - AutoUpgrade DB Instance ${CMDB_DB_UNIQUE_NAME} "
  logger_info "${MESSAGE}"

#      This Function is only relevant, if Oracle Version is not 19c:
  if [ ${OS_VERSION} != '6.10' -a ${ACT_OH} != ${DESIGNATED_19C_HOME} ]; then
    echo >/dev/null
  else
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No AutoUpgrade necessary - Action will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  UPGCMD="${MIG19C_BASE}/AutoUpgrade/${CMDB_DB_NAME}@${SHORTHOST}"

  if [ ${DEBUG} -eq 1 ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAautoupgrade -d ${CMDB_DB_NAME} --run"
    echo "/app/oracle/bin/ORAflashback -sid ${CMDB_DB_NAME} -d ALL"
  fi
  echo "RC=0" > ${UPGCMD}
  echo "/app/oracle/bin/ORAautoupgrade -d ${CMDB_DB_NAME} --run ||let RC=\$RC+\$?" >> ${UPGCMD}
  echo "exit \${RC}" >> ${UPGCMD}

  if [ ${DEBUG} -ne 1  ]; then
    sh ${UPGCMD}
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during AutoUpgrade of ${CMDB_DB_NAME}@${SHORTHOST}"
      logger_info "${MESSAGE}"
      exit 1
    fi
  fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: FinalMaintenance
#               After successful execution of AutoUpgrade:
#                     Drop AutoUpgrade Restore Point
#                     call ORAcmdbJob
#                     Unlock Users locked in formerly Step
#                     generate emcli commands to modify kept instances or add new (moved) instances
#     This Funktion is allways re-runable.
#-----------------------------------------------------------------------------------------------------------------
function FinalMaintenance
{
  FUNCNAME=${FUNCNAME[0]}
  MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Instance ${CMDB_DB_UNIQUE_NAME} "
  logger_info "${MESSAGE}"

# Drop AutoUpgrade Restorepoint:

#      This Function is only relevant, if Oracle Version is 19c:
  if [ ${OS_VERSION} != '6.10' -a ${ACT_OH} == ${DESIGNATED_19C_HOME} ]; then
     if [ ${DEBUG} -eq 1 ]; then
       echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
       echo "/app/oracle/bin/ORAflashback -sid ${CMDB_DB_NAME} -d ALL"
     fi

     DRPRSTP="/tmp/drprstp_${CMDB_DB_NAME}_${SHORTHOST}"
     echo "/app/oracle/bin/ORAflashback -sid ${CMDB_DB_NAME} -d ALL ||let RC=\$RC+\$?" > ${DRPRSTP}

     if [ ${DEBUG} -ne 1  ]; then
       . ~/bin/dbset ${CMDB_DB_NAME}
       sh ${DRPRSTP}
       RC=$?
       if [ "$RC" -ne 0 ]; then
         MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Drop of AutoUpgrade Restore Point at ${CMDB_DB_NAME}@${SHORTHOST}"
         logger_error "${MESSAGE}"
         rm ${DRPRSTP}
         exit 1
       fi
       rm ${DRPRSTP}
     fi
  else
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No AutoUpgrade done, no Restore Point was set - Action will be skipped!"
    logger_info "${MESSAGE}"
  fi



# Run ORAcmdbJob:

  if [ ${DEBUG} -eq 1 ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "/app/oracle/bin/ORAcmdbJob.sh will be called"
  else
    /app/oracle/bin/ORAcmdbJob.sh
    if [ $? -ne 0 ]; then
      MESSAGE='ORAcmdbJob.sh failed!'
      logger_error "${MESSAGE}"
      exit 1
    fi
  fi

# Unlock Users, which where locked in SourceDb before DB Migration:

#  if [ "${CMDB_NEW_HOSTNAME}" != "${SHORTHOST}" ]; then
  if [ ${OS_VERSION} = '6.10' ]; then
    MESSAGE="${SCRIPTNAME}-${FUNCNAME}: No User Unlock when no Migration executed - Action will be skipped!"
    logger_info "${MESSAGE}"
    exit 0
  fi

  if [ ${DEBUG} -eq 1 ]; then
    echo "DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE"
    echo "sqlplus / as sysdba @${MIG19C_BASE}/UsrLock/unlock_usr_${CMDB_DB_NAME}.sql"
  fi

  if [ ${DEBUG} -ne 1  ]; then
    . ~/bin/dbset ${CMDB_DB_NAME}
    ${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL >/dev/null
    connect / as sysdba
--    set heading off trimspool on pagesize 0 linesize 255 feedback off
--    whenever sqlerror exit sql.sqlcode
-- and set optimizer_feature to 12.1.0.2
    alter system set optimizer_features_enable = '12.1.0.2';
    @${MIG19C_BASE}/UsrLock/unlock_usr_${CMDB_DB_NAME}.sql
EOSQL
    RC=$?
    if [ "$RC" -ne 0 ]; then
      MESSAGE="${SCRIPTNAME}-${FUNCNAME} - Error during Unlock of Users at ${CMDB_DB_NAME}@${SHORTHOST}"
      logger_error "${MESSAGE}"
      exit 1
    fi
  fi

# generate EMCLI commands to file

#      At this time of process progress this function is only relevant on not 6.10 VMs
  if [ ${OS_VERSION} != '6.10' ]
  then
     if [ "$SHORTHOST" == "$CMDB_NEW_HOSTNAME" ] # ->emcli add
     then
        . ~/bin/dbset ${CMDB_DB_NAME}
        GenEMInfo add
     else                                        # ->emcli mod
        . ~/bin/dbset ${CMDB_DB_NAME}
        GenEMInfo mod
     fi
  fi
}
