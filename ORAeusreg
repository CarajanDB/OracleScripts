#!/bin/bash
# @(#) =========================================================================
# @(#) File        : ORAeusreg
# @(#) Author      : Marcel Pils
# @(#) Version     : 2.3
# @(#) Datum       : 27.06.2024
# @(#)
# @(#) Description : This script [un]register a database in oud for enterprise user security
# @(#)               This script must be started as user ORACLE
# @(#)
# @@(#) History:
# @@(#)
# @@(#) 1.0   2015-02-17  Pils     Created
# @@(#) 1.2   2018-01-25  Pils     changed pwddir location
# @@(#) 1.3   20.09.2018  Thiel    changed dbca call and responsefile depending on installed oracle version
# @@(#)                            minor change in dbca call for oracle version ge 18
# @@(#) 1.4   21.09.2018  Thiel    minor change in responsefile creation for oracle versions ge 18
# @@(#) 1.4   24.09.2018  Thiel    minor change in responsefile creation
# @@(#) 1.5   09.10.2018  Thiel    option filter was changed to type in ORAtnsService
# @@(#)       27.11.2018  Thiel    minor change in error message
# @@(#) 1.6   18.04.2023  Ahrends  Workaround for Bug 35120120 : DBCA REGISTRATION IN 19.18 DOES NOT CREATE PASSWORD VERIFIER IN LDAP
# @@(#) 1.7   19.07.2023  Thiel    echo content of responsefile to logfile
# @@(#) 1.7.1 19.07.2023  Thiel    really echo content of responsefile to logfile
# @@(#) 1.7.2 19.07.2023  Thiel    error correction
# @@(#) 1.8   01.02.2024  Pils     added -pdb parameter and exclude BUG fix for option 'add' only
# @@(#) 1.9   06.02.2024  Pils     added ORAlib and moved logging to Logger
# @@(#) 2.0   25.04.2024  Pils     removed set -e and added RC checks for OUD lookups
# @@(#)                            and fixed responsefile logger_debug output
# @@(#) 2.1   13.05.2024  Pils     fixed registered db lookup, OUDSEARCHBIN and PWDDIR value
# @@(#) 2.2   16.05.2024  Pils     added DBUNAME match ORACLE_SID check
# @@(#) 2.3   27.06.2024  Pils     added RC to usage function
# @(#) =========================================================================
set -o pipefail

[ -n "$SCRIPTDIR" ] || SCRIPTDIR=/app/oracle/bin
source $SCRIPTDIR/ORAlib

HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="[Un]register a db in oud for eus"
DATETIME=`date +%Y%m%d%H%M%S`

#-------------------------------------------------------------------------------
#  Some functions
#-------------------------------------------------------------------------------
function usage() {
  local RC="${1:-0}"
  echo ""
  echo "  Command     : $SCRIPTNAME"
  echo "  Description : $SCRIPTSHORTDESC"
  echo ""
  echo "  Parameters  : -opt [add|remove] Register Option (mandatory)"
  echo "                -sid              Non-CDB/CDB Name (default: $ORACLE_SID)"
  echo "                -pdb              PDB Name (optional)"
  #echo "                -dgside           DataGuard Side (s1|s2),        Default: unset"
  echo "                -h                help screen (optional)"
  echo ""
  echo "  Example     : $SCRIPTNAME -sid TESTDB -opt add"
  echo ""
  echo "  Attention   : This script must be started as user ORACLE"
  echo ""
  exit $RC
}

#-------------------------------------------------------------------------------
#  Get parameter
#-------------------------------------------------------------------------------
while true; do
  case "$1" in
    -opt ) OPTION=`echo $2|tr 'A-Z' 'a-z'`;opt=1; shift 2 ;;
    -sid ) ORACLE_SID="$2";sid=1; shift 2 ;;
    -pdb ) PDBNAME="$2";pdb=1; shift 2 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-------------------------------------------------------------------------------
#  Initialization and checks
#-------------------------------------------------------------------------------
Logger

# check required environment variables
if [ -z "$DBNAME" -o -z "$DBUNAME" -o -z "$ORACLE_SID" -o -z "$ORACLE_HOME" -o -z "$ORACLE_BASE" ]; then
  logger_error "Environment variables ORACLE_SID, ORACLE_BASE, ORACLE_HOME, DBNAME, DBUNAME must be set!"
  ENVVARS="$(env|grep -e "^DBNAME" -e "^DBUNAME" -e "^ORACLE_SID" -e "^ORACLE_HOME" -e "^ORACLE_BASE"|sort)"
  echo "Used variables: "$ENVVARS | logger_error
  usage 1
fi
if [ -z "$ORACLE_SID" ]; then
  logger_error "-sid [option] is required"; echo ""; usage
fi
if [ "$ORACLE_SID" != "$DBNAME" ]; then
  logger_error "-sid '$ORACLE_SID' does not match variable DBNAME '$DBNAME'"
  usage 1
fi
if ! [[ "$DBUNAME" =~ $ORACLE_SID ]]; then
  logger_error "-sid '$ORACLE_SID' does not match variable DBUNAME '$DBUNAME'"
  usage 1
fi
if [ "x" == "x$opt" ]; then
  logger_error "-opt [option] is required"
  usage 1
fi
if [ "$OPTION" != "add" -a "$OPTION" != "remove" ]; then
  logger_error "Wrong value used for parameter -opt!"
  usage 1
fi
if [ "$pdb" == "1" -a -z "$PDBNAME" ]; then
  logger_error "pdbname required for option -pdb [pdbname]!"
  usage 1
fi

# Check if user is oracle
if [ `id -un` != "oracle" ]; then
  logger_error "Script may not run as user `id -un`, it must be started and run as oracle"
  exit 101
fi
# Check if ORACLE_HOME is set
if [ "x" = "x${ORACLE_HOME}" ]; then
  logger_error  "ORACLE_HOME not set. It must be set first!"
  exit 102
fi

#-------------------------------------------------------------------------------
#  Set environment
#-------------------------------------------------------------------------------

OUDSEARCHBIN="$SCRIPTDIR/ORAtnsService"
OUDADMIN="cn=Directory Manager"
PWDDIR=${PWDDIR:-/app/oracle/admin/etc/pwddir}
OUDPWD=`cat ${PWDDIR}/.pwdfile_oud_directorymanager|awk -F"'" '{print $2}'`
WALLETPWD=`cat ${PWDDIR}/.pwdfile_eus_dbwallet|awk -F"'" '{print $2}'`
SOURCEDB="${ORACLE_SID^^}"    # ensure upper case
DBUNAME="${DBUNAME^^}"        # ensure upper case
PDBNAME="${PDBNAME^^}"        # ensure upper case
MAINACTVERS=`basename $ORACLE_HOME|sed s/db//|cut -b -2`

if [ -n "$PDBNAME" ]; then
  DBCA_CMD="${ORACLE_HOME}/bin/dbca -configurePluggableDatabase -sourceDB $SOURCEDB -pdbName $PDBNAME -silent"
  OUDREG_DBNAME="${PDBNAME}_${DBUNAME}"
else
  if [ $MAINACTVERS -ge 18 ]; then
    DBCA_CMD="${ORACLE_HOME}/bin/dbca -configureDatabase -sourceDB $SOURCEDB -silent"
  else
    DBCA_CMD="${ORACLE_HOME}/bin/dbca -configureDatabase  -silent"
  fi
  OUDREG_DBNAME="${DBUNAME}"
fi

REGISTER_RSP="/tmp/${SCRIPTNAME}_${OUDREG_DBNAME}_reg.$DATETIME.rsp"
PASSWORD_RSP="/tmp/${SCRIPTNAME}_${OUDREG_DBNAME}}_pwd.$DATETIME.rsp"

if [ "$OPTION" == "add" ]; then
  REGOPTION=registerWithDirService
  REGOPTIONDISPLAY1="Register databases '$OUDREG_DBNAME' in OUD ..."
  REGOPTIONDISPLAY2="Creates an oracle db wallet if not exists ($ORACLE_BASE/admin/<db-unique-name>/wallet/*) ..."
else
  REGOPTION=unregisterWithDirService
  REGOPTIONDISPLAY1="Unregister database '$OUDREG_DBNAME' from OUD"
  REGOPTIONDISPLAY2=""
fi
export ORACLE_HOSTNAME="$LONGHOST"

#-------------------------------------------------------------------------------
#  Main program
#-------------------------------------------------------------------------------

# Run some initial OUD lookups
if [ "$OPTION" == "add" ]; then
  # For option 'add' - check OUD if same tns or db entry exists
  CMD="$OUDSEARCHBIN -opt list -tnssrv '$OUDREG_DBNAME' -type 'tns+eus'|{ grep -i '^cn=' || [ \$? -eq 1 ]; }|wc -l"
  OUDOUT=`eval $CMD`
  RC=$?
  if [ "$RC" -ne 0 ]; then
    logger_error "OUD lookup for registered tns or db '$OUDREG_DBNAME' failed (RC=$RC)"
    logger_error "$CMD"
    logger_error "$OUDOUT"
    exit 110
  elif [ "$OUDOUT" -gt 0 ]; then
    logger_error "TNS-alias or eus registered db '$OUDREG_DBNAME' already exists in oud and has to be removed first!"
    $OUDSEARCHBIN -opt list -tnssrv "$OUDREG_DBNAME" -type "tns+eus" -dump | logger_error
    exit 111
  fi
elif [ "$OPTION" == "remove" ]; then
  # For option 'remove' - check OUD if db entry exists
  CMD="$OUDSEARCHBIN -opt list -tnssrv '$OUDREG_DBNAME' -type 'eus'|{ grep -i '^cn=' || [ \$? -eq 1 ]; }|wc -l"
  OUDOUT=`eval $CMD`
  RC=$?
  if [ "$RC" -ne 0 ]; then
    logger_error "OUD lookup for registered db '$OUDREG_DBNAME' failed (RC=$RC)"
    logger_debug "CMD: $CMD"
    logger_debug "OUT: $OUDOUT"
    exit 112
  elif [ "$OUDOUT" -eq 0 ]; then
    logger_error "An eus registered db '$OUDREG_DBNAME' doesn't exists in oud!"
    exit 113
  fi
fi

# Prepare REGISTER_RSP responsefile
umask 077
if [ $MAINACTVERS -ge 18 ]; then
  cat > $REGISTER_RSP <<EOF
responseFileVersion=/oracle/assistants/rspfmt_dbca_response_schema_v12.2.0
$REGOPTION=TRUE
dirServiceUserName=$OUDADMIN
dirServicePassword=$OUDPWD
walletPassword=$WALLETPWD
EOF
else
   cat > $REGISTER_RSP <<EOF
[GENERAL]
#RESPONSEFILE_VERSION = "11.2.0"
OPERATION_TYPE="configureDatabase"

[CONFIGUREDATABASE]
SOURCEDB="$SOURCEDB"
$REGOPTION=TRUE
DIRSERVICEUSERNAME="$OUDADMIN"
DIRSERVICEPASSWORD="$OUDPWD"
WALLETPASSWORD="$WALLETPWD"
EOF
fi

# Execute dbca
CMD="$DBCA_CMD -responseFile $REGISTER_RSP"
logger_info "$REGOPTIONDISPLAY1"
logger_info "$REGOPTIONDISPLAY2"
logger_info "$CMD"
logger_debug "Content of $REGISTER_RSP:"
cat $REGISTER_RSP | sed -e "s/$OUDPWD/*****/" -e "s/$WALLETPWD/*****/" | logger_debug
CMDOUT=`$CMD`
RC=$?
if [ $RC -ne 0 ]; then
  logger_error "$REGOPTIONDISPLAY1 failed (RC=$RC)!"
  logger_debug "$CMDOUT"
  exit $RC
else
  logger_info "$REGOPTIONDISPLAY1 successfully finished."
  logger_info "This entry was found in oud for db '$OUDREG_DBNAME' ..."
  $OUDSEARCHBIN -opt list -tnssrv "$OUDREG_DBNAME" -type eus -dump | logger_info
fi
rm $REGISTER_RSP

# Special BUG workaround
if [ "$OPTION" == "add" ]; then
  ##############################################################################
  # Begin Workaround for Bug 35120120
  ##############################################################################
  umask 077
  if [ $MAINACTVERS -ge 18 ]; then
    # prepare responsefile
    cat > $PASSWORD_RSP <<EOF
responseFileVersion=/oracle/assistants/rspfmt_dbca_response_schema_v12.2.0
regenerateDBPassword=TRUE
dirServiceUserName=$OUDADMIN
dirServicePassword=$OUDPWD
walletPassword=$WALLETPWD
EOF
  fi

  # Execute dbca
  CMD="$DBCA_CMD -responseFile $PASSWORD_RSP"
  logger_info "Regenerate password for databases '$SOURCEDB' in OUD ..."
  logger_info "$CMD"
  logger_debug "Content of $PASSWORD_RSP:"
  cat $PASSWORD_RSP | sed -e "s/$OUDPWD/*****/" -e "s/$WALLETPWD/*****/" | logger_debug
  CMDOUT=`$CMD`
  RC=$?
  if [ $RC -ne 0 ]; then
    logger_error "Regenerate db registration password failed (RC=$RC)!"
    logger_debug $CMDOUT
    exit $RC
  else
    logger_info "Regenerate db registration password successfully finished."
    logger_info "This entry was found in oud for db '$OUDREG_DBNAME' ..."
    $OUDSEARCHBIN -opt list -tnssrv "$OUDREG_DBNAME" -type eus -dump | logger_info
  fi

  rm $PASSWORD_RSP
  ##############################################################################
  # End Workaround for Bug 35120120
  ##############################################################################
fi

logger_info "OUD registration completed successfully."
exit 0
