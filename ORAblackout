#!/bin/bash
# @(#) ================================================================================================================
# @(#) Name .........: ORAblackout
# @(#) Autor ........: Marcel Pils
# @(#) Funktion .....: Checkout wahlweise fuer Host und/oder DB in Foglight, CheckMK und/oder EM setzen oder entfernen
# @(#) Version  .....: 1.2
# @(#) Datum ........: 02.03.2018
# @(#) Format .......: ORAblackout
# @(#) Beispiel .....: ORAblackout -o stop -t db -d $DBUNAME -m f
#
# @@(#) Beschreibung :
# @@(#)                Das Skript fuehrt ...
# @@(#) Aenderungen .:
# @@(#) 1.0 08.07.2015 MP  created
# @@(#) 1.1 06.12.2017 thi der String fuer monitoringAgent.name muss mit DBUNAME_UC gebildet werden
# @@(#) 1.2 02.03.2018 thi zum Aufruf von emctl den immer gesetzten Pfad $AGENT_HOME nutzen
# @@(#)                    Funktion usage nur mit RC=0 beenden, wenn Pogramm mit Option -h gestartet wurde, ansonsten RC=1
# @(#) ================================================================================================================
#

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="[Un]set adhoc monitoring blackouts"
ORACLE_BASE="/app/oracle"
LOGDIR="/app/logs"
BINDIR="/app/oracle/bin"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
if [ $help -eq 1 ]
then
   RC=0
else
   RC=1
fi
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -o  {start|stop}      Blackout Option"
echo "                -t  {db|host}         Blackout Target"
echo "                                      db   = database + listener  (Default)"
echo "                                      host = all host related targets"
echo "                -d  {\$DBUNAME}       Database Unique Name (needed for option '-t db')"
echo "                -m  {f|e|c|a}         Monitoring environments to use"
echo "                                      f = Foglight"
echo "                                      e = Enterprise Manager"
echo "                                      c = CheckMK"
echo "                                      a = all                     (Default)"
echo "                -h,                   help screen"
echo ""
echo "  Example     : $SCRIPTNAME -o start -t db -d \$DBUNAME"
echo "                $SCRIPTNAME -o start -t host"
echo "                $SCRIPTNAME -o stop"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit $RC
}

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort
#-----------------------------------------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
TARGET=db
MONITOR=a
while true; do
  case "$1" in
    -d ) DBUNAME="$2";dbuname=1; shift 2 ;;
    -t ) TARGET="$2";target=1; shift 2 ;;
    -o ) OPTION="$2";option=1; shift 2 ;;
    -m ) MONITOR="$2";monitor=1; shift 2 ;;
    -h | --help ) help=1; usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
OPTION=`echo $OPTION|tr 'A-Z' 'a-z'`
TARGET=`echo $TARGET|tr 'A-Z' 'a-z'`
MONITOR=`echo $MONITOR|tr 'A-Z' 'a-z'`
DBUNAME_LC=`echo $DBUNAME|tr 'A-Z' 'a-z'`
DBUNAME_UC=`echo $DBUNAME|tr 'a-z' 'A-Z'`
LONGHOST_LC=`echo $LONGHOST|tr 'A-Z' 'a-z'`
LONGHOST_UC=`echo $LONGHOST|tr 'a-z' 'A-Z'`
ORACLE_SID_UC=`echo $DBUNAME_UC|sed s/_S.//`

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "$OPTION" != "start" -a "$OPTION" != "stop" ]; then
  Bmsg -rm "-o [option] is required"; echo ""; usage
fi
if [ "$TARGET" != "db" -a "$TARGET" != "host" ]; then
  Bmsg -rm "-t [option] is required"; echo ""; usage
fi
if [ "$TARGET" == "db" -a "x$dbuname" != "x1" ]; then
  Bmsg -rm "-d [option] is required"; echo ""; usage
fi
if [ "$TARGET" == "db" -a "$MONITOR" == "c" ]; then
  Bmsg -rm "-m [option] value c (CheckMK) only works for host targets"; echo ""; usage
fi


#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
export PATH=$PATH:/opt/ctm_ag/pcmag1/ctm/scripts:/opt/ctm_ag/pcmag1/ctm/exe
export LD_LIBRARY_PATH=/opt/ctm_ag/pcmag1/ctm/exe
export CONTROLM=/opt/ctm_ag/pcmag1/ctm
CHKMKAPI=/app/oracle/bin/chk_mk_api
if [ "x$AGENT_HOME" == "x" ]
then
   Bmsg -rm "Umgebungsvariable AGENT_HOME ist nicht gesetzt!"
   exit 1
fi
EMCTL=$AGENT_HOME/bin/emctl
TMPFILE=/tmp/${SCRIPTNAME}.$(date +%Y%m%d%H%M%S).out
CTMSLEEP=10
#DURATION=1440
#DURATIONDISPLAY="1440 minutes [24 hour]"

#-----------------------------------------------------------------------------------------------------------------
#     Some functions ..
#-----------------------------------------------------------------------------------------------------------------

function apply_to_foglight()
{
#
# Foglight blackout management
# Doku siehe hier: http://wsv-muv.unix.lan/mediawiki/index.php/Automation_-_Blackouts
# Bisher keine Blackout Laufzeit definierbar!
#
Bmsg -1m "$OPTION Blackout in Foglight"
if [ "$TARGET" == "db" ]; then
  #MONTARGETS="\"DBO_Instance where name = 'LX2U1.UNIX.LAN-DG12C'\""
  #MONTARGETS="\"DBO_Instance where name = '${LONGHOST_UC}-${DBUNAME_UC}'\""
  MONTARGETS1="\"DBO_Instance where monitoringAgent.name = '${LONGHOST_LC}-${DBUNAME_UC}'\""
  MONTARGETS2="\"DBO_Agent_Model where monitoringAgent.name = '${LONGHOST_LC}-${DBUNAME_UC}'\""
else
  #MONTARGETS="\"DBO_Instance where name like '${LONGHOST_UC}-%'\""
  MONTARGETS1="\"DBO_Instance where name like '${LONGHOST_UC}-%'\""
  MONTARGETS2="\"DBO_Agent_Model where name like '${LONGHOST_LC}-%'\""
fi
#echo "MONTAGETS=$MONTARGETS"
#echo "MONTAGETS1=$MONTARGETS1"
#echo "MONTAGETS2=$MONTARGETS2"

# run for MONTARGET1
ctmorder -FOLDER DBA-MON -NAME dbamons_${OPTION}_alarm -HOLD n -FORCE y -ODATE odat -VARIABLE %%PARM3 "$MONTARGETS1" |tee $TMPFILE
RC1=$?
#echo $INSTANCE
Bmsg -m "sleep $CTMSLEEP seconds now ..."
sleep $CTMSLEEP
ORDERID=`grep orderno $TMPFILE|awk '{ print $NF }' | awk -F\' '{ print $2 }'`
rm $TMPFILE
Bmsg -m "ControlM Job Output for Job '$ORDERID':"
ctmpsm -LISTOUTPUT $ORDERID
Bmsg -bm "If no ctm job output listet, you can pull this by 'ctmpsm -LISTOUTPUT ${ORDERID}'"

# run for MONTARGET2
ctmorder -FOLDER DBA-MON -NAME dbamons_${OPTION}_alarm -HOLD n -FORCE y -ODATE odat -VARIABLE %%PARM3 "$MONTARGETS2" |tee $TMPFILE
RC2=$?
#echo $INSTANCE
Bmsg -m "sleep $CTMSLEEP seconds now ..."
sleep $CTMSLEEP
ORDERID=`grep orderno $TMPFILE|awk '{ print $NF }' | awk -F\' '{ print $2 }'`
rm $TMPFILE
Bmsg -m "ControlM Job Output for Job '$ORDERID':"
ctmpsm -LISTOUTPUT $ORDERID
Bmsg -bm "If no ctm job output listet, you can pull this by 'ctmpsm -LISTOUTPUT ${ORDERID}'"

if [ "$RC1" == "0" -a "$RC2" == "0" ]; then
  Bmsg -gm "$OPTION blackout (duration: unlimited) succeeded"
else
  Bmsg -rm "$OPTION blackout failed"
fi
}

function apply_to_checkmk()
{
#
# CheckMK blackout management
# Bisher keine Blackout Laufzeit definierbar!
#
if [ "$TARGET" == "host" ]; then
  Bmsg -1m "$OPTION Blackout in CheckMK"
  if [ "$OPTION" == "start" ]; then
    CHKMKOPT=add
  else 
    CHKMKOPT=del
  fi
  $CHKMKAPI -o host_downtime -h $LONGHOST -m $CHKMKOPT -k "DBA adhoc blackout"
  RC=$?
  if [ "$RC" == "0" ]; then
    Bmsg -gm "$OPTION blackout (duration: unlimited) succeeded"
  else
    Bmsg -rm "$OPTION blackout failed"
  fi
fi
}

function apply_to_em12c()
{
#
# Em12c blackout management
# Bisher keine Blackout Laufzeit definierbar!
#
Bmsg -1m "$OPTION Blackout in Enterpise Manager"
BLACKOUTNAME=DBAadhocBlackout
$EMCTL config agent listtargets|grep "^\["|sed -e 's/\[//g' -e 's/\]//g' -e 's/, /:/g' > $TMPFILE
if [ "$TARGET" == "db" ]; then
  BLACKOUTNAME=${BLACKOUTNAME}_${ORACLE_SID_UC}
  SIDTARGETS=`grep "$ORACLE_SID_UC" $TMPFILE | sed -e 's/$//g'`
else
  BLACKOUTNAME=${BLACKOUTNAME}_${HOST}
  SIDTARGETS="-nodeLevel"
fi
rm $TMPFILE
if [ "$OPTION" == "start" ]; then
  #$EMCTL start blackout $BLACKOUTNAME $SIDTARGETS -d $DURATION -nowait
  #$EMCTL start blackout $BLACKOUTNAME $SIDTARGETS -d $DURATION
  $EMCTL start blackout $BLACKOUTNAME $SIDTARGETS
else
  $EMCTL stop blackout $BLACKOUTNAME
fi
RC=$?
if [ "$RC" == "0" ]; then
  #Bmsg -gm "$OPTION blackout (duration: $DURATIONDISPLAY) succeeded"
  Bmsg -gm "$OPTION blackout (duration: unlimited) succeeded"
else
  Bmsg -rm "$OPTION blackout failed"
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------

case "$MONITOR" in
    a ) apply_to_foglight
        apply_to_checkmk
        apply_to_em12c 
        ;;
    f ) apply_to_foglight ;;
    c ) apply_to_checkmk ;;
    e ) apply_to_em12c ;;
    * ) Bmsg -rm "invalid value '$MONITOR' for option -m"; echo ""; usage ;;
esac

