#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAprepareprimary
# @(#) Author      : Johannes Ahrends
# @(#)
# @(#) Version     : 0.11
# @(#) Date        : 11.09.2016
# @(#)
# @(#) Description : Prepare Primary Database standby database
# @(#)
# @(#) Syntax      : see usage (ORAprepareprimary -h)
# @(#)
# @(#) Attention   : This script must be started as user ORACLE on the Standby Server
# @(#)
# @(#) Presumption :
# @(#) 1. Oracle software is installed, database exists in /etc/oratab
# @(#) 2. Primary Database is up and running with Archivelog-Mode enabled
# @(#) 3. ssh Passwordless ssh connection to primary exists
# @(#) 5. Listener and tnsnames Parameter for Primary Database already set pro
# @(#) 6. ORACLE_SID and ORACLE_HOME must be set
# @(#)
# @@(#) Change History:
# @@(#)
# @@(#) 0.1     08.12.2015 J. Ahrends first draft
# @@(#) 0.2     26.01.2016 J. Ahrends TNS-Configuration, Port as parameter
# @@(#) 0.3     22.03.2016 J. Ahrends TNS-Changes, no Parameter required, Check FS Size, Drop Database
# @@(#) 0.4     30.03.2016 Th. Thiel  if not set, alter primary database to FLASHBACK ON and FORCE LOGGING
# @@(#)                               changed function createDirs to build symbolic links etc.
# @@(#) 0.5     31.03.2016 Th. Thiel  changed function createNetwork to add (UR = A) where recommended
# @@(#) 0.6     05.04.2016 J. Ahrends Added Static SID list in listener.ora
# @@(#) 0.7     11.04.2016 Th. Thiel  Static SID list in listener.ora needs DGMGRL-sid-desc
# @@(#) 0.8     14.04.2016 J. Ahrends change sqlnet.ora (NAMES.DIRECTORY_PATH)
# @@(#) 0.9     12.07.2016 J. Ahrends Restart Listener
# @@(#) 0.10    30.08.2016 J. Ahrends Neue Returncodes (WHENEVER SQLERROR PROMPT)
# @@(#) 0.11    11.09.2016 M. Pils    Parameter "ps - PrimarySide" hinzugefuehgt.
# @@(#)                               Nun kann auch eine S2 Seite als Primary Instance geprueft werden.
# @(#) ================================================================================================================
#
# Variables
#
SCRIPTDIR=/app/oracle/bin
DIR=$SCRIPTDIR
DBNAME=$ORACLE_SID
LOCKFILE=$DIR/ORAprepareprimary.lck
DATE=`date +%Y-%m-%d-%H-%M-%S`
CREATETNS=0
cd $DIR
RT=0   
PRIMARYSIDE="S1"

#-----------------------------------------------------------------------
#
#Functions
#
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
# Usage help
#-----------------------------------------------------------------------
#
usage() {
   echo " "
   echo "Function:  Prepare primary database for Dataguard"
   echo " "
   echo "     Usage:  `basename $0` -p <Hostname> -po <Port> [-h]"
   echo "        -p:  hostname for Primary host (full qualified)"
   echo "       -ps:  Primary Side (optional! default=S1)"
   echo "       -po:  Listener Port (Must be identical on both Servers"
   echo "        -h:  This help"
   echo " "
   echo " Example: $0 -p lx3g6.barmenia.lan -po 1661"
}
#
#-----------------------------------------------------------------------
# Logger Script
#-----------------------------------------------------------------------
#
logger() {
if [ -r $SCRIPTDIR/log4sh ]
then
   LOCALLOGGER="`basename $0 | cut -d"." -f 1`_log4sh.properties"
   if [ -r $SCRIPTDIR/${LOCALLOGGER} ]
   then
      LOG4SH_CONFIGURATION=$SCRIPTDIR/$LOCALLOGGER . $SCRIPTDIR/log4sh
   else
      LOG4SH_CONFIGURATION=$SCRIPTDIR/log4sh.properties . $SCRIPTDIR/log4sh
   fi
else
   echo "ERROR: could not load (log4sh)" >&2
   exit 1
fi
#  echo "LOG4SH_CONFIGURATION:$LOG4SH_CONFIGURATION"
}
#
#-----------------------------------------------------------------------
# Create Dataguard Directories
#-----------------------------------------------------------------------
#
createDirs()
{
   logger_info "Create Dataguard Directories"
   ssh ${PRIMARYHOST} "cd /app/oracle/admin;
                       if [ -d ${DBNAME}_${PRIMARYSIDE} ]
                       then
                          mv ${DBNAME}_${PRIMARYSIDE}/* $DBNAME; rmdir ${DBNAME}_${PRIMARYSIDE}; ln -s ${DBNAME} ${DBNAME}_${PRIMARYSIDE}; ln -s ${DBNAME} ${DBNAME}_${STANDBYSIDE}
                       fi"
   ssh ${PRIMARYHOST} "mkdir -p /app/oracle/data/${DBNAME}_${PRIMARYSIDE}/dataguard
                       mkdir -p /app/oracle/admin/${DBNAME}_${PRIMARYSIDE}/dataguard
                       mkdir -p /app/oracle/admin/${DBNAME}/scripts"
}
#
#-----------------------------------------------------------------------
# Check Database
#-----------------------------------------------------------------------
#
checkDB()
{
   logger_info "Check Archivelog Mode, Flashback Database and Force Logging"
   DBINFO=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOARC
   set heading off
   set feedback off
   SELECT log_mode, flashback_on, force_logging FROM v\\\$database; 
EOARC
")
   logger_debug "DBINFO = "$DBINFO
   set $DBINFO
   ARCHIVELOG=$1
   FLASHBACK_ON=$2
   FORCE_LOGGING=$3
   
   if [ ${ARCHIVELOG} != "ARCHIVELOG" ]
   then
      logger_error "Primary database not in Archivelog mode --> ${ARCHIVELOG}"
      exit 10
   fi
   if [ ${FLASHBACK_ON} != "YES" ]
   then
      logger_info "Primary database FLASHBACK not enabled"
      alter_flashback
   fi
   if [ ${FORCE_LOGGING} != "YES" ]
   then
      logger_info "Primary database FORCE LOGGING not enabled"
      alter_logging
   fi

   LOGSIZE=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOSIZE
   set heading off
   set feedback off
   SELECT (count(*) + 1) * max(bytes) FROM v\\\$log;
EOSIZE
")
   logger_debug "LOGSIZE=$LOGSIZE"

   FRASPACE=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EORECO
   set heading off
   set feedback off
   col space_free format 999999999999
   SELECT space_limit - space_used + space_reclaimable space_free
   FROM   v\\\$recovery_file_dest;
EORECO
")
   logger_debug "FRASPACE=$FRASPACE"

   FREEFS=$(ssh ${PRIMARYHOST} df |grep ${DBNAME}_${PRIMARYSIDE} | grep fra |awk  '{ print $3 }')
   FREEFS=`expr $FREEFS \* 1024`
   logger_debug "FREEFS=$FREEFS"

   if [ $FREEFS -lt $FRASPACE ]
   then
      SPACE=`expr $FREEFS - $LOGSIZE`
   else
      SPACE=`expr $FRASPACE - $LOGSIZE`
   fi
   if [ $SPACE -le 0 ]
   then
      SPACE=`expr $SPACE \* -1`
      logger_error "Insufficent space in FRA. Need additional $SPACE Byte"
      exit 10
   fi
}
#
#-----------------------------------------------------------------------
# Create Standby Redologs
#-----------------------------------------------------------------------
#
createSRL()
{
   logger_info "get number and size of online redologs"
   REDOS=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOREDO
   set heading off
   set feedback off
   SELECT count(*), max(bytes) FROM v\\\$log;
EOREDO
")
   set $REDOS
   LOGCOUNT=$1
   LOGSIZE=$2
   logger_debug "Redos = $LOGCOUNT"
   logger_debug "Size = $LOGSIZE"

   logger_debug "get Standby Redologs"
   SRL=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOREDO2
   set heading off
   set feedback off
   SELECT count(distinct group#) FROM v\\\$logfile WHERE type = 'STANDBY';
EOREDO2
")
   logger_info "Standby Redos = $SRL"
#-----------------------------------------------------------------------
   if [ $SRL -eq 0 ]
   then
      logger_info "Create Standby Redologs"
      SRL=1
      while [ $SRL -le `expr $LOGCOUNT + 1` ]
      do
         RT=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOSRL
         WHENEVER SQLERROR EXIT
         ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 1$SRL SIZE $LOGSIZE;
         PROMPT 0
EOSRL
")
         if [ `echo $RT|rev | cut -d" " -f 1` != 0 ]
         then
            logger_error "Cannot Create Standby Redolog Group 1$SRL "$RT
            exit 20
         fi
         SRL=`expr $SRL + 1`
      done
   fi
   logger_debug "check standby redologs"
   SRL=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOSRL2
   set heading off
   set feedback off
   SELECT count(distinct group#) FROM v\\\$logfile WHERE type='STANDBY';
EOSRL2
")
   logger_info "$SRL Standby Redologs created"
}

#
#-----------------------------------------------------------------------
# Add Dataguard Broker Configuration
#-----------------------------------------------------------------------
#
brokerConfig()
{
   logger_info "Add Dataguard Broker Configuration on Primary"
   RT=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EODG
      WHENEVER SQLERROR EXIT
      ALTER SYSTEM SET dg_broker_config_file1='/app/oracle/data/${DBNAME}_${PRIMARYSIDE}/dataguard/dg_config1.cfg';
      PROMPT 1
      ALTER SYSTEM SET dg_broker_config_file2='/app/oracle/admin/${DBNAME}_${PRIMARYSIDE}/dataguard/dg_config2.cfg';
      PROMPT 2
      ALTER SYSTEM SET \"_query_on_physical\"=false SCOPE=spfile;
      PROMPT 3
EODG
")
   if [ `echo $RT|rev | cut -d" " -f 1` != 3 ]
   then
      logger_error "Cannot change Broker Files" $RT
      exit 21
   fi

}

#
#-----------------------------------------------------------------------
# Change Oracle Net Configuration
#-----------------------------------------------------------------------
#
createNetwork() {
   STANDBYHOST=`hostname`
#
#
   logger_info Changing TNS Files on Primary $PRIMARYHOST
   EXIST=$(ssh ${PRIMARYHOST} "fgrep -c ${DBNAME}_${STANDBYSIDE} ${TNS_ADMIN}/tnsnames.ora")
   if [ $EXIST -eq 0 ]
   then
      ssh ${PRIMARYHOST} "(cp ${TNS_ADMIN}/tnsnames.ora ${TNS_ADMIN}/tnsnames.ora_${DATE} >/dev/null 2>&1
                          cat <<EOTNS >> ${TNS_ADMIN}/tnsnames.ora
${DBNAME}_${STANDBYSIDE} =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = ${STANDBYHOST})(PORT = ${PORT}))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = ${DBNAME}_${STANDBYSIDE}.unix.lan)
      (UR = A)
    )
  )
EOTNS
)"
   fi
   DGSRVCOUNT=$(ssh ${PRIMARYHOST} "fgrep -c 'SERVICE_NAME = ${DBNAME}_S' ${TNS_ADMIN}/tnsnames.ora")
   URCOUNT=$(ssh ${PRIMARYHOST} "fgrep -c 'UR = A' ${TNS_ADMIN}/tnsnames.ora")

if [ $DGSRVCOUNT -gt $URCOUNT ]
then
   TMPTNS=/tmp/new_tnsnames.ora
cat <<EOCAT >/tmp/prep_tnsnames.sh
rm $TMPTNS 2>/dev/null
DGSRV=0
UR2COME=0
ZDAT=/tmp/tnsnames_zeile
for ZEILE in \`cat ${TNS_ADMIN}/tnsnames.ora | sed 's/ /@/g'\`
do
   echo "\$ZEILE" | sed 's/@/ /g' > \$ZDAT
   if [ \$DGSRV -eq 0 ]
   then
      grep '^${DBNAME}_S' \$ZDAT >/dev/null && DGSRV=1
   else
      if [ \$DGSRV -eq 1 -a \$UR2COME -eq 0 ]
      then
         grep 'SERVICE_NAME =' \$ZDAT >/dev/null && UR2COME=1
      elif [ \$DGSRV -eq 1 -a \$UR2COME -eq 1 ]
      then
         grep 'UR = A' \$ZDAT >/dev/null || echo '      (UR = A)' >> $TMPTNS
         DGSRV=0
         UR2COME=0
      fi
   fi
   echo "\$ZEILE" | sed 's/@/ /g' >> $TMPTNS
done
mv $TMPTNS ${TNS_ADMIN}/tnsnames.ora
rm \$ZDAT
EOCAT
fi
   chmod 740 /tmp/prep_tnsnames.sh
   scp /tmp/prep_tnsnames.sh $PRIMARYHOST:/tmp/prep_tnsnames.sh >/dev/null 2>&1
   ssh $PRIMARYHOST /tmp/prep_tnsnames.sh
   ssh $PRIMARYHOST "rm /tmp/prep_tnsnames.sh"

   logger_debug "Changing sqlnet.ora on Primary $PRIMARYHOST" 
   EXIST=$(ssh ${PRIMARYHOST} "fgrep -c ${DBNAME}_${STANDBYSIDE} ${TNS_ADMIN}/sqlnet.ora")
   if [ $EXIST -eq 0 ]
   then
      ssh ${PRIMARYHOST} "cp ${TNS_ADMIN}/sqlnet.ora ${TNS_ADMIN}/sqlnet.ora_${DATE} >/dev/null 2>&1
                          sed -i '/NAMES.DIRECTORY_PATH/c NAMES.DIRECTORY_PATH = (tnsnames, ldap, EZCONNECT)' $TNS_ADMIN/sqlnet.ora"
   fi
}
#
#-----------------------------------------------------------------------
# Add Static Database entry in listener.ora on primary
#-----------------------------------------------------------------------
#

addSIDlist() {
   logger_info "adding static database in listener.ora on primary"
   EXIST=$(ssh ${PRIMARYHOST} "fgrep -c -i SID_LIST_LISTENER_${DBNAME} ${TNS_ADMIN}/listener.ora")
   logger_debug EXIST=$EXIST
   cat <<EOLSNR > /tmp/listenerprim.ora
SID_LIST_LISTENER_$DBNAME =
(SID_LIST =
   (SID_DESC =
       (GLOBAL_DBNAME = ${DBNAME}_${PRIMARYSIDE}_DGMGRL.unix.lan)
       (SID_NAME = ${DBNAME})
       (ORACLE_HOME =${ORACLE_HOME}))
   (SID_DESC =
       (GLOBAL_DBNAME = ${DBNAME}_${PRIMARYSIDE}.unix.lan)
       (SID_NAME = ${DBNAME})
       (ORACLE_HOME =${ORACLE_HOME}))
  )
EOLSNR

   if [ $EXIST -eq 0 ]
   then
      scp /tmp/listenerprim.ora ${PRIMARYHOST}:/tmp
      logger_info "Restarting Listener on $PRIMARYHOST"
      ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1;
                          cp ${TNS_ADMIN}/listener.ora ${TNS_ADMIN}/listener.ora_${DATE} > /dev/null 2>&1;
                          cat /tmp/listenerprim.ora >> ${TNS_ADMIN}/listener.ora;
                          lsnrctl stop listener_${DBNAME} >/dev/null;
                          lsnrctl start listener_${DBNAME} >/dev/null
"
   fi
}
#-----------------------------------------------------------------------
#
# FLASHBACK ON 
#
#-----------------------------------------------------------------------
alter_flashback()
{
   logger_info "Primary database: FLASHBACK will be enabled"
   RT=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOARC
   WHENEVER SQLERROR EXIT
   ALTER DATABASE FLASHBACK ON;
   PROMPT 0
EOARC
")
   if [ `echo $RT|rev | cut -d" " -f 1` != 0 ]
   then
   logger_error "FLASHBACK could not be enabled! ${RT}"
   exit 11
fi
}

#-----------------------------------------------------------------------
#
# FORCE LOGGING
#
#-----------------------------------------------------------------------

alter_logging()
{
   logger_info "Primary database: FORCE LOGGING will be enabled"
   RT=$(ssh ${PRIMARYHOST} "export ORACLE_SID=${DBNAME}; export ORAENV_ASK=NO; . oraenv >/dev/null 2>\&1; sqlplus -s / as sysdba <<EOARC
   WHENEVER SQLERROR EXIT
   ALTER DATABASE FORCE LOGGING;
   PROMPT 0
EOARC
")
   if [ `echo $RT|rev | cut -d" " -f 1` != 0 ]
   then
      logger_error "Unable to enable force logging: ${RT}"
      exit 12
   fi
}

#-----------------------------------------------------------------------
#
# Main
#
#-----------------------------------------------------------------------

if [ $# -eq 0 ]
then
   usage
   exit
fi
logger
#
# read Parameter 
#
while [ $# -gt 0 ]
do
   option="$1"
   case $option in
      -p)
         PRIMARYHOST="$2"
         shift
         ;;
      -ps)
         PRIMARYSIDE="$2"
         PRIMARYSIDE=`echo $PRIMARYSIDE|tr 'a-z' 'A-Z'`
         shift
         ;;
      -po)
         PORT="$2"
         shift
         ;;
      -h)
         usage
         exit
         ;;
   esac
   shift
done
#

if [ -z "$PRIMARYHOST" ]
then
   logger_fatal "Parameter PRIMARYHOST not set!"
   exit 1
fi
if [ -z "$PORT" ]
then
   logger_fatal "Parameter PORT not set!"
   exit 1
fi
if [ -z "$TNS_ADMIN" ]
then
   logger_fatal "Parameter TNS_ADMIN not set!"
   exit 1
fi
if [ `hostname` == "$PRIMARYHOST" ]
then
   logger_fatal "Not started on Standby Host or wrong hostname for primary host"
   exit 1
fi

if [ "$PRIMARYSIDE" == "S1" ]; then
  STANDBYSIDE="S2"
else
  STANDBYSIDE="S1"
fi


#
checkDB
#
createSRL
#
createDirs
#
brokerConfig
#
createNetwork
#
addSIDlist
