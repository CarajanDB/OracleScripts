#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAexecEMdos
# @(#) Author      : Svenja Hoge
# @(#)
# @(#) Version     : 1.1.4
# @(#) Date        : 04.10.2021
# @(#)
# @(#) Description :  
# @(#)
# @(#) Syntax      : see usage (ORAexecEMdos -h)
# @(#)
# @(#) Attention   : This script must be started as user ORACLE on the lxhko or lxoraezm Server
# @(#)
# @(#)
# @@(#) Change History:
# @@(#)
# @@(#) 1.0     22.07.2021 HGE New Skript
# @@(#) 1.1     02.08.2021 HGE Usage erweitert, Bugfix returncode 0 wenn keine emdo dateien gefunden werden
# @@(#) 1.1.1   02.08.2021 HGE Bugfix Usage aufrufen mit -?,-h und --help und Returncode 0
# @@(#) 1.1.2   31.08.2021 HGE Skript darf jetzt auch auf lxoraezm laufen
# @@(#) 1.1.3   02.09.2021 HGE Bugfix  Hostabfrage
# @@(#) 1.1.4   04.10.2021 HGE Bugfix clearDirectory(), exit wenn kein Passwortfile vorhanden ist

# @(#) ================================================================================================================
#

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
source /app/oracle/bin/ORAlib
EMDOPATH=/oranfs/share/ora_admin/EM/
FILELISTE[0]=""
i=0
Logger
RC=0


#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle and host is lxhko/lxoraezm, otherwise abort
#-----------------------------------------------------------------------------------------------------------------
ACTIVE_USER=`id -un`
if [ "$ACTIVE_USER" != "oracle" ]; then
  MESSAGE="Script may not run as user $ACTIVE_USER, it must be started and run as oracle"
  logger_fatal "$MESSAGE"
  RC=1
  MESSAGE="Error Code: ${RC}"
  logger_fatal "$MESSAGE"
  exit $RC
fi
ACTUAL_HOST=`hostname`
if [ "$ACTUAL_HOST" != "lxhko.barmenia.lan" -a "$ACTUAL_HOST" != "lxoraezm.barmenia.lan" ]; then
  MESSAGE="Script may not run on host $ACTUAL_HOST, it must be started and run on lxhko or lxoraezm"
  logger_fatal "$MESSAGE"
  RC=1
  MESSAGE="Error Code: ${RC}"
  logger_fatal "$MESSAGE"
  exit $RC
fi
. dbset oms
#-----------------------------------------------------------------------------------------------------------------
#     START of FUNCTION SECTION
#-----------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
if [ $help -eq 1 ]
then
   RC=0
else
   RC=1
fi
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : "
echo "                $F_OPT,                file containing emdo filenames "
echo "                $L_OPT,                list of emdo filenames"
echo "                $A_OPT,              action to do (all|add|del|upd)"
echo "                $W_OPT,                wait time in seconds"
echo "                $H_OPT,                help screen"
echo ""
echo "  Example     : "
echo "                ORAexecEMdos -a add -w 20"
echo "                ORAexecEMdos -f <file with list of emdo filenames>"
echo "                ORAexecEMdos -l add_xyz.emdo,upd_qwe.emdo,del_abc.emdo"
echo ""
echo "  Attention   : This script must be started as user ORACLE on lxhko"
echo ""
exit $RC
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: read filenames of parameter file list
#-----------------------------------------------------------------------------------------------------------------
function readFilesOfList()
{
   # File auslesen und komma seperierte Einträge in einer Liste speichern
    IFS=","
    i=0
    if [ ! -f "$FILENAME" ]
    then
        logger_fatal "Die Datei $FILENAME gibt es in dem Ordner $EMDOPATH nicht"
    else
        while read FILE
        do
            if [ -f "$FILE" ]
            then
                FILELISTE[i]="$FILE"
                i+=1
            else
                logger_debug "Die Datei $FILE gibt es in dem Ordner $EMDOPATH nicht".
            fi
        done < $FILENAME
    fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: read filenames of parameter file list
#-----------------------------------------------------------------------------------------------------------------
function readList()
{
    LISTWORDS=`echo "$LIST" | awk -F, '{print NF}'`
    for ((i=1;i<=$LISTWORDS;i++))
    do
        DATEINAME=`echo "$LIST" | awk -F, -v STELLE="$i" '{print $STELLE}'`
        EXTENTION=`echo "$DATEINAME" | awk -F\. '{print $NF}'`
        if [ "$EXTENTION" == 'emdo' ]
        then
            if [ -f "$DATEINAME" ]
            then
                FILELISTE[i-1]+="$DATEINAME"
            else
                logger_info "Die Datei '$DATEINAME' gibt es in dem Pfad $EMDOPATH nicht."
            fi
        else
            logger_error "Fehler: >$DATEINAME< hat nicht die Extention .emdo "
        fi
    done
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: read filenames of directoy 
#-----------------------------------------------------------------------------------------------------------------
function readFilesOfDirectory()
{
   # Directory (/oranfs/share/ora_admin/EM/) auslesen und in einer Liste speichern mit Leerzeichen seperiert (add|del|all)
  #i=0
   if [ "$ACTION" == "" ] || [ "$ACTION" == "all" ]
        then
        #Dateien mit .emdo in Liste hinzufügen
        for FILE in `ls *.emdo`
            do
                FILELISTE[i]+="$FILE"
                i+=1
            done
   elif [ "$ACTION" != "" ]
    then
        if [ "$ACTION" == "add" ]
            then
            #Dateien mit add_*.emdo in Liste hinzufüge
            for FILE in `ls add_*.emdo`
            do
                FILELISTE[i]+="$FILE"
                i+=1
            done
        elif [ "$ACTION" == "del" ]
            then
            #Dateien mit del_*.emdo in Liste hinzufügen
            for FILE in `ls del_*.emdo`
            do
                FILELISTE[i]+="$FILE"
                i+=1
            done
        elif [ "$ACTION" == "upd" ]
            then
            #Dateien mit upd_*.emdo in Liste hinzufügen
            for FILE in `ls upd_*.emdo`
            do
                FILELISTE[i]+="$FILE"
                i+=1
            done
        else
            echo "Für den Parameter -a|--action darf nur der Wert add oder del oder all mitgegeben werden."
            RC=1
        fi
    fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: rename emdo files 
#-----------------------------------------------------------------------------------------------------------------
function renameEmdoFile()
{
   # emdo files je nach Returncode umbennenen (.emdone|.emdofehler)
   #[ $RC -eq 0 ] && [ $? -eq 0 ]
    if [ $RC -eq 0 ]
    then
        logger_info "Rename '$1' in '${1}ne' ."
        mv $1 $(echo $1 | sed 's/.emdo/.emdone/')
        #mv $1 ${1}ne
    else
        logger_info "Rename '$1' in '${1}fehler' ."
        mv $1 $(echo $1 | sed 's/.emdo/.emdofehler/')
        RC=1
    fi
    
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: run .emdo files  
#-----------------------------------------------------------------------------------------------------------------
function runFiles()
{
   # Liste der files abarbeiten .emdo skripte ausführen
   if [ -n "$FILELISTE" ]
   then
    for FILE in "${FILELISTE[@]}"
    do 
        LOGFILE="$EMDOPATH"${FILE}log
        logger_info "Die Datei $FILE wird verarbeitet."
        logger_info "Die Ausgaben werden in die Datei $LOGFILE geschrieben."
        readPWD "sysman"
        if [ $? -eq 1 ]
        then
            logger_debug "Es ist kein Passwortfile vom sysman vorhanden das Skript wird beendet."
            exit 1
        fi
        (
        sh $FILE <<EOF 
$PWDSYSMAN
EOF
        ) | tee $LOGFILE
         
        if grep -iq "failed" $LOGFILE
        then
           logger_error "Bei der Verarbeitung ist ein Fehler aufgetreten."
            RC=1
        else
            RC=0
        fi
    
        renameEmdoFile $FILE
    done
    else
        logger_info "Es gab keine Dateien die verarbeitet werden konnten."
    fi
   
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Verzeichnis reinigen  
#-----------------------------------------------------------------------------------------------------------------
function cleanDirectory()
{
    SEVEN_DAYS_AGO=$(date -d 'now - 7 days' +%s)
    if [[ -n $(find *.emdone) ]]
    then
        for FILE in `ls -l *.emdone | awk '{print $NF}'`
        do
        FILETIME=$(date -r "$FILE" +%s)
        if [ $FILETIME -le $SEVEN_DAYS_AGO ]
        then 
            logger_info "Die Datei $FILE ist älter als 7 Tage."
            logger_info "Es wird nach der dazugehörigen .emdolog Datei gesucht."

            if [[ -n $(find $FILE | sed 's/.emdone/.emdolog/') ]]
            then
                logger_info "Die dazugehörige .emdolog Datei wurde gefunden."
                logger_info "Die beiden Dateien werden nun gelöscht."
                rm $FILE | sed 's/.emdone/.emdolog/'
                rm $FILE
            else
                logger_info "Keine dazugehörige .emdolog Datei zu $FILE gefunden"
                logger_info "Die Datei $FILE wird nicht gelöscht."
            fi
        fi
        
        done
    else
        logger_info "Keine .emdone Dateien in dem Verzeichnis $EMDOPATH gefunden"
    fi
}

#-----------------------------------------------------------------------------------------------------------------
#     END of FUNCTION SECTION
#-----------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------

F_OS="-f"; F_OL="--file";             F_OPT="$F_OS[|$F_OL]"
L_OS="-l"; L_OL="--list";             L_OPT="$L_OS[|$L_OL]"
A_OS="-a"; A_OL="--action";           A_OPT="$A_OS[|$A_OL]"
W_OS="-w"; W_OL="--wait";             W_OPT="$W_OS[|$W_OL]"
H_OS="-h";H_OSa="-?"; H_OL="--help";        H_OPT="$H_OS[|$H_OSa|$H_OL]"
help=0
if [ $# -eq 0 ]
then
   usage
else
   while [ $# -gt 0 ]; do
     case "$1" in
         $F_OS | $F_OL ) FILENAME="$2"
                         filename=1
                         FILENAME=`echo $FILENAME|tr [a-z] [A-Z]`
                         FILENAME_LC=`echo $FILENAME|tr [A-Z] [a-z]`
                         shift 2;;
        $L_OS | $L_OL )  LIST="$2"
                         list=1
                         shift 2;;
        $A_OS | $A_OL )  ACTION="$2"
                         action=1
                         Action=`echo $DBNAME|tr [a-z] [A-Z]`
                         Action_LC=`echo $DBNAME|tr [A-Z] [a-z]`
                         shift 2;;
        $W_OS | $W_OL ) WAIT="$2"
                         wait=1
                         check_digit $WAIT WAIT
                         shift 2;;
        $H_OS | $H_OSa | $H_OL ) help=1
                         usage;;
         * )             usage;;
     esac
   done
fi

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
if [ "x$filename" == "x1" ] && [ "x$action" == "x1" ]
then
    echo
    logger_info "Wenn der Parameter $F_OPT angegeben wird, dann kann der Parameter $A_OPT nicht ausgeführt werden. Die Datei hat Vorrang."
    echo
    action=0
elif [ "x$filename" == "x1" ] && [ "x$list" == "x1" ]
then
    echo
    logger_info "Wenn der Parameter $L_OPT angegeben wird, dann kann der Parameter $F_OPT nicht ausgeführt werden. Die Liste hat Vorrang."
    echo
    filename=0
elif [ "x$action" == "x1" ] && [ "x$list" == "x1" ]
then
    echo
    logger_info "Wenn der Parameter $L_OPT angegeben wird, dann kann der Parameter $A_OPT nicht ausgeführt werden. Die Liste hat Vorrang."
    echo
    action=0
fi


cd $EMDOPATH

cleanDirectory


if [ "x$filename" == "x1" ]
then
    readFilesOfList
elif [ "x$list" == "x1" ]
then 
    readList
elif [ "x$action" == "x1" ]
then 
    readFilesOfDirectory
else
    RC=1
fi 

if [ "x$wait" == "x1" ]
then
    if [ "x$list" == "x1" ]
    then
        logger_info "Die Liste $LIST wird verarbeitet werden."
    elif [ "x$filename" == "x1" ]
    then
        logger_info "Die Datei $FILENAME wird ausgelesen werden."
    elif [ "x$action" == "x1" ]
    then
        logger_info "Alle .emdo Dateien beginnend mit '$ACTION' werden verarbeitet werden."
        #Liste generieren aus action
    fi
    logger_info "================================"
    logger_info "Liste:"
    for FILE in "${FILELISTE[@]}"
    do 
        logger_info "$FILE"
    done
    echo "in $WAIT Sekunden geht's weiter!"
    echo "oder CTRL-C druecken!"
    sleep $WAIT
fi





if [ $RC -eq 0 ]
then
    runFiles
fi

exit $RC
