#!/bin/bash
# @(#) ================================================================================================================
# @(#)  File        : ORAcreatedb
# @(#)  Author      : Daniel Oberdick
# @(#)  Modified    :
# @(#)
# @(#)  Description : This script creates a new Oracle database
# @(#)
# @(#)  Version     : 4.0
# @(#)  Date        : 24.07.2024
# @(#)
# @(#)
# @(#)  Attention   : This script must be started as user ORACLE
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)    1.0   2012-06-21  Oberdick   Created
# @@(#)    2.0   2012-11-09  Pils       Changed a lot of
# @@(#)    2.5   2014-06-03  Thiel      - DB-Eintrag in /etc/oratab wird fuer automatischen Start der DB angepasst.
# @@(#)
# @@(#)    2.6   2014-06-18  Thiel      - OID-Service automatisch anlegen lassen Parameter: -oid [Servicename]
# @@(#)                                   wird der Servicename als '' (Leerstring) angegeben, wird der Datenbankname
# @@(#)                                   als OID-Servicename benutzt
# @@(#)                                 - Liste der orahosts pflegen (/oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts)
# @@(#)
# @@(#)    2.7   2015-05-05  Pils       - TNS-Alias Erstellung angepasst.
# @@(#)
# @@(#)    2.8   2015-10-08  Thiel      - Tabelle in dbap zur automatisierten Erstellung der CTRL-M-Jobs mit Daten fÃ¼llen
# @@(#)    2.9   2016-04-05  Ahrends    - Neue Servicedefinition (Grossbuchstaben und Domain)
# @@(#)
# @@(#)    3.0   2016-04-30  Thiel      - da in der Tabelle AJC_DATA in der DBAP-DB die Spalte JOBS_DONE eine
# @@(#)                                   automatische Vorbelegung erfuehrt, braucht die Spalte beim Insert eines
# @@(#)                                   neuen Datensatzes nicht beruecksichtigt werden.
# @@(#)                                 - In die Tabelle AJC_DATA in der DBAP-DB werden ebenfalls die notwendigen Daten zur
# @@(#)                                   automatisierten Konfiguration des Foglight Managements eingetragen.
# @@(#)                                   Ein auf dem Transferhost zyklisch laufender Job (ORAmk_db_monitored) erzeugt dann per
# @@(#)                                   SSH-Zugriff den Eintrag in der Datei ora.csv und startet dann das Programm
# @@(#)                                   orainst.sh.
# @@(#)    3.1   2016-08-30  Thiel      - nicht auf den Returncode von dbca vertrauen, selbst pruefen ob Instanz laeuft
# @@(#)    3.2   2017-05-18  Thiel      - eine weitere IF-Anweisung eingefuegt um CMD fuer ORAtnsservice zu erstellen bei Standard-Datenbanken
# @@(#)                                   S1-Seite und S2-Seite==unknown.barmenia.lan. Dadurch werden die OID-Services mit dem richtigen
# @@(#)                                   DB-Service erstellt.
# @@(#)    3.3   2018-01-02  Thiel      - der ORAHOSTS-Eintrag wird um eine 5. Spalte erweitert; y als Kennzeichen, dass die Instanz mit
# @@(#)                                   Foglight gemonitored wird
# @@(#)    3.4   2018-01-25  Pils       - changed pwddir location
# @@(#)    3.5   06.03.2018  Thiel      - last character of ORACLE_SID will be appended as stage to ORAHOSTS
# @@(#)    3.6   06.03.2018  voWi       - Aufruf DBCA mit -IgnoreSysPreReqs
# @@(#)    3.7   06.03.2018  voWi       - Change: Aufruf DBCA mit -IgnorePreReqs
# @@(#)    3.8   13.09.2018  Thiel      - bei 18c-DB den dbca-Aufruf um >-storageType FS -datafileDestination  /app/oracle/data/AUXP_S1 -databaseConfigType SINGLE< ergaenzen
# @@(#)          20.09.2018  Thiel      - minor change in determining MAINACTVERS
# @@(#)    3.9   04.07.2023  Thiel      - don't use fixed ldapserver name, but read from ldap.ora
# @@(#)    3.9.1 04.07.2023  Thiel      - use ORAlib function set_LDAPSERVER
# @@(#)    3.9.2 04.07.2023  Thiel      - make use of ORAlib, first
# @@(#)    3.9.3 07.07.2023  Thiel      - an empty orahosts file is sufficient
# @@(#)    4.0   24.07.2024  Thiel      - write monitoring user's name to ajc_data
# @(#) ----------------------------------------------------------------------------------------------------------------
#

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
source /app/oracle/bin/ORAlib
#MAILTO="unix-dba@barmenia.de"
HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Creates Listener and Database"
ORACLE_BASE="/app/oracle"
LOGDIR="/app/logs"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"
LDAPADD="${ORACLE_HOME}/bin/ldapadd"
BINDIR="/app/oracle/bin"
ORAHOSTS="/oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts"
PWDDIR="/app/oracle/admin/etc/pwddir"

source $PWDDIR/.pwdfile_db_bvajc
source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi


#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -sid,                     Database Name "
echo "                -dgside,                  DataGuard Side (s1|s2),     Default: unset"
echo "                -dgs2host,                Long Hostname of DG-Side S2 Default: unset"
echo "                -tpl,                     Database Template Name,     Default: BARM_standard.dbt"
echo "                -comp,                    Compatible Mode             [11.2.0.x.y]"
echo "                -port,                    unique Listener Port        [1600-1699]"
echo "                -oid,                     OID-Service-name            Default: Database Name"
#echo "                -redo,                    redo_log_size,             Default: 50 MB"
#echo "                -bs,                      db_block_size,             Default: 8 KB"
echo "                -char,                    characterset,               Default: WE8ISO8859P15"
echo "                -nchar,                   national characterset,      Default: AL16UTF16"
echo "                -nonetca                  skip listener configuration"
echo "                -h,                       help screen"
echo ""
#echo "  Example     : ORAcreatedb -sid mars -comp 11.2.0.3.0 -port 1633 -redo 100 -bs 16"
echo "  Example     : ORAcreatedb -sid MARS -comp 11.2.0.3.0 -port 1633 -tpl /app/oracle/bin/templates/dbca/BARM_general.dbt"
echo "                ORAcreatedb -sid DGTEST -dgside s1 -dgs2host lx123.unix.lan -comp 11.2.0.3.0 -port 1666 -tpl /app/oracle/bin/templates/dbca/BARM_general.dbt"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Create listener
#-----------------------------------------------------------------------------------------------------------------
function createlistener()
{
CMD="${ORACLE_HOME}/bin/netca -silent -responsefile ${NETCARESPONSEFILE} -instype custom -listener ${LISTENER} -lisport ${PORT} -insprtcl TCP,IPC -orahome ${ORACLE_HOME} -log $NETCALOGFILE >> /dev/null"
Bmsg -l $LOGFILE -m "$CMD"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]
then
  Bmsg -rl $LOGFILE -m "Creating Listener $LISTENER failed with RC=$RC"
  Bscriptend -l $LOGFILE
  exit $RC
else
  Bmsg -gl $LOGFILE -m "Listener $LISTENER successfully created"
  $ORACLE_HOME/bin/lsnrctl status $LISTENER|tee -a $LOGFILE
  Bmsg -l $LOGFILE -m " "
fi


if [ ! -f $ORACLE_HOME/network/admin/ldap.ora ]
then
  CMD="cp -f $LDAPORAFILE $ORACLE_HOME/network/admin/ldap.ora"
  Bmsg -l $LOGFILE -m "$CMD"
  bash -c "$CMD"
  Bmsg -gl $LOGFILE -m "ldap.ora file created"
else
  Bmsg -gl $LOGFILE -m "ldap.ora file already exists"
fi

if [ ! -f $ORACLE_HOME/network/admin/sqlnet.ora ]
then
  CMD="cp -f $SQLNETORAFILE $ORACLE_HOME/network/admin/sqlnet.ora"
  Bmsg -l $LOGFILE -m "$CMD"
  bash -c "$CMD"
  Bmsg -gl $LOGFILE -m "sqlnet.ora file created"
else
  Bmsg -gl $LOGFILE -m "sqlnet.ora file already exists"
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Create TNS Alias
#-----------------------------------------------------------------------------------------------------------------
function createtnsalias()
{
   Bmsg -l $LOGFILE -m "$1"
   bash -c "$1"
   RC=$?
   if [ $RC -ne 0 ]; then
     Bmsg -rl $LOGFILE -m "TNS-Alias creation failed with RC=$RC"
   else
     Bmsg -gl $LOGFILE -m "TNS-Alias successfully created"
   fi
   return $RC
}

function createdbservice()
{
   Bmsg -l $LOGFILE -m "Create DB Service '$1'"
   ${ORACLE_HOME}/bin/sqlplus -s / as sysdba <<EOF | tee -a $LOGFILE
execute DBMS_SERVICE.CREATE_SERVICE(service_name=>'$1.unix.lan',network_name=>'$1.unix.lan');
execute DBMS_SERVICE.START_SERVICE('$1.unix.lan');
EOF
}

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort
#-----------------------------------------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Check if ORACLE_HOME is set
#-----------------------------------------------------------------------------------------------------------------
if [ "x" = "x${ORACLE_HOME}" ]; then
  Bmsg -rm "ORACLE_HOME not set. It must be set first!"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
while true; do
  case "$1" in
    -sid | --oracle_sid ) ORACLE_SID="$2";sid=1; shift 2 ;;
    -dgside | --data_guard_side ) DGUARDSIDE="$2";dgside=1; shift 2 ;;
    -dgs2host | --data_guard_s2host ) DGUARDS2HOST="$2";dgs2host=1; shift 2 ;;
    -comp | --compatible ) ICOMPATIBLE="$2";comp=1; shift 2 ;;
    -port | --listenerport ) PORT="$2";port=1; shift 2 ;;
    -oid | --oidservice ) OID="$2";oid=1; shift 2;;
    -char | --characterset ) CHARACTERSET="$2"; shift 2 ;;
    -nchar | --nationalcharacterset ) NATIONALCHARACTERSET="$2"; shift 2 ;;
    -tpl | --template ) TEMPLATENAME="$2";tpl=1; shift 2 ;;
    -bs | --db_block_size ) DB_BLOCK_SIZE="$2"; shift 2 ;;
    -redo | --redo_log_size ) REDOLOGSIZE="$2"; shift 2 ;;
    -nonetca | --skipnetca ) nonetca=1; shift 1 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

ORACLE_SID_LC=`echo $ORACLE_SID|tr 'A-Z' 'a-z'`
ORACLE_SID_UC=`echo $ORACLE_SID|tr 'a-z' 'A-Z'`
i=$((${#ORACLE_SID_LC}-1))
SIDSTAGE="${ORACLE_SID_LC:$i:1}"
DGUARDSIDE_LC=`echo $DGUARDSIDE|tr 'A-Z' 'a-z'`
DGUARDSIDE_UC=`echo $DGUARDSIDE|tr 'a-z' 'A-Z'`
DGUARDS2HOST_LC=`echo $DGUARDS2HOST|tr 'A-Z' 'a-z'`

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "x" == "x$sid" ]; then
  Bmsg -rm "-sid | --oracle_sid [option] is required"; echo ""; usage
fi
if [ "x" == "x$comp" ]; then
  Bmsg -rm "-comp | --compatible [option] is required"; echo ""; usage
fi
if [ "x" == "x$port" ] && [ "x" == "x$nonetca" ]; then
  Bmsg -rm "-port | --listenerport [option] is required"; echo ""; usage
fi
if [ "$dgside" == "1" ]; then
  #dataguard option used
  if [ "$DGUARDSIDE_LC" != "s1" -a "$DGUARDSIDE_LC" != "s2" ]; then
    Bmsg -rm "Wrong value for -dgside | --data_guard_side [option]. Values 's1' or 's2' are allowed only!"; echo ""; usage
  fi
  if [ "$DGUARDSIDE_LC" == "s1" -a "$dgs2host" != "1" ]; then
    Bmsg -rm "-dgs2host | --data_guard_s2host [option] is required if using --dgside s1"; echo ""; usage
  fi
fi

#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
OWNER="oracle"
GROUP="oinstall"

GDBNAME="${ORACLE_SID_UC}.unix.lan"
if [ "$dgside" == "1" ]; then
  DBUNIQUENAME_UC="${ORACLE_SID_UC}_${DGUARDSIDE_UC}"
else
  DBUNIQUENAME_UC="${ORACLE_SID_UC}"
fi
DBUNIQUENAME_LC=`echo $DBUNIQUENAME_UC|tr 'A-Z' 'a-z'`

LOCALTEMPLATE="${LOGDIR}/${SCRIPTNAME}_${ORACLE_SID_UC}.`date +%Y%m%d%H%M%S%N`.dbt"
TEMPLATENAME="${TEMPLATENAME-/app/oracle/bin/templates/dbca/BARM_general.dbt}"
NETCALOGFILE="${LOGDIR}/${SCRIPTNAME}_${ORACLE_SID_UC}_netca.`date +%Y%m%d%H%M%S%N`.log"
NETCARESPONSEFILE="/app/oracle/bin/templates/netca/BARM_netca.rsp"
LDAPORAFILE="/app/oracle/bin/templates/netca/BARM_ldap.ora"
SQLNETORAFILE="/app/oracle/bin/templates/netca/BARM_sqlnet.ora"
SYSPASSWORD="${ORACLE_SID_UC}_installpwd#1"
SYSTEMPASSWORD="${ORACLE_SID_UC}_installpwd#1"
STORAGETYPE="${STORAGETYPE-FS}"
CHARACTERSET="${CHARACTERSET-WE8ISO8859P15}"
NATIONALCHARACTERSET="${NATIONALCHARACTERSET-AL16UTF16}"
LISTENER="LISTENER_${ORACLE_SID_UC}"

DB_BLOCK_SIZE="${DB_BLOCK_SIZE-8}"
###INITPARAMS="db_block_size=${DB_BLOCK_SIZE},processes=${IPROCESSES},compatible=${ICOMPATIBLE},db_create_online_log_dest_2=${ORACLE_BASE}/fra/${ORACLE_SID_UC}/onlinelog,db_create_online_log_dest_1=${ORACLE_BASE}/data/${ORACLE_SID_UC}/onlinelog,db_create_file_dest=${ORACLE_BASE}/data"
INITPARAMS="compatible=${ICOMPATIBLE},db_unique_name=${DBUNIQUENAME_UC},db_name=${ORACLE_SID_UC}"

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
Bscriptstart -l $LOGFILE "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

##### Prepare Template #############
cp -f ${TEMPLATENAME} ${LOCALTEMPLATE}

##### Create Listener ##############
if [ "x" == "x$nonetca" ]; then
  Bmsg -1l $LOGFILE -m "Create Listener ..."
  createlistener
fi

##### Create Database ##############
Bmsg -1l $LOGFILE -m "Create Database ..."
MAINACTVERS=`basename $ORACLE_HOME|sed s/db//|cut -b -2`
if [ $MAINACTVERS -ge 18 ]
then
   DATAFILEDEST="/app/oracle/data"
   CMD="${ORACLE_HOME}/bin/dbca -silent -ignorePreReqs -createDatabase -templateName $LOCALTEMPLATE -gdbName $GDBNAME -sid $ORACLE_SID_UC -sysPassword $SYSPASSWORD -systemPassword $SYSTEMPASSWORD -storageType $STORAGETYPE -datafileDestination $DATAFILEDEST -databaseConfigType SINGLE -characterSet $CHARACTERSET -nationalCharacterSet $NATIONALCHARACTERSET -listeners $LISTENER -initParams $INITPARAMS"
else
   CMD="${ORACLE_HOME}/bin/dbca -silent -ignorePreReqs -createDatabase -templateName $LOCALTEMPLATE -gdbName $GDBNAME -sid $ORACLE_SID_UC -sysPassword $SYSPASSWORD -systemPassword $SYSTEMPASSWORD -storageType $STORAGETYPE -characterSet $CHARACTERSET -nationalCharacterSet $NATIONALCHARACTERSET -listeners $LISTENER -initParams $INITPARAMS"
fi
Bmsg -l $LOGFILE -m "$CMD"
Bmsg -bl $LOGFILE -m "Processing logfiles are written to $ORACLE_BASE/cfgtoollogs/dbca/$ORACLE_SID_UC"
bash -c "$CMD"
RC=$?

if [ $RC -ne 0 ]; then
  Bmsg -rl $LOGFILE -m "Database creation failed with RC=$RC"
  Bscriptend -l $LOGFILE
  exit $RC
fi

#laeuft die Instanz
#ps -ef|grep smon_$ORACLE_SID_UC|grep -v grep >/dev/null
INST_RUNNING=`((ps -ef|grep smon_$ORACLE_SID_UC|grep -v grep >/dev/null)&& echo "running")||echo "not running"`
#if [ $RC -ne 0 ]; then
if [ "$INST_RUNNING" != "running" ]; then
  Bmsg -rl $LOGFILE -m "instance not running!"
  Bmsg -rl $LOGFILE -m "have a look at the dbca logfile!"
  Bscriptend -l $LOGFILE
  exit 1
else
  Bmsg -gl $LOGFILE -m "Database successfully created"
  Bmsg -l $LOGFILE -m "SYSTEM Password: $SYSTEMPASSWORD"
  Bmsg -bl $LOGFILE -m "Remember reset default DBUser passwords!"
fi

##### Some DB Checks now    ########
Bmsg -1 -m "Some DB Checks now ..."
export ORACLE_SID=${ORACLE_SID_UC}
${ORACLE_HOME}/bin/sqlplus -s / as sysdba <<EOF | tee -a $LOGFILE
set lin 200 pagesize 50

prompt ### Backup SPfile > Pfile.save ##
create pfile='${ORACLE_HOME}/dbs/init${ORACLE_SID}.save' from spfile;

prompt ### Utlrp.sql Recompile Run   ###
@?/rdbms/admin/utlrp.sql

prompt ### Number invalid DB Objects ###
select count(1) from DBA_INVALID_OBJECTS;

prompt ### DBA_Registry Content      ###
col COMP_ID for a10
col COMP_NAME for a40
col SCHEMA for a10
col VERSION for a15
select COMP_ID,COMP_NAME,VERSION,STATUS,SCHEMA from dba_registry;

prompt ### NLS_Database_Parameters   ###
select * from nls_database_parameters;

prompt ### DB Users                  ###
col username for a15
col ACCOUNT_STATUS for a20
col DEFAULT_TABLESPACE for a18
col TEMPORARY_TABLESPACE for a20
col profile for a10
select USERNAME,ACCOUNT_STATUS,DEFAULT_TABLESPACE,TEMPORARY_TABLESPACE,PROFILE from dba_users order by 1,2;
EOF

##thi 03.06.2014
##### configure /etc/oratab ########
Bmsg -1 -m "configure /etc/oratab ..."
cat /etc/oratab|grep -v $ORACLE_SID_UC >/tmp/oratab
grep $ORACLE_SID_UC /etc/oratab|sed s/:N$/:Y/ >>/tmp/oratab
cp /tmp/oratab /etc/oratab
rm /tmp/oratab
##thi 03.06.2014

##mpils 05.05.2015 TNS Alias anlegen
##mpils 13.05.2015 only for single instance and not for data guard installation
if [ "x$oid" == "x1" ]; then
   TNSALIAS="-tnssrv $OID"
fi
set_LDAPSERVER
if [ "$dgside" == "1" -a "$DGUARDS2HOST_LC" != "unknown.barmenia.lan" ] # wirkliche DG-Umgebung
then
   # dataguard environment
   createdbservice "${ORACLE_SID_UC}_DG"
   createdbservice "BACKUP"
   if [ "$DGUARDSIDE_UC" == "S1" ]; then
      # nur beim Aufsetzten der primary (S1) side
      CMD="$BINDIR/ORAtnsService -opt add -ldapsrv $LDAPSERVER $TNSALIAS -dghost1 '${LONGHOST}' -dghost2 $DGUARDS2HOST_LC -sid '${ORACLE_SID}' -port '${PORT}' -dbsrv '${ORACLE_SID_UC}_DG.unix.lan' -desc 'database default tns-alias' -f"
      createtnsalias "$CMD"
      CMD="$BINDIR/ORAtnsService -opt add -ldapsrv $LDAPSERVER -tnssrv ${ORACLE_SID_UC}-BKP -dghost1 '${LONGHOST}' -dghost2 $DGUARDS2HOST_LC -sid '${ORACLE_SID}' -port '${PORT}' -dbsrv 'BACKUP.unix.lan' -desc 'database backup tns-alias' -f"
      createtnsalias "$CMD"
   fi
elif [ "$dgside" == "1" -a "$DGUARDS2HOST_LC" == "unknown.barmenia.lan" ] # Standard-Umgebung mit DG-Vorbereitung
then
   if [ "$DGUARDSIDE_UC" == "S1" ]; then
      CMD="$BINDIR/ORAtnsService -opt add -ldapsrv $LDAPSERVER $TNSALIAS -dghost1 '${LONGHOST}' -dghost2 $DGUARDS2HOST_LC -sid '${ORACLE_SID}' -port '${PORT}' -dbsrv '${ORACLE_SID_UC}_S1.unix.lan' -desc 'database default tns-alias' -f"
      createtnsalias "$CMD"
   fi
else
   # non dataguard environment
   CMD="$BINDIR/ORAtnsService -opt add -ldapsrv $LDAPSERVER $TNSALIAS -host '${LONGHOST}' -sid '${ORACLE_SID}' -port '${PORT}' -dbsrv '${ORACLE_SID}.unix.lan' -desc 'database default tns-alias' -f"
   createtnsalias "$CMD"
fi
##mpils 05.05.2015

##thi 20.08.2014
##### configure orahosts file ########
Bmsg -1 -m "configure /oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts ..."
if [ -f $ORAHOSTS ]
then
   echo "linux:${HOST}:ora${ORACLE_SID}:${ORACLE_SID}:y:${SIDSTAGE}:" >>$ORAHOSTS
else
   Bmsg -rl $LOGFILE -m "Datei $ORAHOSTS nicht gefunden!"
fi
##thi 20.08.2014
##thi 08.10.2015
Bmsg -1 -m "initialize automated creation of CTRL-M-jobs ..."
CTMSHOST=`grep CTMSHOST /opt/ctm_ag/pcmag1/ctm/data/CONFIG.dat|awk '{print $2}'|awk -F\. '{print $1}'|sed s/-//`
##thi 30.04.2016
Bmsg -1 -m "initialize automated configuration of foglight monitoring ..."
${ORACLE_HOME}/bin/sqlplus -s / as sysdba <<EOSQL
connect "BV\$AJC"/${PWDBVAJC}@dba-p
insert into ajc_data(task,datacenter,nodename,db_instance,dgside,lsnrport,record_created,mon_user)
values('create','$CTMSHOST','$HOST','$ORACLE_SID','$DGUARDSIDE_UC','$PORT',sysdate,'paomon');
exit;
EOSQL
##thi 30.04.2016
##thi 08.10.2015
#-----------------------------------------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------------------------------------
Bscriptend -l $LOGFILE
exit
