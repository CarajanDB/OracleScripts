#!/bin/bash
# ==================================================================================
#  File        : ORAflashback
#  Author      : Johannes Ahrends, Marcel Pils
#  Modified    :
#
#  Description : This script can set, get and lists Guaranteed Restore Points
#                or flashback an oracle database to an defined Guaranteed Restore Point.
#
#  Version     : 1.2
#
#  Attention   : This script must be started as user ORACLE
#
#  Change History:
#
#    1.0  2013-06-12  Pils           Created based on "flashback" script from J.Ahrends
#    1.1  2015-09-01  Pils           Changed to use RMAN for flashback databse
#    1.2  2018-01-15  Pils           changed pwddir location
#    1.3  2018-09-25  Smets          changed rcvcat to rcvcat-n
#
#-----------------------------------------------------------------------------------
#set -x
set +x

#-----------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
#HOST=`hostname -s`
#LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Set, get, lists (Guaranteed) Restore Points or flashback to it."
ORACLE_BASE="/app/oracle"
LOGDIR="/app/logs"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -sid                           Database Name"
echo "                -c <RestorePointName>          creates the restore point"
echo "                -g                             use restore point of type GUARANTEED"
echo "                -d {<RestorePointName> | ALL}  deletes the restore point"
echo "                                               (lists all restore points if given one not found)"
echo "                -l                             lists all defined restore points"
echo "                -f <RestorePointName>          flashback the database to restore point"
echo "              : -h                             help screen"
echo ""
echo "  Example     : $SCRIPTNAME -sid ORATST -l"
echo "                $SCRIPTNAME -sid ORATST -c BeforeBatchTest -g"
echo "                $SCRIPTNAME -sid ORATST -d BeforeBatchTest"
echo "                $SCRIPTNAME -sid ORATST -f BeforeBatchTest"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------
#     FUNCTION: Check if restore point exists
#-----------------------------------------------------------------------------------
function check_restorepoint() 
{
RPExist=$(sqlplus -s / as sysdba <<EOSQL
  set heading off
  SELECT count(*) FROM v\$restore_point WHERE NAME='$1';
  exit;
EOSQL
)
return $RPExist
}

#-----------------------------------------------------------------------------------
#     FUNCTION: Check if database runs in archive log mode
#-----------------------------------------------------------------------------------
function check_archlogmode() 
{
ARCHLOGMODE=$(sqlplus -s / as sysdba <<EOSQL
  set heading off
  select log_mode from v\$database;
  exit;
EOSQL
if [ "$ARCHLOGMODE" != "ARCHIVELOG" ]; then
  Bmsg -rm "v\$databse.log_mode = $ARCHLOGMODE"
  Bmsg -rm "database have to be run in archivelog mode!"
  Bscriptend; exit 1
fi
)
return $ARCHLOGACTIVE
}

#-----------------------------------------------------------------------------------
#     FUNCTION: Lists all restore points
#-----------------------------------------------------------------------------------
function get_restorepoint() 
{
if [ "$1" = "ALL" ]; then
  WHERECLAUSE=""
else
  WHERECLAUSE="where name='$RESTOREPOINT'"
fi
sqlplus -s / as sysdba <<EOSQL
    set heading on
    column name format a128
    column mb format 9G999G999
    column guaranted format a9
    column scn format 999999999999999
    SELECT name, to_char(time,'DD.MM.YYYY HH24:MI:SS') time,
           scn, STORAGE_SIZE/1024/1024 mb,
           GUARANTEE_FLASHBACK_DATABASE as guaranted 
      FROM v\$restore_point $WHERECLAUSE
     ORDER BY 2;
    exit
EOSQL
}

#-----------------------------------------------------------------------------------
#     FUNCTION: flashback database using sqlplus or rman
#-----------------------------------------------------------------------------------
function flashback_using_sqlplus()
{
  if [ "$1" == "printonly" ]; then
    Bmsg -bm "This actions have to be done...
SQL> shutdown immediate
SQL> startup mount
SQL> flashback database to restore point '$RESTOREPOINT'
SQL> alter database open resetlogs"
  else
    sqlplus -s / as sysdba <<EOSQL
    prompt
    prompt shutdown database ...
    shutdown immediate
    prompt
    prompt startup database in mount mode ...
    startup mount
    prompt
    prompt flashback database ...
    flashback database to restore point "$RESTOREPOINT";
    prompt
    prompt open database with resetlogs ...
    alter database open resetlogs;
    exit
EOSQL
  fi
}

function flashback_using_rman()
{
  if [ "$1" == "printonly" ]; then
    Bmsg -bm "This actions have to be done...
rman target \ catalog rman@rcvcat-n
RMAN> shutdown immediate
RMAN> startup mount
RAMN> flashback database to restore point $RESTOREPOINT
RMAN> alter database open resetlogs
RMAN> exit"
  else
    source $RMANPWDFILE
    rman target / <<EOF
    connect catalog rman/$PWDRMAN@rcvcat-n
    shutdown immediate;
    startup mount;
    flashback database to restore point '$RESTOREPOINT';
    alter database open resetlogs;
    exit
EOF
  fi
}

#-----------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort   
#-----------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------
#     Check if ORACLE_HOME is set
#-----------------------------------------------------------------------------------
if [ "x" = "x${ORACLE_HOME}" ]; then
  Bmsg -rm "ORACLE_HOME not set. It must be set first!"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------
GUARANTEE=""
while true; do
  case "$1" in
    -sid ) ORACLE_SID="$2";sid=1; shift 2 ;;
    -c ) RESTOREPOINT="$2";creategrp=1; shift 2 ;;
    -d ) RESTOREPOINT="$2";deletegrp=1; shift 2 ;;
    -g ) GUARANTEE="GUARANTEE FLASHBACK DATABASE";guarantee=1; shift 1 ;;
    -f ) RESTOREPOINT="$2";flashbackgrp=1; shift 2 ;;
    -l ) listgrp=1; shift 1 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-----------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------
if [ "x" == "x$sid" ]; then
  Bmsg -rm "-sid | --oracle_sid [option] is required"; echo ""; usage
fi
if [ "$guarantee" = "1" -a "$creategrp" = "0" ]; then
  bmsg -rm "Parameter -g only allowed if parameter -c is specified"; echo ""; usage
fi
if [ "$creategrp" = "1" ]||[ "$deletegrp" = "1" ]||[ "$flashbackgrp" = "1" ]; then
  if [ "x$RESTOREPOINT" = "x" ]; then
  Bmsg -rm "An <RestorePointName> is required!"; echo ""; usage
  fi
fi

#-----------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------
ORACLE_SID_LC=`echo $ORACLE_SID|tr 'A-Z' 'a-z'`
ORACLE_SID_UC=`echo $ORACLE_SID|tr 'a-z' 'A-Z'`
PWDDIR=/app/oracle/admin/etc/pwddir
RMANPWDFILE="${PWDDIR}/.pwdfile_db_rman"

#-----------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------
Bscriptstart "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

export ORACLE_SID=${ORACLE_SID_UC}

##### list all restore points ######
if [ "$listgrp" = "1" ]; then
  get_restorepoint "ALL"
fi

##### create a restore point #######
if [ "$creategrp" = "1" ]; then
  check_archlogmode
  check_restorepoint "$RESTOREPOINT"
  if [ $? -ne 0 ]; then
    Bmsg -rm "Restorepoint $RESTOREPOINT already exists"
    exit 1
  fi

  sqlplus -s / as sysdba <<EOSQL
  CREATE RESTORE POINT "$RESTOREPOINT" $GUARANTEE;
  exit
EOSQL
  get_restorepoint "$RESTOREPOINT"
fi

##### drop a restore point #########
if [ "$deletegrp" = "1" ]; then
  check_restorepoint "$RESTOREPOINT"
  if [ $? -eq 0 ] && [ "$RESTOREPOINT" != "ALL" ]; then
    Bmsg -rm "Restorepoint $RESTOREPOINT does not exist!\nThis are all restore points:"
    get_restorepoint "ALL"
    exit 1
  fi
  if  [ "$RESTOREPOINT" = "ALL" ]; then
    sqlplus -s / as sysdba <<EOSQL
    begin
    for i in (select name from v\$restore_point)
    loop
      execute immediate 'DROP RESTORE POINT "'||i.name||'"';
    end loop;
    end;
/
    exit
EOSQL
  else
  sqlplus -s / as sysdba <<EOSQL
  DROP RESTORE POINT "$RESTOREPOINT" ;
  exit
EOSQL
  fi
  Bmsg -bm "This restore points left over:"
  get_restorepoint "ALL"
fi
 
##### flashback to restore point ###
if [ "$flashbackgrp" = "1" ]; then
  check_archlogmode
  check_restorepoint "$RESTOREPOINT"
  if [ $? -eq 0 ]; then
    echo "Restorepoint $RESTOREPOINT does not exist"
    get_restorepoint "ALL"
    exit 1
  fi
  #flashback_using_sqlplus "printonly"
  flashback_using_rman "printonly"
  while true; do
    read -p "Do you want execute this steps {Y|N}?" yn
    case $yn in
       [Yy]* ) ANSWER=Y; break;;
       [Nn]* ) ANSWER=N; break;;
       * ) echo "Please answer Y or N.";;
    esac
  done
  if [ "$ANSWER" = "Y" ]; then
    #flashback_using_sqlplus 
    flashback_using_rman
  fi
fi

#-----------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------
Bscriptend 
exit

