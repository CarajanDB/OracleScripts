# @(#) ================================================================================================================
# @(#) File        : ORAdeploy
# @(#) Author      : Thorsten Thiel
# @(#) Modified    :
# @(#)
# @(#) Description : This script does all the things described after
# @(#)               http://lxwiki.unix.lan/wiki_root/dokuwiki/dokumentationen/doku.php?id=datenbanken:oracle:oradeploy#manual_zu_oradeploy
# @(#)
# @(#) Version     : 4.9
# @(#) Datum       : 01.07.2024
# @(#)
# @(#) Presumption : This script
# @(#)                1. must be started as user ORACLE
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)    0.1   2016-04-06  Thiel       Created
# @@(#)    0.2   2016-04-14  Thiel       changed option -v to optional, it used to be mandatory
# @@(#)                                  now will use newest version available if option is omitted
# @@(#)    0.3   2016-04-18  Thiel       changed option -p to optional
# @@(#)                                  if not provided DBPORT will be set to 1601
# @@(#)                                  Option -i only allowed in conjunction with dgside s1
# @@(#)    0.4   2016-04-29  Thiel       if option -m is given, options -n and -d are mandatory
# @@(#)    0.5   2016-05-23  Thiel       implemented optional parameter -b to provide database characterset
# @@(#)    0.6   2016-06-23  Thiel       invocation of ORArotate_pwd changed
# @@(#)    0.7   2016-07-08  Thiel       copy all PWD-Files to ~/bin
# @@(#)    0.8   2016-07-11  Thiel       implemented Option -o to provide OID-Service-Name for invocation of ORAcreatedb
# @@(#)    0.9   2016-07-14  Thiel       DNS-admins have different emailaddresses for UNIX.LAN and BARMENIA.LAN
# @@(#)                                  NBUMAILTO changed to storagebackup-support@barmenia.de, avoid using person's names
# @@(#)    1.0   2016-08-30  Thiel       added options -bn|--natchar to provide national characterset for invocation of ORAcreatedb
# @@(#)    1.1   2016-10-12  Thiel       added unix-pv@barmenia.de to CTMMAILTO
# @@(#)    1.2   2017-02-01  Thiel       added function check_digit
# @@(#)    1.3   2017-02-02  Thiel       kein Aufruf der Funktion usage bei Fehlersituationen, um bei Workflows die wirkliche
# @@(#)                                  Fehlermeldung mitzubekommen
# @@(#)    1.4   2017-02-03  Thiel       added option -w to define the waiting time when showing the desired running options before really begin
# @@(#)    1.5   2017-02-07  Thiel       invoking other ORA... programs need to be done by specifying correct PATH ($SCRIPTDIR)
# @@(#)                                  as in ssh sessions the PATH isn't complete
# @@(#)                                  changed email sending process due to wrong text display when program is invoked by ssh
# @@(#)    1.6   2017-05-07  Pils        added "ORAconfigdb_opt -sid $DBNAME -stage $SIDSTAGE"
# @@(#)    1.7   2017-05-19  Thiel       E-stage databases will be allowed on machines with ctm-k agent
# @@(#)                                  function proof_stages is directly called after getting SID-string
# @@(#)                                  email to ctm admins changed, it will now request change of lxoracle hostgroup
# @@(#)    1.8   2017-09-07  Thiel       changed datapatch invocation from $DBH/OPatch to $ORACLE_HOME/OPatch
# @@(#)    1.9   2017-09-08  Thiel       check if $SCRIPTDIR/templates/rman/BARM_rmancfg is executable
# @@(#)    2.0   2017-10-26  Thiel       generate suitable rmantab entry when using actifio backup
# @@(#)    2.1   2017-11-30  Thiel       now using ORAlib; using $DEFRCVCATOID when generating rmantab entry; $RMANTAB is defined in ORAlib
# @@(#)                                  to use variable $DEFRCVCATOID you have to call function det_def_rcvcatoid first
# @@(#)    2.2   05.01.2018  Thiel       function request_ctm_add is obsolete now, since we are using program CTMhostgroup to add new host
# @@(#)                                  to ctrl-m - hostgroup
# @@(#)    2.3   08.01.2018  Thiel       added function det_hostgroups and cfg_hostgrups to directly configure hostgroups in ctrl-m
# @@(#)    2.4   25.01.2018  Pils        changed pwddir location
# @@(#)    2.5   07.03.2018  Thiel       failed execution of ORAconfigdb_mand does not cause an error exit, only error correction message will be displayed
# @@(#)    2.6   08.03.2018  Thiel       minor change in header to fulfill needs of function log_header
# @@(#)    2.7   25.05.2018  Thiel       during the process of building the instance, until the rmantab entry is created, the new SID will be written to
# @@(#)                                  /app/oracle/admin/config/backup/under_construction (used by ORArmantab_hg)
# @@(#)                                  WIKI-Link angepasst
# @@(#)    2.8   17.09.2018  Thiel       determination of datapatch success has to be done with a different sql statement for 18c and higher
# @@(#)    2.9   26.11.2018  Wi          logger-info ORAcreateDB  und ACToracle CMD
# @@(#)    3.0   27.11 2018  Thiel       ACToracle new invocation format
# @@(#)    3.1   29.11.2018  Thiel       initial full backup even when actifio is used
# @@(#)    3.2   30.11.2018  Thiel       changed color to red for failed first actifio backup
# @@(#)                      Thiel       minor change building rmantab entry when actifio is used
# @@(#)    3.3   20.03.2019  Thiel       run function run_init_sqls before invoking datapatch to activate fix_controls set by initial sqls
# @@(#)    3.3.1             Thiel       before invoking ORAsetpasswords ORACLE environment has to be set again
# @@(#)    3.4   27.03.2019  Thiel       added function add_fix_controls
# @@(#)    3.5   17.03.2020  Thiel       added call of ORAmkAD_authwallet
# @@(#)    3.6   16.07.2021  HGE         deleted function check_digit; is provided by ORAlib
# @@(#)    3.7   28.07.2021  THI         deal with other fs structure on sas machines
# @@(#)    3.8   29.07.2021  THI         invoke ORAmakeEMconfig
# @@(#)    3.8.1 30.07.2021  THI         ORAmakeEMconfig needs a new option -a
# @@(#)    3.9   09.08.2021  THI         new function and dialog to deal with differences in compatible
# @@(#)                                  value derived from current version or parameter -c and template file
# @@(#)    4.0   25.01.2022  SMH         Re-Activate "ORAconfigdb_opt" which was commented out.
# @@(#)    4.1   14.04.2022  THI         show compatible parameters during wait
# @@(#)    4.1.1 14.04.2022  THI         always show compatible parameters during wait
# @@(#)    4.1.2 14.04.2022  THI         minor change in wait output
# @@(#)    4.1.3 14.04.2022  THI         do not derive compatible parameter from ORA_VERSION; use TEMPLATE
# @@(#)    4.1.4 14.04.2022  THI         exit with error, when no compatible parameter available
# @@(#)    4.1.5 09.02.2023  THI         adapted help text to actual needs
# @@(#)    4.1.6 09.02.2023  THI         make help text more clear
# @@(#)    4.2   13.02.2023  THI         enable alternative backup with COHESITY
# @@(#)    4.3   21.02.2023  THI         function config_huge_pages needs a parameter
# @@(#)    4.4   29.03.2023  THI         added functions to deal with mandatory FRA size
# @@(#)    4.5   29.06.2023  THI         omit error message when file under_construction not found
# @@(#)    4.6   18.08.2023  THI         changed call of COHrunORAbackup.sh
# @@(#)    4.7   03.01.2024  THI         do not call COHrunORAbackup.sh when register database failed
# @@(#)    4.8   09.04.2024  MPils       Added "" for Oracle Password
# @@(#)    4.9   01.07.2024  Jahr        Removed .sh from COHregisterORAserver.sh and COHrunORAbackup.sh script
# @@(#)    5.0   01.07.2024  MPils       Added [DATA|FRA]FILEDEST
# @(#) ================================================================================================================

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
source /app/oracle/bin/ORAlib
MAILTO="unix-dba@barmenia.de"
BARMLANMAILTO="linux-support@barmenia.de"
#BARMLANMAILTO=$MAILTO
UNIXLANMAILTO="dns-admins@barmenia.de"
#UNIXLANMAILTO=$MAILTO
NBUMAILTO="storagebackup-support@barmenia.de"
#NBUMAILTO=$MAILTO
CTMMAILTO="Dezentrale-Produktion@barmenia.de, unix-pv@barmenia.de"
#CTMMAILTO=$MAILTO
SENDER="unix-dba@barmenia.de"
USER="noreply"
SENDMAIL=/usr/sbin/sendmail
HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="does all the things described at

                http://lxwiki.unix.lan/wiki_root/dokuwiki/dokumentationen/doku.php?id=datenbanken:oracle:oradeploy#manual_zu_oradeploy
"
SCRIPTDIR=/app/oracle/bin
TEMPLATEDIR=$SCRIPTDIR/templates/dbca
ORACLE_BASE="/app/oracle"
NFSPWDDIR="/oranfs/share/ora_admin/SYSTEM/pwddir"
PWDDIR="/app/oracle/admin/etc/pwddir"
UC_FILE="/app/oracle/admin/config/backup/under_construction"

source $SCRIPTDIR/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
   echo ".bash_functions file not found!"
   exit $RC
fi

#notwendig fuer Aufruf per SSH vom Transferhost aus
#bei Aufruf ueber SSH ist der PATH nicht vollstaendig gesetzt
if [ -z $PATH ]
then
   if [ -s ~/.bashrc ]
   then
      source ~/.bashrc
   fi
fi

echo $PATH|grep ":/sbin:" >/dev/null
if [ $? -eq 1 ]
then
   PATH="$PATH:/sbin"
fi
#Notwendig fuer Aufruf per SSH vom Transferhost aus

WHAT="$SCRIPTDIR/what"
SCRIPTVERSION="`$WHAT $SCRIPTDIR/$SCRIPTNAME|grep 'Version     :'|awk '{print $3,$4,$5}'`"
SCRIPTDATE="`$WHAT $SCRIPTDIR/$SCRIPTNAME|grep 'Date        :'|awk '{print $3,$4,$5}'`"

Bmsg -m "# =============================================================================="
Bmsg -m "$SCRIPTNAME - $SCRIPTSHORTDESC"
Bmsg -m "# =============================================================================="
STARTTIME=`date +"%Y-%m-%d %k:%M:%S.%N"`
Bmsg -m "Start Time: $STARTTIME"

Logger
logger_info "$SCRIPTNAME gestartet"
LOGDATE=`date +"%Y%m%d"`
LOGFILE="/app/oracle/admin/log/${SCRIPTNAME}-${LOGDATE}.log"
Bmsg -bm "All actions are logged in $LOGFILE!"

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort
#-----------------------------------------------------------------------------------------------------------------
ACTIVE_USER=`id -un`
if [ "$ACTIVE_USER" != "oracle" ]; then
  MESSAGE="Script may not run as user $ACTIVE_USER, it must be started and run as oracle"
  Bmsg -rm "$MESSAGE"
  logger_fatal "$MESSAGE"
  RC=255
  MESSAGE="Error Code: ${RC}"
  Bmsg -rm "$MESSAGE"
  logger_fatal "$MESSAGE"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     START of FUNCTION SECTION
#-----------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
if [ $help -eq 1 ]
then
   RC=0
else
   RC=1
fi
echo ""
echo "  Command     : $SCRIPTNAME [$M_OS] $N_OS DBNAME [$V_OS ORAVERSION] $D_OS DGSIDE [$L_OS SIZEMB [$X_OS SIZEMB]] [$S_OS] [$I_OS [$P_OS DBPORT] [$B_OS CHARSET] [$BN_OS NCHARSET] $T_OS ORADBTEMPLATE $V2_OS <host>.<domain> [$C_OS COMP] [$R_OS SIZEMB]] [$A_OS [actifio|cohesity] $NP_OS [BB|BI|BC] $CN_OS [cohclu21|cohclu41]] [$W_OS] [$H_OS]"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : $M_OPT,        send email to DNS- and NBU-Team"
echo "                $N_OPT,         define ORACLE_SID"
echo "                $V_OPT,      define ORAVERSION, default newest version available (ORAclone_db -lv)"
echo "                $D_OPT,          define DataGuard side"
echo "                $L_OPT,         create logical volumes first SIZEMB"
echo "                $X_OPT,       extend FRA size SIZEMB"
echo "                $S_OPT,        install software first"
echo "                $I_OPT,      create listener, database and so on"
echo "                $P_OPT,            define listener port, default 1601"
echo "                $B_OPT,         define database characterset, default WE8ISO8859P15"
echo "                $BN_OPT,        define database national characterset, default AL16UTF16"
echo "                $T_OPT,        define ORADBTEMPLATE, default path is $SCRIPTDIR/templates/dbca"
echo "                $O_OPT,          define OID-Service name, default derived from ORACLE_SID"
echo "                $V2_OPT,        define DataGuard standby host <host>.<domain>"
echo "                $C_OPT,      define compatible parameter"
echo "                $R_OPT,         define recovery_file_dest_size SIZEMB"
echo "                $A_OPT,     alternative backup software [actifio|cohesity]"
echo "                $NP_OPT,     need of protection (SLA) [BB|BI|BC]"
echo "                $CN_OPT,      define cluster name [cohclu21|cohclu41]"
echo "                $W_OPT,            define waiting time in seconds before really begin"
echo "                $H_OPT,                help screen"
echo ""
echo "  Example     : create logical volumes ONLY"
echo "                ${SCRIPTNAME} $N_OS dgcut $D_OS s1 $L_OS 30000"
echo ""
echo "                create logical volumes, extend FRA fs with 5000M and install oracle software (version 121025)"
echo "                ${SCRIPTNAME} $N_OS dgcut $V_OS 121025 $D_OS s1 $L_OS 30000 $X_OS 5000 $S_OS"
echo ""
echo "                install newest oracle software ONLY"
echo "                ${SCRIPTNAME} $S_OS"
echo ""
echo "                send emails ONLY"
echo "                ${SCRIPTNAME} $M_OS $N_OS dgcut $D_OS s1"
echo ""
echo "                build database ONLY using database characterset AL32UTF8"
echo "                ${SCRIPTNAME} $N_OS dgcut $D_OS s1 $I_OS $P_OS 1601 $B_OS AL32UTF8 $T_OS BARM_12c_general.dbt $V2_OS lxsmu.unix.lan"
echo ""
echo "                send all mails required, create logical volumes, install newest oracle software and build database using characterset WE8ISO8859P15"
echo "                ${SCRIPTNAME} $M_OS $N_OS dgcut $D_OS s1 $L_OS 30000 $S_OS $I_OS $P_OS 1601 $T_OS BARM_12c_general.dbt $V2_OS lxsmu.unix.lan"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit $RC
}
#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: create logical volumes
#-----------------------------------------------------------------------------------------------------------------
function create_lv()
{
echo
MESSAGE="create logical volumes"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"

test_exist data
if [ $? -eq 0 ] # LV exists
then
   echo
   MESSAGE="Logical volumes already exist!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi

STRIPES=`sudo pvs|grep dbvg|wc -l`
if [ $STRIPES -eq 1 ]
then
   sudo /usr/local/sbin/ORAlvcreate -n $DBNAME -L $SIZEMB -s "$DGSIDE"
else
   sudo /usr/local/sbin/ORAlvcreate -n $DBNAME -L $SIZEMB -s "$DGSIDE" -i $STRIPES
fi
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Logical volumes creation failed!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: extend fra filesystem
#-----------------------------------------------------------------------------------------------------------------
function extend_fra()
{
echo
MESSAGE="extend fra filesystem"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
test_exist fra
if [ $? -eq 1 ] # LV does not exist
then
   echo
   MESSAGE="FRA-FS does not exist!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
sudo /usr/local/sbin/ORAlvextend -n $DBNAME -l fra -L $ADDFRA -s "$DGSIDE"
if [ $? -ne 0 ]
then
   echo
   MESSAGE="extention of FRA-fs with $ADDFRA MB failed!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: test existance of logical volumes
#-----------------------------------------------------------------------------------------------------------------
function test_exist()
{
case "$1" in
   data ) CHECKFS="_dbd_$DBNAME";;
    fra ) CHECKFS="_dbf_$DBNAME";;
      * ) echo
          MESSAGE="function test_exist needs paramter data or fra!"
          Bmsg -rm "$MESSAGE"
          logger_fatal "$MESSAGE"
          exit 1;;
esac

echo
MESSAGE="test existance of logical volumes"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
sudo lvs |grep -i "$CHECKFS" >/dev/null
return $?
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: create EM config file
#-----------------------------------------------------------------------------------------------------------------
function create_emdo()
{
echo
MESSAGE="create EM config file"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
$SCRIPTDIR/ORAmakeEMconfig -a add -m `hostname` -s $DBNAME -p $DBPORT -o $ORACLE_HOME
if [ $? -ne 0 ]
then
   echo
   MESSAGE="creation of EM config file failed!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
fi
MESSAGE="successfully created EM config file"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: install software
#-----------------------------------------------------------------------------------------------------------------
function install_sw()
{
echo
MESSAGE="install oracle software >$ORAVERSION<"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
$SCRIPTDIR/ORAclone_db -home $ORACLE_HOME
if [ $? -ne 0 ]
then
   echo
   MESSAGE="installation of oracle software >$ORAVERSION< failed!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
MESSAGE="successfully installed oracle software"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check software installation
#-----------------------------------------------------------------------------------------------------------------
function check_sw()
{
INVLOC=`grep inventory_loc /etc/oraInst.loc|awk -F= '{print $2}'`
INVXML="${INVLOC}/ContentsXML/inventory.xml"
grep $ORACLE_HOME $INVXML >/dev/null
if [ $? -ne 0 ]
then
   echo
   MESSAGE="given ORACLE_HOME $ORACLE_HOME not registered in $INVXML!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check filesystem existance
#-----------------------------------------------------------------------------------------------------------------
function check_fs()
{
DFLISTE="/tmp/df_liste_"`date +%s`
df -m >$DFLISTE
#pruefe auf SAS-Maschine
hostname -s|grep lxsas >/dev/null
if [ $? -eq 1 ] #keine SAS-Maschine
then
   NOSAS=1
   DATAFS="data/${DBNAME}_${DGSIDE}"
   FRAFS="fra/${DBNAME}_${DGSIDE}"
else
   NOSAS=0
   DATAFS="data"
   FRAFS="fra"
fi
grep $DATAFS $DFLISTE >/dev/null
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Filesystem $DATAFS does not exist!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   rm $DFLISTE
   exit 1
fi
grep $FRAFS $DFLISTE >/dev/null
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Filesystem $FRAFS does not exist!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   rm $DFLISTE
   exit 1
fi

#falls SAS-MAschine, Verzeichnisse anlegen
if [ $NOSAS -eq 0 ]
then
   mkdir ${DATAFILEDEST:-/app/oracle/data}/${DBNAME}_${DGSIDE}
   mkdir ${FRAFILEDEST:-/app/oracle/fra}/${DBNAME}_${DGSIDE}
fi
rm $DFLISTE
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check domain
#-----------------------------------------------------------------------------------------------------------------
function check_domain()
{
if [ $# -ne 1 ]
then
   echo
   MESSAGE="function check_domain requires an parameter!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
CHECKHOST=$1
CHECKDOMAIN="barmenia.lan unix.lan"
for DOM in $CHECKDOMAIN
do
   echo $CHECKHOST|grep $DOM >/dev/null
   if [ $? -eq 0 ] # domain gefunden
   then
      return
   fi
done
echo
MESSAGE="the hostname provided lacks the domain!"
Bmsg -rm "$MESSAGE"
logger_error "$MESSAGE"
exit 1
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check oracle error
#-----------------------------------------------------------------------------------------------------------------
chk_ora_err ()
{
OERR=`grep "ORA-" $SQLRESULT`

if [ "$OERR" != "" ]
then
   RC=1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check SLA
#-----------------------------------------------------------------------------------------------------------------
function check_sla()
{
#prueft, ob eine der SLAs BB, BI, oder BC eingegeben wurde
SLASTRIPPED=`echo $SLA|sed s/[0-9]/''/g`
GRPNR=`echo $SLA|sed s/[A-Z]/''/g`
if [ "$SLASTRIPPED" != "BB" -a "$SLASTRIPPED" != "BI" -a "$SLASTRIPPED" != "BC" ]
then
   MESSAGE="parameter SLA should be BB, BI or BC; found >${SLASTRIPPED}<!"
   Bmsg -rm "$MESSAGE" 2>&1
   logger_error "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check cluster name
#-----------------------------------------------------------------------------------------------------------------
function check_cluster()
{
#prueft, ob einer der Clusternamen cohclu21 oder cohclu41 eingegeben wurde
if [ "$CLUSTER" != "cohclu21" -a "$CLUSTER" != "cohclu41" ]
then
   MESSAGE="parameter CLUSTER should be cohclu21 or cohclu41; found >${CLUSTER}<!"
   Bmsg -rm "$MESSAGE" 2>&1
   logger_error "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check backup software
#-----------------------------------------------------------------------------------------------------------------
function check_bkpsw()
{
#prueft, ob actifio oder cohesity eingegeben wurde
if [ "$BKPSW" != "ACTIFIO" -a "$BKPSW" != "COHESITY" ]
then
   MESSAGE="parameter BKPSW should be ACTIFIO or COHESITY; found >${BKPSW}<!"
   Bmsg -rm "$MESSAGE" 2>&1
   logger_error "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check input of ORADBTEMPLATE
#-----------------------------------------------------------------------------------------------------------------
function set_n_check_template()
{
#falls das eingegeben ORADBTEMPLATE keinen Pfad enthaelt wird der Standardpfad vorangestellt
DIR=`dirname $ORADBTEMPLATE`
if [ "$DIR" == "." ]
then
   ORADBTEMPLATE="${TEMPLATEDIR}/${ORADBTEMPLATE}"
fi

#Existenz des Templates pruefen
if [ ! -s $ORADBTEMPLATE ]
then
   MESSAGE="template $ORADBTEMPLATE not found!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION adjust addfra size
#-----------------------------------------------------------------------------------------------------------------
function adj_addfra_size()
{
echo
MESSAGE="adjust addfra size"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"

MESSAGE="FRA size would be $FRASIZE_PLANADD!
that's to small for Oracle version $VERS!"

Bmsg -rm "$MESSAGE"
logger_error "$MESSAGE"
ADDFRA=`expr $FRASIZE_MAND - $FRASIZE_PLAN`
extfs=1
MESSAGE="ADDFRA will be adjusted to $ADDFRA MB!"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
return
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check addfra size
#-----------------------------------------------------------------------------------------------------------------
function check_addfra_size()
{
echo
MESSAGE="check addfra size"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
FRASIZE_PLAN=`expr $SIZEMB / 4` # wird von ORAlvcreate so berechnet
if [ "x$extfs" == 'x1' ]
then
   FRASIZE_PLANADD=`expr $FRASIZE_PLAN + $ADDFRA`
else
   FRASIZE_PLANADD=$FRASIZE_PLAN
fi
if [ $FRASIZE_PLANADD -lt $FRASIZE_MAND ]
then
   adj_addfra_size
fi
return
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION determine mandatory fra size
#-----------------------------------------------------------------------------------------------------------------
function det_needed_fra_size()
{
echo
MESSAGE="determine mandatory fra size"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
#check 'new' release format
echo $VERS|grep '_' >/dev/null
if [ $? -eq 0 ]
then
   RUNAME=`echo $VERS|awk -F_ '{print $2}'`
#FRAsize >= 19G is mandatory since RU 230117
   if [ $RUNAME -ge 230117 ]
   then
      FRASIZE_MAND=19456 # size in MB
   else
      FRASIZE_MAND=8192
   fi
   if [ "x$crlv" == "x1" ] # FS will be created
   then
      check_addfra_size
#   else # FS exist already
#      det_curr_fra_size
   fi
fi
#echo "FRASIZE_MAND: $FRASIZE_MAND#"
return
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check input of ORAVERSION
#-----------------------------------------------------------------------------------------------------------------
function check_version()
{
echo
MESSAGE="check input of ORAVERSION"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
VERSIONS=$($SCRIPTDIR/ORAclone_db -lv)
if [ $? -ne 0 ]
then
   echo
   MESSAGE="could not retrieve available ORACLE versions!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
for VERS in $VERSIONS
do
   if [ "$VERS" == "$ORAVERSION" ]
   then
      MAINVERS=`echo $VERS|cut -b -2`  # 1. - 2. Stelle
      MINORVERS=`echo $VERS|cut -b 3`  # 3. Stelle
      ORACLE_HOME="/app/oracle/product/${MAINVERS}.${MINORVERS}.0/db${VERS}"
      return
   fi
done
#keine passende Version gefunden
MESSAGE="no oracle clone image of version $ORAVERSION found!"
Bmsg -rm "$MESSAGE"
logger_error "$MESSAGE"
echo
MESSAGE="you may use >ORAclone_db -lv< to retrieve available versions"
Bmsg -bm "$MESSAGE"
logger_error "$MESSAGE"
MESSAGE="OR just omit option -v to install newest available patchlevel"
Bmsg -bm "$MESSAGE"
logger_error "$MESSAGE"
exit 1
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION make listener, database and oid services
#-----------------------------------------------------------------------------------------------------------------
function make_db_lsnr_oid()
{
check_fs
check_sw
export ORACLE_HOME=$ORACLE_HOME
if [ "x$oid" == "x1" ]
then
   ADD_OIDSRV=" -oid $OIDSRV"
else
   ADD_OIDSRV=""
fi
MESSAGE="invoking ORAcreatedb"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
grep $DBNAME $UC_FILE >/dev/null 2>&1
if [ $? -ne 0 ]
then
   echo "$DBNAME" >> $UC_FILE
fi
CMD="$SCRIPTDIR/ORAcreatedb -sid $DBNAME -comp $COMP -char $CHARSET -nchar $NATCHAR -port $DBPORT -tpl $ORADBTEMPLATE -dgside $DGSIDE -dgs2host $DGS2HOST $ADD_OIDSRV"
logger_info "$CMD"
bash -c "$CMD"
if [ $? -ne 0 ]
then
   MESSAGE="execution of ORAcreatedb failed!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION configure actifio backup
#-----------------------------------------------------------------------------------------------------------------
function config_actifio_backup()
{
MESSAGE="configuring $BKPSW backup"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
CMD="/app/oracle/bin/actifio/ACToracle -opt addDB -fqdn $LONGHOST -appname $DBNAME -sl $SLASTRIPPED"
logger_info "$CMD"
bash -c "$CMD"
if [ $? -ne 0 ]
then
   MESSAGE="execution of ACToracle failed!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
fi

RMANLOG="/tmp/change_rman_config.log"
rman target / log=$RMANLOG <<EORMAN >/dev/null
CONFIGURE ARCHIVELOG DELETION POLICY TO NONE;
CONFIGURE RETENTION POLICY TO RECOVERY WINDOW OF 14 DAYS;
EORMAN
RMANERR=`grep -e "^ORA-" -e "^RMAN-" $RMANLOG`
if [ $? -eq 0 ]
then
   MESSAGE="Fehler im RMAN-Ablauf!
$RMANERR"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   rm $RMANLOG
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION configure cohesity backup
#-----------------------------------------------------------------------------------------------------------------
function config_cohesity_backup()
{
MESSAGE="configuring $BKPSW backup"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
CMD="/app/oracle/bin/COHregisterORAserver -s $HOST -j $SLA -v $CLUSTER"
logger_info "$CMD"
bash -c "$CMD"
if [ $? -ne 0 ]
then
   MESSAGE="execution of COHregisterORAserver failed!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   COHREG=1
fi

RMANLOG="/tmp/change_rman_config.log"
rman target / log=$RMANLOG <<EORMAN >/dev/null
CONFIGURE ARCHIVELOG DELETION POLICY TO NONE;
CONFIGURE RETENTION POLICY TO RECOVERY WINDOW OF 14 DAYS;
EORMAN
RMANERR=`grep -e "^ORA-" -e "^RMAN-" $RMANLOG`
if [ $? -eq 0 ]
then
   MESSAGE="Fehler im RMAN-Ablauf!
$RMANERR"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   rm $RMANLOG
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION invoke datapatch
#-----------------------------------------------------------------------------------------------------------------
function invoke_datapatch()
{
. $SCRIPTDIR/dbset $DBNAME
if [ -z $ORACLE_HOME ]
then
   MESSAGE="after invoking >dbset< ORACLE_HOME is not set!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
cd $ORACLE_HOME/OPatch

MESSAGE="bouncing the database into upgrade mode"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
SQLRESULT=/tmp/result_sql1.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
spool $SQLRESULT;
shutdown immediate;
startup upgrade;
exit;
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
	 MESSAGE="$MESSAGE failed!"
	 Bmsg -rm "$MESSAGE"
         logger_fatal "$MESSAGE"
	 exit 1
fi
rm $SQLRESULT

MESSAGE="execute datapatch"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
datapatch -verbose #gibt es auswertbare Fehlermöglichkeiten?

#fix_controls einrichten
add_fix_controls

MESSAGE="bouncing the database into normal mode"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
SQLRESULT=/tmp/result_sql2.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
spool $SQLRESULT;
shutdown immediate;
startup;
exit;
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
   MESSAGE="$MESSAGE failed!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
rm $SQLRESULT

MESSAGE="show datapatch success"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
if [ $MAINVERS -gt 12 ]
then
   SQL_STMT='select PATCH_ID,TARGET_VERSION,STATUS,DESCRIPTION,ACTION_TIME FROM dba_registry_sqlpatch order by action_time;'
else
   SQL_STMT='SELECT patch_id, version, status, bundle_id, bundle_series FROM dba_registry_sqlpatch order by action_time;'
fi
SQLRESULT=/tmp/result_sql3.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
column action_time format a30
column description format a60
set linesize 160
spool $SQLRESULT;
$SQL_STMT
exit
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
   MESSAGE="cannot ${MESSAGE}!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
else
   cat $SQLRESULT
fi
rm $SQLRESULT
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION add fix_controls
#-----------------------------------------------------------------------------------------------------------------
function add_fix_controls()
{
echo
MESSAGE="add fix_controls"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
SQLRESULT=/tmp/result_sql6.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
set linesize 160
spool $SQLRESULT;
execute dbms_optim_bundle.enable_optim_fixes('ON','BOTH', 'YES');
exit;
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
   MESSAGE="cannot ${MESSAGE}!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   cat $SQLRESULT
fi
rm $SQLRESULT
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION run initial sqls
#-----------------------------------------------------------------------------------------------------------------
function run_init_sqls()
{
#mandatory sqls
$SCRIPTDIR/ORAconfigdb_mand -sid $DBNAME
if [ $? -ne 0 ]
then
   MESSAGE="executing mandatory initial scripts failed!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   MESSAGE="execute >$SCRIPTDIR/ORAconfigdb_mand -sid $DBNAME< to fulfill installation task!"
   Bmsg -gm "$MESSAGE"
   logger_info "$MESSAGE"
fi

#optinal sqls
#ORAconfigdb_opt -sid $DBNAME <<EOIN
#Y
#Y
#N
#N
#Y
#EOIN

$SCRIPTDIR/ORAconfigdb_opt -sid $DBNAME -stage $SIDSTAGE
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION set standard passwords
#-----------------------------------------------------------------------------------------------------------------
function set_standard_pwds
{
. $SCRIPTDIR/dbset $DBNAME >/dev/null
$SCRIPTDIR/ORAsetpasswords -sid $DBNAME
if [ $? -ne 0 ]
then
   MESSAGE="setting initial passwords failed!"
   Bmsg -gm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION rotate sys and system passwords
#-----------------------------------------------------------------------------------------------------------------
function rotate_sys_pwd
{
for ACC in sys system
do
   $SCRIPTDIR/ORArotate_pwd -sid $DBNAME -acc $ACC
   if [ $? -ne 0 ]
   then
      MESSAGE="rotating passwords for $ACC failed!"
      Bmsg -gm "$MESSAGE"
      logger_fatal "$MESSAGE"
      exit 1
   fi
done
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION configure backup environment and do first full backup
#-----------------------------------------------------------------------------------------------------------------
function first_backup()
{
if [ ! -x $SCRIPTDIR/templates/rman/BARM_rmancfg ]
then
   echo "$SCRIPTDIR/templates/rman/BARM_rmancfg not executable!"| tee -a $LOG
else
   $SCRIPTDIR/templates/rman/BARM_rmancfg
   if [ $? -ne 0 ]
   then
      echo "Fehler bei der Ausfuehrung von $SCRIPTDIR/templates/rman/BARM_rmancfg!"| tee -a $LOG
   fi
fi

if [ ! -f $RMANTAB ]
then
   cp -p $SCRIPTDIR/templates/rman/sample_rmantab $RMANTAB
fi
if [ "x$abkp" == "x1" ]
then
   if [ "$BKPSW" == 'ACTIFIO' ]
   then
      echo "${DBNAME}:online:actifio:rman" >>$RMANTAB
      MESSAGE="executing first full backup"
      Bmsg -gm "$MESSAGE"
      logger_info "$MESSAGE"
      CMD="/app/oracle/bin/actifio/ACToracle -opt runBackup -bkptype DB -fqdn $LONGHOST -appname $DBNAME"
      logger_info "$CMD"
      bash -c "$CMD"
      if [ $? -ne 0 ]
      then
         MESSAGE="first full backup failed!"
         Bmsg -rm "$MESSAGE"
         logger_info "$MESSAGE"
      fi
   else #BKPSW ist Cohesity
      if [ $COHREG -eq 0 ]
      then
         MESSAGE='running first COHESITY backup'
         Bmsg -gm "$MESSAGE"
         logger_info "$MESSAGE"
         CMD="/app/oracle/bin/COHrunORAbackup --sourcedb $DBNAME"
         bash -c "$CMD"
         if [ $? -ne 0 ]
         then
            MESSAGE="$MESSAGE failed!"
            Bmsg -rm "$MESSAGE"
            logger_info "$MESSAGE"
         fi
      fi

      MESSAGE="building RMANTAB"
      Bmsg -gm "$MESSAGE"
      logger_info "$MESSAGE"
      CMD="/app/oracle/bin/COHrmantab -v $CLUSTER"
      logger_info "$CMD"
      bash -c "$CMD"
      if [ $? -ne 0 ]
      then
         MESSAGE="$MESSAGE failed!"
         Bmsg -rm "$MESSAGE"
         logger_info "$MESSAGE"
      fi

   fi
else
   det_def_rcvcatoid
   echo "${DBNAME}:online:${DEFRCVCATOID}:rman" >>$RMANTAB
   ORArman -f $DBNAME
   if [ $? -ne 0 ]
   then
      MESSAGE="first full backup failed!"
      Bmsg -gm "$MESSAGE"
      logger_info "$MESSAGE"
#evtl mail an nbu-team wg. Aufnahme der Maschine in Policy ora_linux01
   fi
fi
#DBNAME aus UC_FILE entfernen
grep -v $DBNAME $UC_FILE >/tmp/uc_file.tmp
cp /tmp/uc_file.tmp $UC_FILE
rm /tmp/uc_file.tmp
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION enable block change tracking
#-----------------------------------------------------------------------------------------------------------------
function enable_block_change_tracking()
{
MESSAGE="enable block change tracking"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
SQLRESULT=/tmp/result_sql4.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
spool $SQLRESULT;
ALTER DATABASE ENABLE BLOCK CHANGE TRACKING USING FILE '' ;
exit;
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
   MESSAGE="cannot ${MESSAGE}!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
rm $SQLRESULT
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION set db_recovery_file_dest_size
#-----------------------------------------------------------------------------------------------------------------
function set_db_recovery_file_dest_size()
{
MESSAGE="set db_recovery_file_dest_size"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
SQLRESULT=/tmp/result_sql5.lst
$SQP <<EOSQL >/dev/null
connect / as sysdba
spool $SQLRESULT;
alter system set db_recovery_file_dest_size=${RFDS}M scope=both;
exit;
EOSQL

chk_ora_err
if [ $RC -eq 1 ]
then
   echo
   MESSAGE="cannot ${MESSAGE}!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
rm $SQLRESULT
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  run ORAeusreg to register database in oud for eus
#-----------------------------------------------------------------------------------------------------------------
function run_oraeusreg()
{
MESSAGE="invoking ORAeusreg"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
CMD="$SCRIPTDIR/ORAeusreg -sid $DBNAME -opt add"
logger_info "$CMD"
bash -c "$CMD"
if [ $? -ne 0 ]
then
   MESSAGE="registering database in OUD failed!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  request dns alias
#-----------------------------------------------------------------------------------------------------------------
function request_dns_alias()
{
SUBJECT="Einrichtung von DNS Aliases"
DOMAIN=`echo $LONGHOST|cut -d \. -f 2,3`
if [ "$DOMAIN" == "barmenia.lan" ]
then
   DNSMAILTO=$BARMLANMAILTO
else
   DNSMAILTO=$UNIXLANMAILTO
fi
TEXT="Hallo Kollegen,\nbitte folgenden DNS Alias einrichten:\n\nora${DBNAME_LC}${DGSIDE_LC}.${DOMAIN}             ->     ${LONGHOST}\n\n\nRueckmeldung bitte als Antwort auf diese Mail.\n\nVielen Dank.\n\nGruss,\ndie DB-Admins\nTel. 3745\n"
MAIL_TXT="Subject: $SUBJECT\nFrom: $SENDER\nTo: $DNSMAILTO,$MAILTO\n\n$TEXT"
echo -e $MAIL_TXT | $SENDMAIL -t
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Mail zur $SUBJECT konnte nicht versendet werden!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   echo
   MESSAGE="Mail zur $SUBJECT erfolgreich versandt"
   Bmsg -gm "$MESSAGE"
   logger_info "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  request addition to nbu policy
#-----------------------------------------------------------------------------------------------------------------
function request_nbu_policy_add()
{
NBUPOLICY="ora_linux01"
SUBJECT="Einrichtung eines Linux-Hosts in NetBackup Policy"
TEXT="Hallo Kollegen,\nbitte folgenden Linux Host in die angegebene NetBackup Policy aufnehmen.\n\nNBU Policy              Linux Host\n----------              ----------\n$NBUPOLICY             $LONGHOST\n\n\nBitte auch daran denken die Universal-Altnames-Datei fuer ORACLE-Linux-Systeme zu pflegen!\n\n\nRueckmeldung bitte per Antwort auf diese Mail.\n\n\nVielen Dank.\n\nGruss,\ndie DB-Admins\nTel. 3745\n"
MAIL_TXT="Subject: $SUBJECT\nFrom: $SENDER\nTo: $NBUMAILTO,$MAILTO\n\n$TEXT"
echo -e $MAIL_TXT | $SENDMAIL -t
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Mail zur $SUBJECT konnte nicht versendet werden!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   echo
   MESSAGE="Mail zur $SUBJECT erfolgreich versandt"
   Bmsg -gm "$MESSAGE"
   logger_info "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  proof stages
# compare stages of ORACLE_SID and CTM environment
#-----------------------------------------------------------------------------------------------------------------
function proof_stages()
{
MESSAGE="compare stages of ORACLE_SID and CTM environment"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
det_ctm_env
det_stage_by_sid
if [ "$SIDSTAGE" != "$CTMSTAGE" ]
then
   if ! [ "$SIDSTAGE" == "E" -a "$CTMSTAGE" == "K" ] # E-Datenbanken auf K-CTM-Agenten erlaubt
   then
      MESSAGE="stages derived from ORACLE_SID and ctm environment differ!
the last character of the ORACLE_SID >$SIDSTAGE< has to resemble the stage >$CTMSTAGE< in the ctm environment!"
      Bmsg -rm "$MESSAGE"
      logger_error "$MESSAGE"
      exit 1
   fi
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  determine stage by ORACLE_SID
# last character of ORACLE_SID has to be P I F K or E
#-----------------------------------------------------------------------------------------------------------------
function det_stage_by_sid()
{
MESSAGE="determine stage by ORACLE_SID"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
i=$((${#DBNAME}-1))
SIDSTAGE="${DBNAME:$i:1}"
return
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  determine ctrl-m environment
#-----------------------------------------------------------------------------------------------------------------
function det_ctm_env()
{
MESSAGE="determine ctrl-m environment"
Bmsg -gm "$MESSAGE"
logger_info "$MESSAGE"
CTMCONFIG=/opt/ctm_ag/pcmag1/ctm/data/CONFIG.dat
if [ ! -s $CTMCONFIG ]
then
   MESSAGE="The CTRL-M environment is not defined correctly!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   MESSAGE="The config file $CTMCONFIG does not exist!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   return
else
   CTMENV=`grep CTMSHOST /opt/ctm_ag/pcmag1/ctm/data/CONFIG.dat|awk '{print $2}'|awk -F\. '{print $1}'`
   CTMSTAGE=`echo $CTMENV|sed s/"ctms-"//|tr [a-z] [A-Z]`
   CTMSTAGE_LC=`echo $CTMSTAGE|tr [A-Z] [a-z]`
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  request addition to ctrl-m
#-----------------------------------------------------------------------------------------------------------------
function request_ctm_add()
{
det_ctm_env
SUBJECT="Einrichtung einer Linux-VM in Control-M"
DOMAIN=`echo $LONGHOST|cut -d \. -f 2,3`
TEXT="Hallo Kollegen,\n\nbitte die Linux-VM        $LONGHOST\nim Control-M in           $CTMENV\neinrichten und in der Hostgroup lxoracle${CTMSTAGE_LC} einpflegen.\n\n\nRueckmeldung bitte als Antwort auf diese Mail.\n\nVielen Dank.\n\nGruss,\ndie DB-Admins\nTel. 3745\n"
MAIL_TXT="Subject: $SUBJECT\nFrom: $SENDER\nTo: $CTMMAILTO,$MAILTO\n\n$TEXT"
echo -e $MAIL_TXT | $SENDMAIL -t
if [ $? -ne 0 ]
then
   echo
   MESSAGE="Mail zur $SUBJECT konnte nicht versendet werden!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
else
   echo
   MESSAGE="Mail zur $SUBJECT erfolgreich versandt"
   Bmsg -gm "$MESSAGE"
   logger_info "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  get newest oracle version available
#-----------------------------------------------------------------------------------------------------------------
function get_newest_ora_vers()
{
ORAVERSION=$($SCRIPTDIR/ORAclone_db -lv|tail -1)
if [ $? -ne 0 ]
then
   echo
   MESSAGE="could not retrieve newest ORACLE version!"
   Bmsg -rm "$MESSAGE"
   logger_fatal "$MESSAGE"
   exit 1
fi
check_version # hier wird u.a. ORACLE_HOME gesetzt!
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION check oracle error
#-----------------------------------------------------------------------------------------------------------------
chk_ora_err ()
{
OERR=`grep "ORA-" $SQLRESULT`

if [ "$OERR" != "" ]
then
   RC=1
fi
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  determine hostgroups
#-----------------------------------------------------------------------------------------------------------------
function det_hostgroups()
{
if [ $# -ne 1 ]
then
   logger_error "Function >det_hostgroups< needs a parameter [default,actifio,netbackup]!"
   logger_error "exit ..."
   exit 1
fi
case "$1" in
    default | actifio | netbackup) KURZZWECK=$1;;
                                *) logger_error "Function >det_hostgroups< only knows parameters [default,actifio,netbackup]!"
                                   logger_error "exit ..."
                                   exit 1;;
esac

source $NFSPWDDIR/.pwdfile_db_bvcmdb   #liefert die Variable PWDBVCMDB
SQLRESULT=/tmp/sql_out.lst
${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL >/dev/null
connect BV\$CMDB/"${PWDBVCMDB}" @dba-p
set serverout on size unlimited feedback off
whenever sqlerror exit sql.sqlcode
spool $SQLRESULT
declare
    l_arraysize pls_integer  := 0;
begin
  select count(*)
  into l_arraysize
  from ctm_hostgroup_def
  where datacenter='ctms$CTMSTAGE_LC'
  and kurzzweck='$KURZZWECK'
  and rdbms='oracle';
  dbms_output.put_line('export ARRAYSIZE='||l_arraysize);
end;
/
EOSQL
RC=$?

chk_ora_err
if [ $RC -eq 1 ]
then
   logger_error "function >det_hostgroups< ARRAYSIZE could not be determined!"
   logger_error "exit ..."
   exit 1
else
   source $SQLRESULT
fi
rm $SQLRESULT

${ORACLE_HOME}/bin/sqlplus -s /nolog <<EOSQL >/dev/null
connect BV\$CMDB/"${PWDBVCMDB}" @dba-p
set serverout on size unlimited feedback off
whenever sqlerror exit sql.sqlcode
spool $SQLRESULT
declare
  CURSOR c_grpname is
  select grpname
  from ctm_hostgroup_def
  where datacenter='ctms$CTMSTAGE_LC'
  and kurzzweck='$KURZZWECK'
  and rdbms='oracle';
  type c_list is varray ($ARRAYSIZE) of ctm_hostgroup_def.grpname%type;
  name_list c_list := c_list();
  counter integer :=0;
begin
  dbms_output.put_line('export GRPNAME="');
  FOR N IN c_grpname LOOP
      counter := counter + 1;
      name_list.extend;
      name_list(counter)  := n.grpname;
      dbms_output.put_line(name_list(counter));
  END LOOP;
  dbms_output.put_line('"');
end;
/
EOSQL
RC=$?

chk_ora_err
if [ $RC -eq 1 ]
then
   logger_error "function >det_hostgroups< hostgroups could not be determined!"
else
   source $SQLRESULT
fi
rm $SQLRESULT
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  configure hostgroups
#-----------------------------------------------------------------------------------------------------------------
function cfg_hostgroups()
{
for GRP in $CTMGROUPS
do
   $SCRIPTDIR/CTMhostgroup -opt addhost -hgroup $GRP
done
}

#-----------------------------------------------------------------------------------------------------------------
# FUNCTION  get compatible from template file
#-----------------------------------------------------------------------------------------------------------------
function get_templ_compat()
{
TMPCOMP=`grep -i compatible "$ORADBTEMPLATE"|awk -F= '{print $NF}'|sed s#'/>'##|sed s/\"//g`
if [ $? -ne 0 ]
then
   logger_warn "could not determine compatible value from $ORADBTEMPLATE!"
   TMPCOMP=''
fi
TMPCOMPVERGL='aus Templatefile: '
#echo "TMPCOMP: $TMPCOMP#"
#echo "TMPCOMPVERGL: $TMPCOMPVERGL#"
return
}

#-----------------------------------------------------------------------------------------------------------------
#     END of FUNCTION SECTION
#-----------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
N_OS="-n"; N_OL="--db_name";       N_OPT="$N_OS[|$N_OL]"
P_OS="-p"; P_OL="--port";          P_OPT="$P_OS[|$P_OL]"
V_OS="-v"; V_OL="--oraversion";    V_OPT="$V_OS[|$V_OL]"
T_OS="-t"; T_OL="--template";      T_OPT="$T_OS[|$T_OL]"
S_OS="-s"; S_OL="--software";      S_OPT="$S_OS[|$S_OL]"
M_OS="-m"; M_OL="--sendmail";      M_OPT="$M_OS[|$M_OL]"
L_OS="-l"; L_OL="--logvols";       L_OPT="$L_OS[|$L_OL]"
X_OS="-x"; X_OL="--extentfra";     X_OPT="$X_OS[|$X_OL]"
D_OS="-d"; D_OL="--dgside";        D_OPT="$D_OS[|$D_OL]"
I_OS="-i"; I_OL="--initialize";    I_OPT="$I_OS[|$I_OL]"
B_OS="-b"; B_OL="--charset";       B_OPT="$B_OS[|$B_OL]"
BN_OS="-bn"; BN_OL="--natchar";    BN_OPT="$BN_OS[|$BN_OL]"
O_OS="-o"; O_OL="--oidsrv";        O_OPT="$O_OS[|$O_OL]"
V2_OS="-2"; V2_OL="--dgs2host";    V2_OPT="$V2_OS[|$V2_OL]"
C_OS="-c"; C_OL="--compatible";    C_OPT="$C_OS[|$C_OL]"
R_OS="-r"; R_OL="--recofds";       R_OPT="$R_OS[|$R_OL]"
A_OS="-a"; A_OL="--alternatbkp";   A_OPT="$A_OS[|$A_OL]"
NP_OS="-np"; NP_OL="--protection"; NP_OPT="$NP_OS[|$NP_OL]"
CN_OS="-cn"; CN_OL="--clustname";  CN_OPT="$CN_OS[|$CN_OL]"
W_OS="-w"; W_OL="--wait";          W_OPT="$W_OS[|$W_OL]"
H_OS="-h"; H_OL="-?";              H_OPT="$H_OS[|$H_OL]"
help=0
if [ $# -eq 0 ]
then
   usage
else
   while [ $# -gt 0 ]; do
     case "$1" in
         $N_OS | $N_OL ) DBNAME="$2"
                         DBNAME=`echo $DBNAME|tr [a-z] [A-Z]`
                         DBNAME_LC=`echo $DBNAME|tr [A-Z] [a-z]`
                         sid=1
                         proof_stages
                         shift 2;;
         $P_OS | $P_OL ) DBPORT="$2"
                         port=1
                         shift 2;;
         $B_OS | $B_OL ) CHARSET="$2"
                         CHARSET=`echo $CHARSET| tr [a-z] [A-Z]`
                         charset=1
                         shift 2;;
         $BN_OS | $BN_OL ) NATCHAR="$2"
                           NATCHAR=`echo $NATCHAR| tr [a-z] [A-Z]`
                           natchar=1
                           shift 2;;
         $V_OS | $V_OL ) ORAVERSION="$2"
                         check_version
                         vers=1
                         shift 2;;
         $T_OS | $T_OL ) ORADBTEMPLATE="$2"
                         set_n_check_template
                         temp=1
                         shift 2;;
         $S_OS | $S_OL ) instsw=1
                         shift 1;;
         $M_OS | $M_OL ) smail=1
                         shift 1;;
         $L_OS | $L_OL ) crlv=1
                         SIZEMB="$2"
                         check_digit $SIZEMB SIZEMB
                         shift 2;;
         $I_OS | $I_OL ) init=1
                         shift 1;;
         $D_OS | $D_OL ) DGSIDE="$2"
                         DGSIDE=`echo $DGSIDE|tr [a-z] [A-Z]`
                         DGSIDE_LC=`echo $DGSIDE|tr [A-Z] [a-z]`
                         dgs=1
                         shift 2;;
         $X_OS | $X_OL ) ADDFRA="$2"
                         check_digit $ADDFRA ADDFRA
                         extfs=1
                         shift 2;;
         $O_OS | $O_OL ) OIDSRV="$2"
                         oid=1
                         shift 2;;
         $V2_OS | $V2_OL} ) DGS2HOST="$2"
                         s2host=1
                         shift 2;;
         $C_OS | $C_OL ) COMP="$2"
                         comp=1
                         PRECOMPVERGL='mit -c mitgegeben:'
                         shift 2;;
         $R_OS | $R_OL ) RFDS="$2"
                         check_digit $RFDS RFDS
                         rfds=1
                         shift 2;;
         $A_OS | $A_OL ) BKPSW="$2"  #Backup-Software
                         BKPSW=`echo $BKPSW|tr [a-z] [A-Z]`
                         abkp=1
                         shift 2
                         check_bkpsw;;
         $NP_OS | $NP_OL ) SLA="$2"
                           SLA=`echo $SLA|tr [a-z] [A-Z]`
                           nprot=1
                           shift 2
                           check_sla;;
         $CN_OS | $CN_OL ) CLUSTER="$2"
                           CLUSTER=`echo $CLUSTER|tr [A-Z] [a-z]`
                           cnam=1
                           shift 2
                           check_cluster;;
         $W_OS | $W_OL ) WAIT="$2"
                         check_digit $WAIT WAIT
                         wait=1
                         shift 2;;
         $H_OS | $H_OL ) help=1
                         usage;;
         * )             usage;;
     esac
   done
fi

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the mandatory options
#-----------------------------------------------------------------------------------------------------------------
if [ "x$crlv" == "x1" -o "x$smail" == "x1" ] # create logical volumes
then
   if [ "x" == "x$sid" ]; then
     MESSAGE="$N_OPT Option is required!"
     Bmsg -rm "$MESSAGE"
     logger_error "$MESSAGE"
     exit 1
   fi
   if [ "x" == "x$dgs" ]; then
     MESSAGE="$D_OPT Option is required!"
     Bmsg -rm "$MESSAGE"
     logger_error "$MESSAGE"
     exit 1
   else
      if [ "$DGSIDE" != "S1" -a "$DGSIDE" != "S2" ]
      then
         MESSAGE="DataGuard side has to be >S1< or >S2<!"
         Bmsg -rm "$MESSAGE"
         logger_error "$MESSAGE"
         exit 1
      fi
   fi
fi
if [ "x$instsw" == "x1" ] # install oracle software
then
   if [ "x" == "x$vers" ]; then
     get_newest_ora_vers
   fi
fi
if [ "x$init" == "x1" ] # initialize database, listener and so on
then
   if [ "x" == "x$sid" ]; then
     MESSAGE="$N_OPT Option is required!"
     Bmsg -rm "$MESSAGE"
     logger_error "$MESSAGE"
     exit 1
   fi
   if [ "x" == "x$dgs" ]; then
     MESSAGE="$D_OPT Option is required!"
     Bmsg -rm "$MESSAGE"
     logger_error "$MESSAGE"
     exit 1
   else
      if [ "$DGSIDE" != "S1" ]
      then
         MESSAGE="database creation on $DGSIDE side is not allowed!"
         Bmsg -rm "$MESSAGE"
         logger_error "$MESSAGE"
         MESSAGE="you should use ORAstandby!"
         Bmsg -rm "$MESSAGE"
         logger_error "$MESSAGE"
         exit 1
      fi
   fi
fi

#-----------------------------------------------------------------------------------------------------------------
#     evaluate conditional options
#-----------------------------------------------------------------------------------------------------------------
if [ "x$extfs" == "x1" -a "x$crlv" == "x" ]
then
   echo
   MESSAGE="$X_OPT is allowed in conjunction with $L_OPT ONLY!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   MESSAGE="consider using ORAlvextend!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   exit 1
fi

if [ "x$init" == "x1" ]
then
   det_needed_fra_size
   if [ "x$s2host" == "x" ]
   then
      MESSAGE="to set up a primary database a secondary hostname has to be provided!"
      Bmsg -rm "$MESSAGE"
      logger_error "$MESSAGE"
      exit 1
   fi
   if [ "$DGSIDE" == "S1" -a "x$s2host" == "x" ]
   then
      MESSAGE="if you are on $DGSIDE side you have to provide dgs2host!
if you don't know the name yet, use >unknown.barmenia.lan<"
      Bmsg -rm "$MESSAGE"
      logger_error "$MESSAGE"
      exit 1
   fi
   if [ "$DGSIDE" == "S1" ]
   then
      check_domain $DGS2HOST
   fi
   if [ "x" == "x$port" ]; then
      DBPORT=1601
   fi
   if [ "x" == "x$charset" ]; then
      CHARSET="WE8ISO8859P15"
   fi
   if [ "x" == "x$natchar" ]; then
      NATCHAR="AL16UTF16"
   fi
   if [ "x" == "x$temp" ]; then
      MESSAGE="$T_OPT Option is required!"
      Bmsg -rm "$MESSAGE"
      logger_error "$MESSAGE"
      exit 1
   fi
   get_templ_compat
   if [ "x$comp" == "x" ]
   then
      if [ "$TMPCOMP" != '' ]
      then
         COMP=$TMPCOMP
      else
         MESSAGE='you have to provide a compatible parameter as template file does not!'
         logger_fatal "$MESSAGE"
         exit 1
      fi
   fi
fi

if [ "x$abkp" == 'x1' -a "x$nprot" == 'x' ]
then
   MESSAGE="$NP_OPT Option is required when alternative backup software is chosen!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   exit 1
fi

if [ "x$abkp" == 'x1' -a "$BKPSW" == 'COHESITY' -a "x$cnam" == 'x' ]
then
   MESSAGE="$CN_OPT Option is required when alternative backup software COHESITY is chosen!"
   Bmsg -rm "$MESSAGE"
   logger_error "$MESSAGE"
   exit 1
fi

#to be commented out
if [ "x$wait" == "x1" ]
then
   if [ "x$smail" == "x1" ]
   then
      echo "eMails versenden!"
   fi
   echo "DBNAME: $DBNAME#"
   echo "DBPORT: $DBPORT#"
   echo "ORACLE_HOME: $ORACLE_HOME#"
   echo "TEMPLATE: $ORADBTEMPLATE#"
   echo "DGSIDE: $DGSIDE#"
   if [ "x$instsw" == "x1" ]
   then
      echo "ORACLE-Software installieren!"
      echo "ORACLE-Version: $ORAVERSION#"
   fi
   if [ "x$crlv" == "x1" ]
   then
      echo "Logical Volumes anlegen!"
      echo "SIZEMB: $SIZEMB#"
      if [ "x$extfs" == "x1" ]
      then
         echo "FRA-FS vergroessern!"
         echo "ADDFRA: $ADDFRA#"
      fi
   fi
   if [ "x$init" == "x1" ]
   then
      echo "Listener, Datenbank und so weiter anlegen!"
      echo "DGS2HOST: $DGS2HOST#"
      if [ "x$charset" == "x1" -a "$CHARSET" != "WE8ISO8859P15" ]
      then
         echo "use non-default database characterset"
         echo "CHARSET: $CHARSET"
      fi
      if [ "x$natchar" == "x1" -a "$NATCHAR" != "AL16UTF16" ]
      then
         echo "use non-default national characterset"
         echo "NATCHAR: $NATCHAR"
      fi
      if [ "x$comp" == "x1" ]
      then
         echo "use non-default compatible parameter"
         echo "   COMP: $COMP"
         echo "TMPCOMP: $TMPCOMP"
      else
         echo "use default compatible parameter"
         echo "   COMP: $COMP"
      fi
      if [ "x$rfds" == "x1" ]
      then
         echo "set recovery_file_dest_size!"
         echo "RFDS: $RFDS#"
      fi
      if [ "x$oid" == "x1" ]
      then
         echo "OID-Service abweichend vom Default!"
         echo "OIDSRV: $OIDSRV#"
      fi
      if [ "x$abkp" == "x1" ]
      then
         echo "Backup mit $BKPSW einrichten!"
         echo "SLA: $SLA#"
         if [ "x$cnam" == "x1" ]
         then
            echo "Cluster: $CLUSTER"
         fi
      else
         echo "Backup mit RMAN einrichten!"
      fi
   fi
   echo
   echo "in $WAIT Sekunden geht's weiter!"
   echo "oder CTRL-C druecken!"
   sleep $WAIT
fi
#to be commented out

#exit $RC
#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------

#Passwortfiles von /oranfs/share/ora_admin/SYSTEM/pwddir
#nach ~/bin kopieren
logger_info "copy all passwordfiles!"
cp $NFSPWDDIR/.pwdfile* $PWDDIR/

#mails versenden
if [ "x$smail" == "x1" ]
then
#DNS-Alias beantragen
   request_dns_alias
#request addition to nbu policy
   request_nbu_policy_add
#request addition to ctrl-m
#  request_ctm_add
fi

#logical volumes anlegen
if [ "x$crlv" == "x1" ]
then
   create_lv
   if [ "x$extfs" == "x1" ]
   then
      extend_fra
   fi
fi

#software installieren
if [ "x$instsw" == "x1" ]
then
   install_sw
fi

#datenbank initialisieren
if [ "x$init" == "x1" ]
then
   if [ "x" == "x$vers" -a "x$instsw" == "x" ] # keine ORAVERSION angegeben UND es wird in diesem Programmlauf keine Software installiert
   then
     get_newest_ora_vers #setzt ORAVERSION
     check_sw            #prueft, ob die ORACLE-Version installiert ist
   fi
   if [ "$COMP" != "$TMPCOMP" -a "$TMPCOMP" != '' ]
   then
      echo
      logger_info "differences for compatible parameter!!!"
      COMPINDEX=0
      while [ "$COMPINDEX" != '1' -a "$COMPINDEX" != '2' ]
      do
         echo
         logger_info "${PRECOMPVERGL}   ${COMP}   --> 1"
         logger_info "${TMPCOMPVERGL}   ${TMPCOMP}   --> 2"
         echo
         logger_info "choose your version"
         logger_info "please, enter 1 or 2"
         read COMPINDEX
      done
      if [ $COMPINDEX -eq 2 ]
      then
         COMP=$TMPCOMP
      fi
      echo
      logger_info "you will use compatible=$COMP"
      echo
   fi
   if [ "$DGSIDE" == "S1" ] # Start S1-Initialisierung
   then
      SQP="${ORACLE_HOME}/bin/sqlplus -s /nolog"

#Erstellung von Datenbank, Listener und OID-Service
      make_db_lsnr_oid

#DB-Initialskripte
      run_init_sqls

#ADauth_wallet anlegen
      $SCRIPTDIR/ORAmkAD_authwallet

#Ausführung von datapach nach einer 12c Installation
      if [ $MAINVERS -gt 11 ]
      then
         invoke_datapatch
      fi

#Standard_Passworte
      set_standard_pwds

#SYS / SYSTEM Passwort
      rotate_sys_pwd

#create EMDO file
      create_emdo

#Initiales Backup
      if [ "x$abkp" == "x1" ]
      then
         if [ "$BKPSW" == 'ACTIFIO' ]
         then
            config_actifio_backup
         else #BKPSW ist Cohesity
            COHREG=0
            config_cohesity_backup
         fi
      fi
      first_backup

#Block Change Tracking enablen
      enable_block_change_tracking

#db_recovery_file_dest_size setzen
      if [ "x$rfds" == "x1" ]
      then
         set_db_recovery_file_dest_size
      fi

#register database in oud for eus
      run_oraeusreg

#configure huge pages
      config_huge_pages 0

#configure ctrlm hostgroups
      det_hostgroups default
      for GRP in $GRPNAME
      do
         CTMGROUPS=`echo "$CTMGROUPS $GRP"`
      done
      if [ "x$abkp" == "x1" ]
      then
         det_hostgroups actifio
         for GRP in $GRPNAME
         do
            CTMGROUPS=`echo "$CTMGROUPS $GRP"`
         done
      else
         det_hostgroups netbackup
         for GRP in $GRPNAME
         do
            CTMGROUPS=`echo "$CTMGROUPS $GRP"`
         done
      fi
      cfg_hostgroups
   fi
fi
