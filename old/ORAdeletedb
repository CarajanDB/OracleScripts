#!/bin/bash
# @(#) ================================================================================================================
# @(#)  File        : ORAdeletedb
# @(#)  Author      : Daniel Oberdick
# @(#)  Modified    : Marcel Pils
# @(#)
# @(#)  Description : This script deletes an Oracle database completely
# @(#)
# @(#)  Version     : 9.5
# @(#)  Date        : 05.09.2024
# @(#)
# @(#)
# @(#)  Attention   : This script must be started as user ORACLE
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)    1.0  2012-06-21  Oberdick     Created
# @@(#)    2.0  2013-05-07  Pils         Changed a lot of
# @@(#)    3.0  2014-10-21  Thiel        um Fehlermeldungen wie
# @@(#)                                  inter-device move failed: `/tmp/oratab.wip_2014-10-21-09-52-52' to `/etc/oratab'; unable to remove target: Permission denied
# @@(#)                                  zu vermeiden wurde der mv-Befehl durch cp & rm ersetzt
# @@(#)
# @@(#)    4.0  2015-29-04  Thiel        Liste der orahosts pflegen (/oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts)
# @@(#)    5.0  2015-05-08  Thiel        Datenbank aus dem RMAN-Katalog entfernen
# @@(#)    6.0  2015-10-08  Thiel        Tabelle in dbap zum automatisierten Loeschen der CTRL-M-Jobs mit Daten fuellen
# @@(#)    6.1  2015-10-08  Thiel        obsolete Archivelogs und Backup-Images auf Disk lÃ¶schen
# @@(#)    6.2  2016-04-04  Thiel        Aufraeumen der tnsnames.ora an DG-Eintraege angepasst
# @@(#)                                  Aufraeumen der listener.ora angepasst
# @@(#)    6.3  2016-04-05  Thiel        Loeschen obsoleter Dateien und Verzeichnisse vervollstaendigt
# @@(#)    6.4  2016-05-13  Thiel        Aenderungen an der Tabelle BV$AJC.AJC_DATA erfordern Anpassungen der SQL-Statements
# @@(#)                                  fuer den Eintrag des delete-Auftrags
# @@(#)    6.5  2017-09-01  Thiel        ORAeusreg aufrufen um die zu loeschende Instanz aus dem OUD zu entfernen
# @@(#)    6.6  2017-11-30  Thiel        ORAlib benutzen; Variable RCVCATOID bestimmen und benutzen
# @@(#)    6.7  2017-12-01  Thiel        kleine Aenderung bei der Nutzung der Variablen RCVCATOID
# @@(#)    6.8  2017-12-01  Thiel        ORACLE_HOME wird passend zu der zu loeschenden Instanz aus der ORATAB ausgelesen und gesetzt
# @@(#)    6.9  2018-01-25  Pils         changed pwddir location
# @@(#)    7.0  20.09.2018  Thiel        changed dbca call depending on installed oracle version
# @@(#)         21.09.2018  Thiel        added >-sysDBAUserName sys< to dbca call when oraversion ge 18
# @@(#)         21.09.2018  Thiel        rmantab cleanup has to be done in loop because of possible multiple entries
# @@(#)         21.09.2018  Thiel        minor change in rmantab cleanup loop
# @@(#)         21.09.2018  Thiel        minor change
# @@(#)         21.09.2018  Thiel        handle rmantab lines in reverse order
# @@(#)    7.1  04.10.2018  Thiel        when oraversion ge 18 use dbca-responsefile to avoid sys password in processlist
# @@(#)    7.2  29.11.2018  Thiel        remove wallet info from sqlnet.ora
# @@(#)    7.3  29.11.2018  Thiel        if last instance is deleted remove HOST from all ctm-hostgroups
# @@(#)                                  if it is not the last instance but the last occurence of actifio delete host from actifio-hostgroups
# @@(#)                                  .  .  .  .   .   .    .        .   .   .    .         .  rcvcat  .      .    .    NBU-hostgroups
# @@(#)    7.4  29.11.2018  Thiel        when actifio was used for backups, remove instance from actifio catalog
# @@(#)    7.5  30.11.2018  Thiel        function det_bkpapp is obsolete (reference det_used_rcvcatoid in ORAlib)
# @@(#)    7.6  30.11.2018  Thiel        remove obsolete OID-Services
# @@(#)    7.7  05.12.2018  Thiel        removing the host from hostgroups must be done before removing oratab entry
# @@(#)                                  minor change
# @@(#)    7.8  07.12.2018  Thiel        minor change in screen output when deleting database
# @@(#)    7.9  12.12.2018  Thiel        new params: -kor to keep oud registration, -kcg to keep CTM hostgroup entries
# @@(#)    8.0  12.12.2018  Thiel        changed wrong evaluation of $kor and $kcg
# @@(#)    8.1  03.08.2021  HGE          added call script ORAmakeEMconfig
# @@(#)    8.2  08.06.2022  THI          changed hostgroup determination
# @@(#)    8.3  12.07.2023  THI          if last instance is deleted remove /app/oracle/admin/etc/wallet
# @@(#)    8.4  22.09.2023  THI          if backup was done with cohesity, unregister host from cohesity
# @@(#)    8.5  25.09.2023  SMH          Change detection of TNS Services to remove (by Hostname) (TADBA-5370)
# @@(#)                                  Cleanup CMDB Tables by SID and HOST Names (TADBA-5371)
# @@(#)    8.6  26.09.2023  SMH          Changed TNS-Service dba-f for testing to dba-p
# @@(#)    8.7  02.10.2023  SMH          Chanded script parameter for COHunregisterORAserver.sh
# @@(#)    8.8  04.04.2024  Ahrends      changed Path for ORAtnsservice from ~ to $BINDIR
# @@(#)    8.9  21.05.2024  MPils        changed $BINDIR and ~/bin to $SCRIPTDIR, removed $PWDDIR already set in ORAlib
# @@(#)                                  removed $PWDDIR already set in ORAlib
# @@(#)                                  added double quotes around oracle user password
# @@(#)    9.0  01.07.2024  Ahrends      Removed .sh from COHunregisterORAserver.sh
# @@(#)    9.1  01.07.2024  MPils        Added [DATA|FRA]FILEDEST
# @@(#)    9.2  10.07.2024  Ahrends      changed Parameter for COHunregisterORAserver to --server (instead of sourcedb)
# @@(#)    9.3  06.08.2024  Ahrends      added COHunprotectOracle and ORABASELIB and ORABINLIB Variables
# @@(#)    9.4  03.09.2024  Ahrends      remove /oradata/* and /orafra/*
# @@(#)    9.5  05.09.2024  Ahrends      fixed 'ORAtnsService -opt remove'
# @@(#)                                  replaced $HOST by $LONGHOST and tns by tns+eus, fixed filter for CDBs
# @(#)-----------------------------------------------------------------------------------------------------------------
#

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
ORABASEDIR="${ORABASEDIR:-/app/oracle}"
ORABINDIR="${ORABINDIR:-/app/oracle/bin}"

source ${ORABINDIR}/ORAlib
#MAILTO="unix-dba@barmenia.de"
HOST=`hostname -s`
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Deletes database and listener; unregisters db from backup catalog and OUD"
ORACLE_BASE="${ORABASEDIR}"
LOGDIR="/app/logs"
LOGFILE="${LOGDIR}/${SCRIPTNAME}_`date +%Y%m%d%H%M%S%N`.log"
ORAHOSTS="/oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts"

source $PWDDIR/.pwdfile_db_rman
source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
 echo ".bash_functions file not found!"
 exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: Help routine
#-----------------------------------------------------------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME -sid <database name>"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -sid,                     Database Name "
echo "                -kor,                     keep OUD registration"
echo "                -kcg,                     keep CTM hostgroup entries"
echo "                -h,                       help screen"
echo ""
echo "  Example     : ORAdeletedb -sid ORATST"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit
}

#-----------------------------------------------------------------------------------------------------------------
#     Check if user is oracle, otherwise abort
#-----------------------------------------------------------------------------------------------------------------
if [ `id -un` != "oracle" ]; then
  Bmsg -rm "Script may not run as user `id -un`, it must be started and run as oracle"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Check if ORACLE_HOME is set
#-----------------------------------------------------------------------------------------------------------------
if [ "x" = "x${ORACLE_HOME}" ]; then
  Bmsg -rm "ORACLE_HOME not set. It must be set first!"
  RC=255
  Bmsg -rm "Error Code: ${RC}"
  exit $RC
fi

#-----------------------------------------------------------------------------------------------------------------
#     Get Parameter
#-----------------------------------------------------------------------------------------------------------------
kor=0
kcg=0
while true; do
  case "$1" in
    -sid | --oracle_sid ) ORACLE_SID="$2";sid=1; shift 2 ;;
    -kor | --keep_oud_reg ) kor=1; shift 1 ;;
    -kcg | --keep_ctm_hg ) kcg=1; shift 1 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

#-----------------------------------------------------------------------------------------------------------------
#     test to see if they gave the option
#-----------------------------------------------------------------------------------------------------------------
if [ "x" == "x$sid" ]; then
  Bmsg -rm "-sid | --oracle_sid [option] is required"; echo ""; usage
fi

#-----------------------------------------------------------------------------------------------------------------
#     Set Environment
#-----------------------------------------------------------------------------------------------------------------
ORACLE_SID_LC=`echo $ORACLE_SID|tr 'A-Z' 'a-z'`
ORACLE_SID_UC=`echo $ORACLE_SID|tr 'a-z' 'A-Z'`
OWNER="oracle"
GROUP="oinstall"
TNSNAMESORA="${ORACLE_HOME}/network/admin/tnsnames.ora"
TNSNAMESORALINES=8
LISTENERORA="${ORACLE_HOME}/network/admin/listener.ora"
LISTENER="LISTENER_${ORACLE_SID_UC}"
LISTENERORALINES=7
SQLNETORA="${ORACLE_HOME}/network/admin/sqlnet.ora"
ORATAB="/etc/oratab"
DBCALOGDIR="/app/oracle/cfgtoollogs/dbca/"
DIAGRDBMSDIR="/app/oracle/diag/rdbms/"
DATAFILEDEST="${DATAFILEDEST:-/app/oracle/data}"
FRAFILEDEST="${FRAFILEDEST:-/app/oracle/fra}"
DATADIR="${DATAFILEDEST}/${ORACLE_SID_UC}"
FRADIR="${FRAFILEDEST}/${ORACLE_SID_UC}"
RESPONSEFILE="/tmp/${SCRIPTNAME}_${ORACLE_SID_UC}.`date +%Y%m%d%H%M%S%N`.rsp"

#-----------------------------------------------------------------------------------------------------------------
#     Main program - start
#-----------------------------------------------------------------------------------------------------------------
Bscriptstart -l $LOGFILE "${SCRIPTNAME} - ${SCRIPTSHORTDESC}"

##### Backup Applikation bestimmen und Katalog aufraeumen ######
Bmsg -1l $LOGFILE -m "unregister database ${ORACLE_SID_UC} from recovery catalog ..."
export ORACLE_SID=${ORACLE_SID_UC}
ORACLE_HOME=`awk -v SID="$ORACLE_SID" -F: '$1==SID {print $2}' $ORATAB`
if [ "${ORACLE_HOME}x" == "x" ]
then
   Bmsg -rl $LOGFILE -m "Das ORACLE_HOME fuer die Instanz >$ORACLE_SID< konnte nicht bestimmt werden!"
   Bmsg -rl $LOGFILE -m "exit ..."
   exit 1
fi
export ORACLE_HOME
RMANCMDFILE=/tmp/unreg_db_${ORACLE_SID_UC}.cmd
RMANLOGFILE=/tmp/unreg_db_${ORACLE_SID_UC}.log
cat <<EORMAN >$RMANCMDFILE
unregister database noprompt;
exit;
EORMAN
det_used_rcvcatoid
if [ "${RCVCATOID}x" != "x" ]
then
   if [ "$RCVCATOID" == "actifio" ]
   then
      Bmsg -1l $LOGFILE -m "unregister database ${ORACLE_SID_UC} from actifio ..."
      CMD=`ACToracle -opt removeDB -fqdn "$HOST" -appname ${ORACLE_SID_UC}`
      bash -c "$CMD"
      if [ $? -ne 0 ]
      then
         Bmsg -rl $LOGFILE -m "Die Instanz ${ORACLE_SID_UC} konnte nicht aus dem Actifio-Katalog entfernt werden!"
      fi
   elif [ "$RCVCATOID" == 'cohesity' ]
   then
      Bmsg -1l $LOGFILE -m "unregister database ${ORACLE_SID_UC} from cohesity ..."
##      det_used_cohclu
#
# Unprotect Oracle Database
#
      CMD=`${ORABINDIR}/COHunprotectOracle --server "$HOST --sourcedb ${ORACLE_SID_UC}"`
      bash -c "$CMD"
      RC=$?
      if [ $RC -ne 0 ]
      then
         Bmsg -rl $LOGFILE -m "Die Datenbank $ORACLE_SID_UC konnte nicht aus der Protection Group geloescht werden "
         return $RC
      fi
      CMD=`${ORABINDIR}/COHunregisterORAserver --server "$HOST"`
      bash -c "$CMD"
      RC=$?
      if [ $RC -ne 0 ]
      then
         Bmsg -rl $LOGFILE -m "Der Rechner $HOST konnte nicht aus dem Cohesity-Katalog entfernt werden!"
         return $RC
      fi
   else
      RMANCMD="${ORACLE_HOME}/bin/rman target / catalog rman/${PWDRMAN}@${RCVCATOID} cmdfile=${RMANCMDFILE} log=${RMANLOGFILE}"
      Bmsg -bl $LOGFILE -m "${RMANCMD}"
      bash -c "$RMANCMD" >/dev/null 2>&1
      RC=$?
      if [ $RC -ne 0 ]
      then
        REFSTR="RMAN-20001: target database not found in recovery catalog"
        grep "$REFSTR" $RMANLOGFILE >/dev/null 2>&1
        if [ $? -eq 0 ] # DB NICHT in Katalog
        then
           echo
           Bmsg -gl $LOGFILE -m "Database ${ORACLE_SID_UC} not in catalog!"
        else # wirklicher Fehler
           echo
           Bmsg -rl $LOGFILE -m "unregistering database ${ORACLE_SID_UC} failed with RC=$RC"
           cat $RMANLOGFILE
        fi
      else
        echo
        Bmsg -gl $LOGFILE -m "Database $ORACLE_SID_UC successfully unregistered."
        rm $RMANLOGFILE $RMANCMDFILE
      fi
   fi
else
   Bmsg -bl $LOGFILE -m "der Typ des aktuell genutzten Catalogs konnte nicht ermittelt werden!"
fi

##### unregister instance from OUD ##############
if [ $kor -eq 0 ]
then
   Bmsg -1l $LOGFILE -m "unregister instance ${ORACLE_SID_UC} from OUD ..."
   CMD="${SCRIPTDIR}/ORAeusreg -sid ${ORACLE_SID_UC} -opt remove >> ${LOGFILE}"
   Bmsg -bl $LOGFILE -m "${CMD}"
   bash -c "$CMD"
   RC=$?
   if [ $RC -ne 0 ]
   then
      Bmsg -rl $LOGFILE -m "removing database $ORACLE_SID_UC from OUD failed with RC=$RC"
   else
      Bmsg -gl $LOGFILE -m "Database $ORACLE_SID_UC successfully removed from OUD"
   fi

   ##### remove obsolete OID-Services ##############
   # removes for this database on this host
   # - all TNS-Aliases defined without any dataguard entry
   # - eus db registration (sometimes 'ORAeusreg -opt remove' fail)
   Bmsg -1l $LOGFILE -m "remove obsolete OID-Services ..."
   CTMENV=`grep CTMSHOST /opt/ctm_ag/pcmag1/ctm/data/CONFIG.dat|awk '{print $2}'|awk -F\. '{print $1}'`
   CTMSTAGE=`echo $CTMENV|sed s/"ctms-"//|tr [a-z] [A-Z]`
  #  ORATNSSRVS=`${SCRIPTDIR}/ORAtnsService -opt list -type tns+eus -tnssrv "*" -filter "orclNetDescString=*${HOST}*"|grep -v -e '\-\-\-' -e 'Entries found'|awk -F= '{print $2}'|awk -F, '{print $1}'`
   ORATNSSRVS=`${SCRIPTDIR}/ORAtnsService -opt list -type tns+eus -tnssrv "*" -filter "orclNetDescString=*${LONGHOST}*"|grep '^cn='|awk -F= '{print $2}'|awk -F, '{print $1}'`
   for TNSENTRY in $ORATNSSRVS
   do
      COMPSID=`echo $TNSENTRY| sed s/-//|sed s/_//`
      # echo "$COMPSID" |grep $ORACLE_SID_UC >/dev/null 2>&1
      # mpils, 5.9.2024, added C to COMSID for SID in CDB environment
      echo "C${COMPSID}" |grep $ORACLE_SID_UC >/dev/null 2>&1
      if [ $? -eq 0 ]
      then
         CMD="${SCRIPTDIR}/ORAtnsService -opt remove -type tns+eus -tnssrv $TNSENTRY -f"
         bash -c "$CMD"
         if [ $? -eq 0 ]
         then
            Bmsg -gl $LOGFILE -m "OID-Service $TNSENTRY successfully removed"
         else
            Bmsg -rl $LOGFILE -m "removing OID-Service $TNSENTRY FAILED"
         fi
      fi
   done
fi

##### delete database ##############
Bmsg -1l $LOGFILE -m "Delete Database ${ORACLE_SID_UC} ..."
MAINACTVERS=`basename $ORACLE_HOME|sed s/db//|cut -b -2`
if [ $MAINACTVERS -ge 18 ]
then
   source $PWDDIR/.pwdfile_db_sys
   cat <<EOCAT >$RESPONSEFILE
responseFileVersion=/oracle/assistants/rspfmt_dbca_response_schema_v12.2.0

sysDBAUserName=sys
sysDBAPassword=$PWDSYS
EOCAT
   CMD="${ORACLE_HOME}/bin/dbca -silent -deleteDatabase -sourceDB ${ORACLE_SID_UC} -responseFile $RESPONSEFILE |tee -a ${LOGFILE}"
else
   CMD="${ORACLE_HOME}/bin/dbca -silent -deleteDatabase -sourceDB ${ORACLE_SID_UC} |tee -a ${LOGFILE}"
fi
Bmsg -bl $LOGFILE -m "${CMD}"
bash -c "$CMD"
RC=$?
if [ $RC -ne 0 ]
then
  Bmsg -rl $LOGFILE -m "Deleting database $ORACLE_SID_UC failed with RC=$RC"
else
  Bmsg -gl $LOGFILE -m "Database $ORACLE_SID_UC successfully deleted."
fi
rm $RESPONSEFILE 2>/dev/null

##### delete obsolete backup images and archivelogs ##############
Bmsg -1l $LOGFILE -m "delete obsolete backup images and archivelogs ..."
Bmsg -bl $LOGFILE -m "Following files and folders will be removed:"
CMD="rm -rf $FRADIR"
for i in $(find $FRADIR 2>/dev/null)
do
  CMD="rm -rf ${i}"
  echo $CMD | tee -a $LOGFILE
  bash -c "$CMD"
done

##### remove ctm-hostgroup entries ###

#is this the last instance on this host?
ORATABENTRIES=`grep "/app/oracle" /etc/oratab|grep -v "^#"|wc -l`
if [ $ORATABENTRIES -eq 0 ]
then
#remove host from all ctm-hostgroups
   if [ $kcg -eq 0 ]
   then
      Bmsg -1l $LOGFILE -m "remove ctm-hostgroup entries"
      HOSTGROUPS=`CTMhostgroup -opt listhg -hlist $HOST 2>/dev/null`
      for HGE in $HOSTGROUPS
      do
         CMD="CTMhostgroup -opt delhstfhg -hgroup $HGE -hlist $HOST"
         bash -c "$CMD"
         if [ $? -ne 0 ]
         then
            Bmsg -rl $LOGFILE -m "removing $HOST from hostgroup $HGE FAILED"
         else
            Bmsg -bl $LOGFILE -m "successfully removed from hostgroup $HGE"
         fi
      done
      CMD="CTMhostgroup -opt delhost -hlist $HOST"
      bash -c "$CMD"
      if [ $? -ne 0 ]
      then
         Bmsg -rl $LOGFILE -m "removing $HOST from ctm FAILED"
      else
         Bmsg -bl $LOGFILE -m "successfully removed $HOST from CTM"
      fi
   fi
#remove enterprise manager objects
   sh ORAmakeEMconfig -a del
#remove wallet
   if [ -d /app/oracle/admin/etc/wallet ]
   then
      rm -rf /app/oracle/admin/etc/wallet 2>/dev/null
   fi
else
#remove host only from backup hostgroups
#determine backup application
   if [ $kcg -eq 1 ]
   then
      det_used_rcvcatoid
#is this the last occurence of RCVCATOID used on this host?
      RCVCATOIDCOUNT=`grep $RCVCATOID ${RMANTAB}|grep -v "^#"|wc -l`
      if [ $RCVCATOIDCOUNT -eq 1 ]
      then
         if [ "$RCVCATOID" == "actifio" ]
         then
            ACTHG=`CTMhostgroup -opt listhg -hlist $HOST|grep -v "INFO -"|grep ACT`
            for HGE in $ACTHG
            do
               CMD="CTMhostgroup -opt delhstfhg -hgroup $HGE -hlist $HOST"
               bash -c "$CMD"
               if [ $? -ne 0 ]
               then
                  Bmsg -rl $LOGFILE -m "removing $HOST from hostgroup $HGE FAILED"
               else
                  Bmsg -bl $LOGFILE -m "successfully removed from hostgroup $HGE"
               fi
            done
         else
            NBUHG=`CTMhostgroup -opt listhg -hlist $HOST|grep -v "INFO -"|grep NBU`
            for HGE in $NBUHG
            do
               CMD="CTMhostgroup -opt delhstfhg -hgroup $HGE -hlist $HOST"
               bash -c "$CMD"
               if [ $? -ne 0 ]
               then
                  Bmsg -rl $LOGFILE -m "removing $HOST from hostgroup $HGE FAILED"
               else
                  Bmsg -bl $LOGFILE -m "successfully removed from hostgroup $HGE"
               fi
            done
         fi
      fi
   fi
fi

##### Cleanup oratab ##############
Bmsg -1l $LOGFILE -m "Cleanup ${ORATAB} ..."
Bmsg -bl $LOGFILE -m "Following lines will be removed"
TMPORATAB=/tmp/oratab.wip_`date +%Y-%m-%d-%H-%M-%S`
DBLINE=`grep -n "${ORACLE_SID_UC}:" ${ORATAB}|cut -d ":" -f1`
if [ "x$DBLINE" != "x" ]; then
  cp -f ${ORATAB} ${LOGDIR}/ORAdeletedb.`date +%Y%m%d%H%M%S%N`.oratab >> $LOGFILE
  cp -f ${ORATAB} ${TMPORATAB} >> $LOGFILE
  sed -n "${DBLINE},${DBLINE}p" ${TMPORATAB} | tee -a $LOGFILE
  sed -i "${DBLINE},${DBLINE}d" ${TMPORATAB} >> $LOGFILE
  cp $TMPORATAB $ORATAB
  rm $TMPORATAB
fi


##### Stop Listener ################
Bmsg -1l $LOGFILE -m "Stop Listener ${LISTENER} ..."
PSLISTENER=`ps -ef|grep ${LISTENER}|grep -v grep`
RC=$?
if [ $RC -ne 0 ]
then
  Bmsg -bl $LOGFILE -m "LISTENER ${LISTENER} not running"
else
  Bmsg -bl $LOGFILE -m "Stopping listener ${LISTENER}"
  PATHLISTENER=`echo ${PSLISTENER}|cut -d " " -f8`
  PROCLISTENER=`echo ${PSLISTENER}|cut -d " " -f2`
  LISTENER_PATH=`echo ${PATHLISTENER%%/bin/tnslsnr}`
  TNS_ADMIN=${LISTENER_PATH}/network/admin
  ${LISTENER_PATH}/bin/lsnrctl stop ${LISTENER} >> $LOGFILE
  RC=$?
    if [ $RC -ne 0 ]
    then
      Bmsg -rl $LOGFILE -m "Stopping listener failed. Killing it now!"
      kill -9 ${PROCLISTENER} >> $LOGFILE
      if [ $? -ne 0 ]; then
        Bmsg -rl $LOGFILE -m "Killing listener failed!"
      else
        Bmsg -gl $LOGFILE -m "Listener killed successfully."
      fi
    else
      Bmsg -gl $LOGFILE -m "Listener ${LISTENER} stopped successfully"
    fi
fi


###### Remove Listener ##############
Bmsg -1l $LOGFILE -m "Remove Listener from listener.ora ..."
Bmsg -bl $LOGFILE -m "Following lines will be removed"
Bmsg -bl $LOGFILE -m "from ${LISTENERORA}:"
LISTENERORAWIP="${LISTENERORA}.wip_`date +%Y-%m-%d-%H-%M-%S`"
cp -f ${LISTENERORA} ${LISTENERORA}.ORAdeletedb.`date +%Y-%m-%d-%H-%M-%S` >> $LOGFILE
cp -f ${LISTENERORA} ${LISTENERORAWIP}>> $LOGFILE

# Remove ADR Line
ADRSTARTNUM=`grep -n "^ADR_BASE_${LISTENER}[ =]" ${LISTENERORAWIP}|cut -d ":" -f1`
if [ "x$ADRSTARTNUM" != "x" ]; then
  ADRSTARTNUMPLUS1=$(expr ${ADRSTARTNUM} + 1)
  ADRFINALLINE=`cat -n $LISTENERORA|grep "^ *${ADRSTARTNUMPLUS1} *"|cut -f2`
  echo "${ADRFINALLINE}"|grep "^[ :blank: ]*$" >> /dev/null
  RC=$?
  if [ $RC -eq 0 ]; then
     ADRENDNUM=$ADRSTARTNUMPLUS1;
  else
     ADRENDNUM=$ADRSTARTNUM;
  fi;
  sed -n "${ADRSTARTNUM},${ADRENDNUM}p" ${LISTENERORAWIP} | tee -a $LOGFILE
  sed -i "${ADRSTARTNUM},${ADRENDNUM}d" ${LISTENERORAWIP} >> $LOGFILE
fi

# Remove Listener Lines

#Listener-Eintraege entfernen
COUNTA=`grep -n "${LISTENER}" $LISTENERORAWIP|cut -d ":" -f1`
for A in $COUNTA
do
   STARTNUM=`grep -n "${LISTENER}" $LISTENERORAWIP|cut -d ":" -f1|head -1`
   COUNTE=`grep -n "^  )" $LISTENERORAWIP|cut -d ":" -f1`
   for E in $COUNTE
   do
      if [ $E -gt $STARTNUM ]
      then
         ENDNUM=$E
         sed -n "${STARTNUM},${ENDNUM}p" ${LISTENERORAWIP}| tee -a $LOGFILE
         sed -i "${STARTNUM},${ENDNUM}d" ${LISTENERORAWIP} >> $LOGFILE 2>&1
         break
      else
         continue
      fi
   done
done

#Leerzeilen entfernen
COUNTL=`grep -n "^$" $LISTENERORAWIP|cut -d ":" -f1`
for MAXL in $COUNTL
do
   OLDL=1
   COUNTAKT=`grep -n "^$" $LISTENERORAWIP|cut -d ":" -f1`
   for AKTL in $COUNTAKT
   do
      DIFF=`expr ${AKTL} - ${OLDL}`
      if [ $DIFF -gt 1 ]
      then
         OLDL=$AKTL
      else
         sed -i "${OLDL},${OLDL}d" ${LISTENERORAWIP}
         break
      fi
   done
done

mv -f ${LISTENERORAWIP} ${LISTENERORA}


##### Cleanup tnsnames ###########
Bmsg -1l $LOGFILE -m "Cleanup tnsnames.ora ..."
Bmsg -bl $LOGFILE -m "Following lines will be removed"
Bmsg -bl $LOGFILE -m "from ${TNSNAMESORA}:"
TNSNAMESORAWIP="${TNSNAMESORA}.wip_`date +%Y-%m-%d-%H-%M-%S`"
cp -f ${TNSNAMESORA} ${TNSNAMESORA}.ORAdeletedb.`date +%Y-%m-%d-%H-%M-%S` >> $LOGFILE
cp -f ${TNSNAMESORA} ${TNSNAMESORAWIP}>> $LOGFILE

#TNS-Eintraege entfernen
COUNTA=`grep -n "^${ORACLE_SID_UC}" $TNSNAMESORAWIP|cut -d ":" -f1`
for A in $COUNTA
do
   STARTNUM=`grep -n "^${ORACLE_SID_UC}" $TNSNAMESORAWIP|cut -d ":" -f1|head -1`
   COUNTE=`grep -n "^  )" $TNSNAMESORAWIP|cut -d ":" -f1`
   for E in $COUNTE
   do
      if [ $E -gt $STARTNUM ]
      then
         ENDNUM=$E
         sed -n "${STARTNUM},${ENDNUM}p" ${TNSNAMESORAWIP} | tee -a $LOGFILE
         sed -i "${STARTNUM},${ENDNUM}d" ${TNSNAMESORAWIP} >>$LOGFILE 2>&1
         break
      else
         continue
      fi
   done
done
#Leerzeilen entfernen
COUNTL=`grep -n "^$" $TNSNAMESORAWIP|cut -d ":" -f1`
for MAXL in $COUNTL
do
   OLDL=1
   COUNTAKT=`grep -n "^$" $TNSNAMESORAWIP|cut -d ":" -f1`
   for AKTL in $COUNTAKT
   do
      DIFF=`expr ${AKTL} - ${OLDL}`
      if [ $DIFF -gt 1 ]
      then
         OLDL=$AKTL
      else
         sed -i "${OLDL},${OLDL}d" ${TNSNAMESORAWIP}
         break
      fi
   done
done

mv -f ${TNSNAMESORAWIP} ${TNSNAMESORA}

#remove wallet information in sqlnet.ora

##### Cleanup sqlnet.ora ###########
Bmsg -1l $LOGFILE -m "Cleanup sqlnet.ora ..."
Bmsg -bl $LOGFILE -m "Following lines will be removed"
Bmsg -bl $LOGFILE -m "from ${SQLNETORA}:"
SQLNETORAWIP="${SQLNETORA}.wip_`date +%Y-%m-%d-%H-%M-%S`"
cp -f ${SQLNETORA} ${SQLNETORA}.ORAdeletedb.`date +%Y-%m-%d-%H-%M-%S` >> $LOGFILE
cp -f ${SQLNETORA} ${SQLNETORAWIP}>> $LOGFILE

#Wallet-Eintraege entfernen (erzeugt von ORAeusreg)

#Zeilennummer mit Wallet-Pfad fuer die Instanz ermitteln
COUNTW=`grep -n wallet $SQLNETORAWIP|grep ${ORACLE_SID_UC}|cut -d ":" -f1`
if [ ! -z $COUNTW ] # gibt es ueberhaupt einen Wallet-Eintrag fuer die Instanz?
then

#Anzahl von Wallets in sqlnet.ora
   WINFOS=`grep -n "^WALLET_LOCATION" $SQLNETORAWIP|cut -d ":" -f1|wc -l`
   if [ $WINFOS -eq 1 ] # es gibt nur den Wallet-Eintrag fuer die akt. Instanz
   then
      STARTNUM=`grep -n "^WALLET_LOCATION" $SQLNETORAWIP|cut -d ":" -f1`
      ENDNUM=`grep -n "^ )" $SQLNETORAWIP|cut -d ":" -f1`
   else # es gibt mehrere Wallet-Eintraege
      PREVA=0 # previous A
      COUNTA=`grep -n "^WALLET_LOCATION" $SQLNETORAWIP|cut -d ":" -f1` # Blockanfaenge suchen
      STARTNUM=0
      for A in $COUNTA
      do
         if [ $A -gt $COUNTW -a $PREVA -lt $COUNTW ]
         then
            STARTNUM=$PREVA
            PREVE=0
            COUNTE=`grep -n "^ )" $SQLNETORAWIP|cut -d ":" -f1` # Blockenden suchen
            for E in $COUNTE
            do
               if [ $E -gt $COUNTW -a $PREVE -lt $COUNTW ]
               then
                  break
               else
                  PREVE=$E
               fi
            done
            ENDNUM=$E
            break
         else
            PREVA=$A
         fi
      done
#wenn bis hierhin keine START- und Endnummer ermittelt wurde sind es die jeweils letzten Eintraege aus den Zeilenlisten
      if [ $STARTNUM -eq 0 ]
      then
         STARTNUM=$A
         ENDNUM=`grep -n "^ )" $SQLNETORAWIP|cut -d ":" -f1|tail -1`
      fi
   fi
   sed -n "${STARTNUM},${ENDNUM}p" ${SQLNETORAWIP} | tee -a $LOGFILE
   sed -i "${STARTNUM},${ENDNUM}d" ${SQLNETORAWIP} >>$LOGFILE 2>&1
else
   Bmsg -bl $LOGFILE -m  "keine Wallet-Eintrage zu entfernen"
fi

#Leerzeilen entfernen
COUNTL=`grep -n "^$" $SQLNETORAWIP|cut -d ":" -f1`
for MAXL in $COUNTL
do
   OLDL=1
   COUNTAKT=`grep -n "^$" $SQLNETORAWIP|cut -d ":" -f1`
   for AKTL in $COUNTAKT
   do
      DIFF=`expr ${AKTL} - ${OLDL}`
      if [ $DIFF -gt 1 ]
      then
         OLDL=$AKTL
      else
         sed -i "${OLDL},${OLDL}d" ${SQLNETORAWIP}
         break
      fi
   done
done

mv -f ${SQLNETORAWIP} ${SQLNETORA}

##### Remove Files and Folders ###
Bmsg -1l $LOGFILE -m "Remove files and folders ..."
#Folders
Bmsg -bl $LOGFILE -m "Following files and folders will be removed:"
DATLIST=/tmp/datliste
find /app/oracle 2>/dev/null|grep -i ${ORACLE_SID_UC} >${DATLIST}
find /oradata 2>/dev/null|grep -i ${ORACLE_SID_UC} >>${DATLIST}
find /orafra 2>/dev/null|grep -i ${ORACLE_SID_UC} >>${DATLIST}
for DAT in `cat ${DATLIST}|sort|uniq|grep -i ${ORACLE_SID_UC}|sort -r|grep -v 'lost+found'`
do
   if [ $DAT == "${DATAFILEDEST}/${ORACLE_SID}"    -o $DAT == "${FRAFILEDEST}/${ORACLE_SID}" \
     -o $DAT == "${DATAFILEDEST}/${ORACLE_SID}_S1" -o $DAT == "${FRAFILEDEST}/${ORACLE_SID}_S1" \
     -o $DAT == "${DATAFILEDEST}/${ORACLE_SID}_S2" -o $DAT == "${FRAFILEDEST}/${ORACLE_SID}_S2" ]
   then
      continue
   fi
   if [ -d $DAT ]
   then
      CMD="rm -rf $DAT"
   elif [ -f $DAT ]
   then
      CMD="rm $DAT"
   else
      Bmsg -rl $LOGFILE -m "was tun mit: $DAT"
   fi
   echo "$CMD" | tee -a $LOGFILE
   bash -c "${CMD} 2>>/dev/null"
done
rm $DATLIST

##smh 21.09.2023 (TADBA-5371)
##### Cleanup CMDB Tables ############
Bmsg -1 -m "cleanup CMDB Tables of Database Entries and TNS Services"
PWDBVBTC=`awk -F= '{print $2}' ${PWDDIR}/.pwdfile_db_bvbtcusr|sed s/\'//g`
sqlplus -s /nolog <<EOSQL
connect "BVBTCUSR"/"${PWDBVBTC}"@dba-p
DELETE FROM BV\$CMDB.ora_database db
 WHERE 1=1
   AND db.DB_NAME = '${ORACLE_SID_UC}'
   AND db.id IN ( SELECT i.ora_database_id
                   FROM BV\$CMDB.ora_instance i
                   JOIN BV\$CMDB.db_host H ON h.ID = i.DB_HOST_ID
                  WHERE 1=1
                    AND H.FQDN = '${LONGHOST}'
                ) ;
DELETE FROM BV\$CMDB.ORA_TNS_SERVICE ts
 WHERE ts.ID IN (
                 SELECT TNS_SERVICE_ID FROM BV\$CMDB.ORA_TNS_HOST_DB WHERE DB_NAME = '${ORACLE_SID_UC}'
                );

DELETE FROM BV\$CMDB.ORA_TNS_SERVICE_HOST_IP
 WHERE HOST NOT IN (SELECT HOST FROM BV\$CMDB.ORA_TNS_SERVICE_HOST ) ;

exit;
EOSQL

#is this the last instance on this host?
if [ $ORATABENTRIES -eq 0 ]
then
  Bmsg -1 -m "cleanup CMDB Tables of Host Entries, if last Database has been removed"
  PWDBVBTC=`awk -F= '{print $2}' ${PWDDIR}/.pwdfile_db_bvbtcusr|sed s/\'//g`
  sqlplus -s /nolog <<EOSQL
  connect "BVBTCUSR"/"${PWDBVBTC}"@dba-p
  DELETE FROM BV\$CMDB.db_host H
   WHERE 1=1
     AND h.FQDN = '${LONGHOST}'
    ;
  exit;
EOSQL
fi


##### Cleanup rmantab ############
Bmsg -1l $LOGFILE -m "Cleanup $RMANTAB ..."
Bmsg -bl $LOGFILE -m "Following lines will be removed:"
STARTNUM=`grep -n "^${ORACLE_SID_UC}:" ${RMANTAB}|cut -d ":" -f1|sort -nr`
if [ "x$STARTNUM" != "x" ]; then
  for NUM in $STARTNUM # wegen evtl. Mehrfacheintraegen in rmantab
  do
    RMANTABWIP=$RMANTAB.wip.`date +%Y-%m-%d-%H-%M-%S`
    cp -f $RMANTAB $RMANTAB.ORAdeletedb.`date +%Y-%m-%d-%H-%M-%S` >> $LOGFILE
    cp -f $RMANTAB $RMANTABWIP >> $LOGFILE
    sed -n "${NUM},${NUM}p" ${RMANTABWIP} | tee -a $LOGFILE
    sed -i "${NUM},${NUM}d" ${RMANTABWIP} >> $LOGFILE
    mv -f ${RMANTABWIP} ${RMANTAB}
  done
fi

##thi 29.04.2015
##### configure orahosts file ########
Bmsg -1 -m "configure $ORAHOSTS ..."
if [ -s $ORAHOSTS ]
then
   Bmsg -bl $LOGFILE -m "Following lines will be removed:"
   grep -i "${HOST}:ora$ORACLE_SID" $ORAHOSTS
   grep -vi "${HOST}:ora$ORACLE_SID" $ORAHOSTS >/tmp/orahosts_$$
   cp /tmp/orahosts_$$ $ORAHOSTS
   rm /tmp/orahosts_$$
else
   Bmsg -rl $LOGFILE -m "Datei $ORAHOSTS nicht gefunden!"
fi
##thi 29.04.2015
Bmsg -1 -m "initialize automated deletion of CTRL-M-jobs ..."
CTMSHOST=`grep CTMSHOST /opt/ctm_ag/pcmag1/ctm/data/CONFIG.dat|awk '{print $2}'|awk -F\. '{print $1}'|sed s/-//`
PWDBVAJC=`awk -F= '{print $2}' ${PWDDIR}/.pwdfile_db_bvajc|sed s/\'//g`
sqlplus -s /nolog <<EOSQL
connect "BV\$AJC"/"${PWDBVAJC}"@dba-p
insert into ajc_data(task,datacenter,nodename,db_instance,lsnrport,record_created)
values('delete','$CTMSHOST','$HOST','$ORACLE_SID',0,sysdate);
exit;
EOSQL
##thi 08.10.2015
#-----------------------------------------------------------------------------------------------------------------
#     Main program - end
#-----------------------------------------------------------------------------------------------------------------
Bscriptend -l $LOGFILE
exit

