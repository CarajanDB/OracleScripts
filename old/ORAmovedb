#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAmovedb
# @(#) Author      : Johannes Ahrends
# @(#)
# @(#) Version     : 2.0
# @(#) Date        : 01.07.2024
# @(#)
# @(#) Description : Copy Database from unix.lan to barmenia.lan
# @(#)
# @(#) Syntax      : see usage (ORAmovedb -h)
# @(#)
# @(#) Attention   : This script must be started as user ORACLE on the New Server
# @(#)
# @(#) Presumption :
# @(#) 1. Oracle software is installed
# @(#) 2. Unique Name for new Database is always <ORACLE_SID>_S1
# @(#) 3. New Port is 1601
#
# @@(#) Change History:
# @@(#)
# @@(#) 1.0     25.07.2017 J. Ahrends New Skript
# @@(#) 1.1     01.08.2017 J. Ahrends Cleanup, Logger
# @@(#) 1.2     14.08.2017 J. Ahrends Fehlerbehebung, tnsnames.ora
# @@(#) 1.3     14.08.2017 J. Ahrends Environment Variablen, db_unique_name
# @@(#) 1.4     14.08.2017 J. Ahrends Umstellung auf ORAlib
# @@(#) 1.5     24.10.2017 J. Ahrends Full Qualified Hostnames
# @@(#) 1.6     19.12.2017 J. Ahrends Aenderung Listener Port von 1602 auf 1601
# @@(#) 1.7     19.12.2017 J. Ahrends Anpassung an neuen Logger
# @@(#) 1.8     13.09.2018 wi         Side Parameter S1 added for Remote Connect
# @@(#) 1.9     05.07.2021 HGE        function readPWD needs a parameter
# @@(#) 2.0     01.07.2024 M. Pils    Added [DATA|FRA]FILEDEST
# @(#) ================================================================================================================
#
SCRIPTDIR=/app/oracle/bin
DIR=$SCRIPTDIR
LOCKFILE=$DIR/`basename $0 | cut -d. -f 1`.lck
DATE=`date +%Y-%m-%d-%H-%M-%S`
NEWPORT=1601
SOURCEDOMAIN=unix.lan
RUNNING=0
. $SCRIPTDIR/ORAlib
#
#-----------------------------------------------------------------------
# Usage help
#-----------------------------------------------------------------------
#
usage() {
   echo " "
   echo "Function:  Copy Database from origin to new location"
   echo "Must be started on new server"
   echo " "
   echo "     Usage:  `basename $0` -s <ORACLE_SID> -p <oldport> -r <remotehost> [-o <ORACLE_HOME>] [-h]"
   echo "        -s:  Database SID"
   echo "        -p:  Listener Port of origin database"
   echo "        -r:  Hostname of origin database (full qualified)"
   echo "        -o:  ORACLE_HOME of the new database (optional, if not already set)"
   echo "        -h:  this help"
   echo " "
   echo " Example: $0 -s SHRIS01E -p 1637 -r lxnu3.unix.lan"
}

#
#-----------------------------------------------------------------------
# Create Admin directories and symbolic links
#-----------------------------------------------------------------------
#
MkDir() {
   logger_debug "--------> Function MkDir"
   DIR=`pwd`
   cd /app/oracle/admin
   mkdir -p ${ORACLE_SID}/pfile
   mkdir -p ${ORACLE_SID}/adump
   mkdir -p ${ORACLE_SID}/dpdump
   mkdir -p ${ORACLE_SID}/script
   mkdir -p ${ORACLE_SID}/wallet
   if [ ! -e "$ORACLE_SID" ]; then ln -s ${ORACLE_SID} ${ORACLE_SID}_S1; fi
   cd $DATAFILEDEST
   if [ ! -e "$ORACLE_SID" ]; then ln -s ${ORACLE_SID}_S1 ${ORACLE_SID}; fi
   mkdir -p ${ORACLE_SID}/controlfile
   cd $FRAFILEDEST
   if [ ! -e "$ORACLE_SID" ]; then ln -s ${ORACLE_SID}_S1 ${ORACLE_SID}; fi
   mkdir -p ${ORACLE_SID}/controlfile
   cd $DIR
}
#
#-----------------------------------------------------------------------
# Create Dummy pfile from interim startup of new database
#-----------------------------------------------------------------------
#
PFile() {
   logger_debug "--------> Function PFile"
   cat > $PFILE <<EOCAT
*.audit_trail='none'
*.compatible='11.2.0'
*.db_block_size=8192
*.db_create_file_dest='${DATAFILEDEST}'
*.db_name='${ORACLE_SID}'
*.db_unique_name='${ORACLE_SID}_S1'
*.db_recovery_file_dest='${FRAFILEDEST}'
*.db_recovery_file_dest_size=10000M
*.diagnostic_dest='/app/oracle'
*.local_listener='LISTENER_${ORACLE_SID}'
*.pga_aggregate_target=1000M
*.processes=300
*.remote_login_passwordfile='EXCLUSIVE'
*.sga_target=1500M
*.undo_tablespace='UNDOTBS1'
EOCAT
}
#
#-----------------------------------------------------------------------
# Add Database name to listener (for rman duplicate)
#-----------------------------------------------------------------------
#
AddListener() {
   logger_debug "--------> Function AddListener"
   LISTENERNAME=LISTENER_${ORACLE_SID}
   if [ -z $TNS_ADMIN ]
   then
      TNS_ADMIN=${ORACLE_HOME}/network/admin
   fi

   if [ -r ${TNS_ADMIN}/listener.ora ]
   then
      mv ${TNS_ADMIN}/listener.ora ${TNS_ADMIN}/listener.ora.`date "+%y-%m-%d_%H:%M:%S"`
   fi
   cat > ${TNS_ADMIN}/listener.ora <<EOCAT
ADR_BASE_LISTENER_${ORACLE_SID} = /app/oracle

LISTENER_${ORACLE_SID} =
   (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = `hostname`)(PORT = ${NEWPORT}))
   )
SID_LIST_LISTENER_${ORACLE_SID} =
   (SID_LIST =
       (SID_DESC =
           (GLOBAL_DBNAME=${ORACLE_SID})
           (ORACLE_HOME=${ORACLE_HOME})
           (SID_NAME=${ORACLE_SID})
       )
   )
EOCAT
#
# Restart listener
#
logger_info "Restarting listener"
lsnrctl stop LISTENER_${ORACLE_SID} | logger_debug
lsnrctl start LISTENER_${ORACLE_SID} | logger_debug
}
#
#-----------------------------------------------------------------------
# Add tnsadmin entry
#-----------------------------------------------------------------------
#
AddTnsnames() {
   logger_debug "--------> Function AddTnsnames"
   cat > ${TNS_ADMIN}/tnsnames.ora <<EOCAT
LISTENER_${ORACLE_SID} =
   (ADDRESS = (PROTOCOL = TCP)(HOST = `hostname`)(PORT = ${NEWPORT}))

RCVCAT =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = orarcvcat.unix.lan)(PORT = 1601))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = RCVCAT.unix.lan)
    )
  )
EOCAT
}
#
#-----------------------------------------------------------------------
# Check tnsadmin entry
#-----------------------------------------------------------------------
#
CheckTnsnames() {
   logger_debug "--------> Function CheckTnsnames"
   if [ -r ${TNS_ADMIN}/tnsnames.ora ]
   then
      if [ `grep LISTENER_${ORACLE_SID} ${TNS_ADMIN}/tnsnames.ora | wc -l` -eq 0 ]
      then
         mv ${TNS_ADMIN}/tnsnames.ora ${TNS_ADMIN}/tnsnames.ora.`date "+%y-%m-%d_%H:%M:%S"`
         AddTnsnames
      fi
   else
      AddTnsnames
   fi
}
#
#-----------------------------------------------------------------------
# Duplicate database
#-----------------------------------------------------------------------
#
Duplicate() {
   logger_debug "--------> Function Duplicate"
   TARGET=${REMOTEHOST}:${OLDPORT}/${ORACLE_SID}_S1.${SOURCEDOMAIN}
   logger_debug "Target = ${TARGET}"
   AUXI=`hostname`:${NEWPORT}/${ORACLE_SID}
   logger_debug "Auxiliary = ${AUXI}"
#
# Create RMAN Script
#
   RMANSCRIPT=${ADMINDIR}/script/duplicate.rcv
   logger_debug "Creating RMAN script $RMANSCRIPT"
   cat > $RMANSCRIPT <<EORMAN
   connect target sys/${PWDSYS}@${TARGET}
   connect auxiliary sys/${PWDSYS}@${AUXI}
   run {
      allocate channel chan1 type disk;
      allocate channel chan2 type disk;
      allocate auxiliary channel aux1 type disk;
      allocate auxiliary channel aux2 type disk;
      DUPLICATE TARGET DATABASE TO ${ORACLE_SID}
         FROM ACTIVE DATABASE
         SPFILE
         SET "db_unique_name"="${ORACLE_SID}_S1"
         NOFILENAMECHECK
         ;
   }
EORMAN
#
# Run RMAN
#
   logger_info "Starting database duplication. Please wait ..."
   RMANLOG=/tmp/rman_duplicate_${ORACLE_SID}.log
   rman log=$RMANLOG @${RMANSCRIPT} >/dev/null 2>&1
   cat $RMANLOG | logger_debug
   if [ `grep ORA- $RMANLOG | grep -v grep| wc -l` -ne 0 ]
   then
      logger_error "Error while duplicating database $ORACLE_SID"
      cat $RMANLOG
      exit
   fi
}
#
#-----------------------------------------------------------------------
# Start Dummy Instance
#-----------------------------------------------------------------------
#
StartInstance() {
   logger_debug "--------> Function StartInstance"
   logger_info "Starting Dummy Instance"
   RT=$(sqlplus -s / as sysdba <<EOSQL
      prompt startup nomount pfile='${PFILE}'
      startup nomount pfile='${PFILE}'
EOSQL
)
   logger_debug $RT
   if [ `echo $RT | grep -e "ERROR" -e "ORA-" |grep -v grep | wc -l` -gt 0 ]
   then
      logger_error "Unable to Start Instance"
      logger_error $RT
      exit
   fi
}
#
#-----------------------------------------------------------------------
# Change Controlfile entry for new database
#    required because rman duplicate does not take db_unique_name
#    for controlfiles into account
# WARNING: might be different for Version 12c
#-----------------------------------------------------------------------
#
MoveControl() {
#
# Get current contolfile names
#
   logger_debug "--------> Function MoveControl"
   CONTROLFILE=$(sqlplus -s / as sysdba <<EOSQL
      set echo off heading off feedback off pages 0 lines 1000 trimspool on
      SELECT name FROM v\$controlfile;
EOSQL
)
   logger_debug CONTROLFILES=$CONTROLFILE
#
# ALTER Parameter and reboot database
#
   logger_info "Restarting database with new controlfile"
   set $CONTROLFILE
   NEWCONTROLFILE=\'`echo ${1}\',\'${2} | sed s/${ORACLE_SID}/${ORACLE_SID}_S1/g`\'
   logger_debug "New COntrolfile = $NEWCONTROLFILE"
   RT=$(sqlplus -s / as sysdba <<EOSQL
      ALTER SYSTEM SET control_files=${NEWCONTROLFILE} scope=spfile;
      SHUTDOWN IMMEDIATE
      STARTUP
EOSQL
)
   logger_debug $RT
}
#
#-----------------------------------------------------------------------
# Cleanup remove symbolic links in data and fra
#-----------------------------------------------------------------------
#
Cleanup() {
   logger_debug "--------> Function Cleanup"
   rm ${DATAFILEDEST}/$ORACLE_SID
   rm ${FRAFILEDEST}/$ORACLE_SID
   rm /tmp/rman_duplicate_${ORACLE_SID}.log
}
########################################################################
#
# Main
#
########################################################################

typeset -u ORACLE_SID
typeset -l REMOTEHOST

if [ $# -lt 3 ]
then
   usage
   exit
fi

Logger

#
# Read Parameter
#
PSOPTION=""
while [ $# -gt 0 ]
do
   option="$1"
   case $option in
      -s)
         ORACLE_SID="$2"
         shift
         ;;
      -p)
         OLDPORT="$2"
         shift
         ;;
      -r)
         REMOTEHOST="$2"
         shift
         ;;
      -o)
         ORACLE_HOME="$2"
         shift
         ;;
      -h)
         usage
         exit
         ;;
   esac
   shift
done

if [ -z "$ORACLE_SID"  -o -z "$OLDPORT" -o -z "$REMOTEHOST" -o -z "$ORACLE_HOME" ]
then
   logger_error "Mandatory Parameter not set"
   logger_error "ORACLE_SID=$ORACLE_SID"
   logger_error "PORT=$OLDPORT"
   logger_error "REMOTEHOST=$REMOTEHOST"
   logger_error "ORACLE_HOME=$ORACLE_HOME"
   usage
   exit
fi
export ORACLE_SID
export ORACLE_HOME

PATH=${ORACLE_HOME}/bin:$PATH
ADMINDIR=/app/oracle/admin/$ORACLE_SID
PFILE=${ADMINDIR}/pfile/init${ORACLE_SID}_dummy.ora

logger_info "Started at `date`"
MkDir
readPWD sys
PFile
CheckInstanceOFF $ORACLE_SID
SetOracleHome $ORACLE_HOME
if [ $? -ne 0 ]
then
   logger_error "Invalid ORACLE_HOME"
   exit 1
fi
CreatePWD
if [ $? -ne 0 ]
then
   exit 1
fi
AddListener
CheckTnsnames
StartInstance
Duplicate
MoveControl
ORAtab
RMANtab
Cleanup
logger_info "Complete at `date`"
