#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAcmdbJob
# @(#) Author      : Marcel Pils
# @(#) Modified    :
# @(#)
# @(#) Description : This script manage CMDB information retrieval
# @(#)               for the server on which the scipt is running
# @(#)
# @(#) Version     : 1.7.3
# @(#) Datum       : 17.07.2024
# @(#)
# @(#) Presumption : This script
# @(#)               1. must be started as user ORACLE
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)  1.0   2015-10-05  M.Pils   Created
# @@(#)  1.1   2018-03-29  M.Pils   Changed script header, logging and execution order
# @@(#)  1.2   06.04.2018  Thiel    on DBAP many data is inserted into cmdb, so we need an analyze_schema
# @@(#)                             moved the DBAP special part (OUD/TNS data) to the end of update part
# @@(#)  1.3   13.12.2018  Thiel    in option upd; do NOT EXIT after error in an subprogram
# @@(#)  1.4   13.12.2018  Thiel    slightly changed error handling
# @@(#)  1.5   28.06.2019  Thiel    avoid ORAcmdbDatabase error messages when no instance running
# @@(#)  1.5.1 28.06.2019  Thiel    additional commit and push to git to remedy git errors
# @@(#)  1.5.2 01.07.2019  Thiel    removed a typo
# @@(#)  1.5.3 09.08.2019  M.Pils   added logfile handling for several scripts
# @@(#)  1.5.4 22.01.2020  Thiel    take care of new returncode 9 from ORAcmdbDatabase and send mail to unix-dba
# @@(#)  1.5.5 22.01.2020  Thiel    minor change cause of string handling in mail subject
# @@(#)  1.5.6 22.01.2020  Thiel    when invoked from a shell mail needs a body, even if empty
# @@(#)  1.6   15.11.2021  Thiel    when instance running, we have to set database environment explicitly
# @@(#)  1.7   05.04.2022  Smets    Overlook Comment Line in etc/oratab
# @@(#)  1.7.1 10.05.2022  Thiel    we need a valid ORACLE_HOME at the very beginning
# @@(#)  1.7.2 10.05.2022  Thiel    added function detnset_sid
# @@(#)  1.7.3 17.07.2024  M.Pils   fixed indentation
# @(#) ================================================================================================================

#-----------------------------------------------------------------------------------------------------------------
#     Global script environment
#-----------------------------------------------------------------------------------------------------------------
#MAILTO="unix-dba@barmenia.de"
LONGHOST=`hostname -f`
SCRIPTNAME=$(basename $0)
SCRIPTSHORTDESC="Manage all CMDB informations for actual server"
BINDIR="/app/oracle/bin"

source /app/oracle/bin/.bash_functions
RC=$?
if [ $RC -ne 0 ]; then
  echo ".bash_functions file not found!"
  exit $RC
fi
source /app/oracle/bin/ORAlib
RC=$?
if [ $RC -ne 0 ]; then
  echo "ORAlib file not found!"
  exit $RC
fi
#initialize logger
Logger

#--------------------------------------------------------------
#     FUNCTION: Help routine
#--------------------------------------------------------------
function usage()
{
echo ""
echo "  Command     : $SCRIPTNAME"
echo "  Description : $SCRIPTSHORTDESC"
echo ""
echo "  Parameters  : -opt {ins|upd|del}        operation to do"
echo "                -h                        help screen"
echo ""
echo "  Example     : $SCRIPTNAME -opt upd"
echo ""
echo "  Attention   : This script must be started as user ORACLE"
echo ""
exit 255
}

#--------------------------------------------------------------
#     FUNCTION: determine and set ORACLE_SID
#--------------------------------------------------------------
function detnset_sid()
{
#determine possible ORACLE_SID
POSS_SID=`grep '/app/oracle/product' /etc/oratab|grep -v \#|head -1|awk -F: '{print $1}'`
if [ -z $POSS_SID ]
then
  logger_info 'cannot find any ORACLE_SID in /etc/oratab!'
  exit
else
  . ~/bin/dbset $POSS_SID >/dev/null 2>&1
fi
}

#--------------------------------------------------------------
#     Get Parameter
#--------------------------------------------------------------
while true; do
  case "$1" in
    -opt ) OPT="$2";opt=1; shift 2 ;;
    -h | --help ) usage ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

OPT=`echo $OPT|tr 'A-Z' 'a-z'`

#--------------------------------------------------------------
#     test to see if they gave the option
#--------------------------------------------------------------
if [ "x" == "x$opt" ]; then
  #Bmsg -rm "-opt [option] is required"; echo ""; usage
  logger_error "-opt [option] is required"; echo ""; usage
fi

#--------------------------------------------------------------
#     Set Environment
#--------------------------------------------------------------
SCRIPTDIR="/app/oracle/bin/cmdb"
LOGDIR="/app/oracle/admin/log"
DATE=`date +'%F'`

DBAPCHECK=`grep DBAP /etc/oratab|cut -d: -f1`
SCTPCHECK=`grep SCTP /etc/oratab|cut -d: -f1`
FRC=0

case "$OPT" in
  ins )
    logger_error "This functon is not defined now";
    exit 255;
  ;;

  upd ) # upload infos for the host
    if [ -z $ORACLE_HOME ]
    then
      detnset_sid
    else
      echo $ORACLE_HOME|grep agent >/dev/null
      if [ $? -eq 0 ]   # agent home is set as ORACLE_HOME
      then
        detnset_sid
      fi
    fi
    logger_info "Execute ORAcmdbHost -opt 'upd'"
    $SCRIPTDIR/ORAcmdbHost -opt "upd" > $LOGDIR/ORAcmdbHost_${DATE}.log 2>&1
    RC=$?
    if [ $RC -ne 0 ]; then
      logger_error "ORAcmdbHost -opt 'upd' failed with RC:${RC}!"
      FRC=$RC
    fi

    # upload infos for all running databases
    ps -ef|grep ora_smon|grep -v grep >/dev/null
    if [ $? -eq 0 ]
    then
      logger_info "Execute ORAcmdbDatabase -opt 'upd' -sid 'all'"
      $SCRIPTDIR/ORAcmdbDatabase -opt "upd" -sid "all" > $LOGDIR/ORAcmdbDatabase_${DATE}.log 2>&1
      RC=$?
      if [ $RC -ne 0 ]; then
        if [ $RC -eq 9 ]
        then
          MESSAGE="ORAcmdbDatabase: one or more entries missing in /etc/oratab on $LONGHOST"
          logger_info "ORAcmdbDatabase: $MESSAGE"
          echo|mail -s "'$MESSAGE'" unix-dba@barmenia.de
        else
          logger_error "ORAcmdbDatabase -opt 'upd' -sid 'all' failed with RC:${RC}!"
          FRC=$RC
        fi
      fi
    else
      logger_info "as no instance running ORAcmdbDatabase will not be started!"
    fi

    # upload infos for all running listener
    logger_info "Execute ORAcmdbListener -opt 'upd' -lsnr 'all'"
    $SCRIPTDIR/ORAcmdbListener -opt "upd" -lsnr "all" > $LOGDIR/ORAcmdbListener_${DATE}.log 2>&1
    RC=$?
    if [ $RC -ne 0 ]; then
      logger_error "ORAcmdbListener -opt 'upd' -lsnr 'all' failed with RC:${RC}!"
      FRC=$RC
    fi

    if [ "$SCTPCHECK" == "SCTP" ]; then
      # upload infos from CTM (hostgroups)
      logger_info "Execute ORAcmdbCTM -opt 'upd'"
      $SCRIPTDIR/ORAcmdbCTM > $LOGDIR/ORAcmdbCTM_${DATE}.log 2>&1
      RC=$?
      if [ $RC -ne 0 ]; then
        logger_error "ORAcmdbCTM -opt 'upd' failed with RC:${RC}!"
        FRC=$RC
      fi
    fi

    if [ "$DBAPCHECK" == "DBAP" ]; then
      # upload infos from LAT for all hosts in CMDB
      logger_info "Execute ORAcmdbLAT -opt 'upd' -fqdn 'all'"
      $SCRIPTDIR/ORAcmdbLAT -opt "upd" -fqdn "all" > $LOGDIR/ORAcmdbLAT_${DATE}.log 2>&1
      RC=$?
      if [ $RC -ne 0 ]; then
        logger_error "ORAcmdbLAT -opt 'upd' failed with RC:${RC}!"
        FRC=$RC
      fi

      # upload infos from oud (tns services)
      logger_info "Execute ORAcmdbOUD -opt 'upd'"
      $SCRIPTDIR/ORAcmdbOUD -opt "upd" -tnssrv "all" > $LOGDIR/ORAcmdbOUD_${DATE}.log 2>&1
      RC=$?
      if [ $RC -ne 0 ]; then
        logger_error "ORAcmdbOUD -opt 'upd' failed with RC:${RC}!"
        FRC=$RC
      fi

      #analyze schema BV$CMDB
      MESSAGE="starting analyze of schema BV\$CMDB"
      logger_info "$MESSAGE"
      SQLRESULT=/tmp/result_sql1.lst
      ${ORACLE_HOME}/bin/sqlplus <<EOSQL >/dev/null
connect / as sysdba
spool $SQLRESULT;
BEGIN
SYS.DBMS_STATS.GATHER_SCHEMA_STATS(
  OwnName=>'BV\$CMDB',
  Granularity=>'DEFAULT',
  OPTIONS=>'GATHER AUTO',
  Estimate_Percent=>10,
  Method_Opt=>'FOR ALL COLUMNS SIZE 1',
  Degree=>4,
  CASCADE=>TRUE,
  No_Invalidate=>FALSE
);
END;
/
exit;
EOSQL

      checkORAerr
      if [ $RC -eq 1 ]
      then
        echo
        MESSAGE="$MESSAGE failed!"
        logger_fatal "$MESSAGE"
        MESSAGE=`cat $SQLRESULT`
        logger_fatal "$MESSAGE"
        exit 1
      fi
      rm $SQLRESULT
    fi
  ;;

  del )
    logger_error "This function is not defined now";
    exit 255;
  ;;

  * )
    logger_error "Invalid parameter '$OPT' for option -opt!";
    exit 255;
  ;;
esac
logger_info "$SCRIPTNAME finished"
exit $FRC

