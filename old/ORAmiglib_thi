#!/bin/bash
# @(#) ================================================================================================================
# @(#) File        : ORAmiglib_thi
# @(#) Author      : Thorsten Thiel
# @(#)
# @(#) Version     : 0.3.2
# @(#) Date        : 09.04.2024
# @(#)
# @(#) Description : Library with useful Oracle Functions for migration from 12c to 19c
# @(#) Functions:
# @(#) check_ora_net_conf: checks oracle net configuration and provides files sqlnet.ora and ldap.ora if not present
# @(#)     det_os_version: determines OS version and provides variables PRETTY_OS_NAME and OS_VERSION
# @(#)        ShutSrcInst: shutdown source instance
# @(#)  check_oid_service: tnspings a given OID-service
# @(#)           AudClean: removes old 12c audit information @(#)
# @(#)             MonOff: blackout monitoring (CheckMK, Foglight, EnterpriseManager)
# @(#)        get_oid_srv: get oid service name for CMDB_SHORTHOST
# @(#)           OraHosts: adjust orahosts file
# @(#)            UsrLock: locks all open users not managed by oracle
# @(#)                     generates unlock sql script
# @(#)  kill_all_usr_sess: kills all sessions for this user
# @(#)     RemoveDGConfig: removes leftovers of previous dataguard configuration
# @(#)                     and bounces instance
# @(#)    check_dg_config: get PROTECTION_MODE from v$database
# @(#)          GenEMInfo: generate emcli commands, needs parameter [del|add|mod]
# @(#)
# @(#) Syntax      : cannot run on it's own
# @(#)
# @(#) Attention   : Integrate in other scripts with: source /app/oracle/bin/ORAmiglib_thi
# @(#)
# @(#) Presumption :
#
# @@(#) Change History:
# @@(#)
# @@(#) 0.1     29.03.2021 THI        created
# @@(#) 0.1.1   30.03.2021 THI        added function check_ora_net_conf
# @@(#) 0.1.2   30.03.2021 THI        changed function check_ora_net_conf
# @@(#) 0.1.3   30.03.2021 THI        added function det_os_version
# @@(#) 0.1.4   31.03.2021 THI        added function ShutSrcInst
# @@(#) 0.1.5   31.03.2021 THI        completed function ShutSrcInst and added function check_oid_service
# @@(#) 0.1.6   31.03.2021 THI        some minor changes
# @@(#) 0.1.7   01.04.2021 THI        added function AudClean
# @@(#) 0.1.8   01.04.2021 THI        added function MonOff
# @@(#) 0.1.9   01.04.2021 THI        function AudClean needs sys password too
# @@(#) 0.1.10  03.04.2021 THI        added function get_sys_pwd
# @@(#) 0.1.11  03.04.2021 THI        when error keep TMPSQLOUT; otherwise remove
# @@(#) 0.1.12  03.04.2021 THI        prepared function AudClean for debug mode
# @@(#) 0.1.13  03.04.2021 THI        changed message in ShutSrcInst
# @@(#) 0.1.14  03.04.2021 THI        visualize DEBUG MODE in SQL-Statements
# @@(#) 0.1.15  03.04.2021 THI        minor change
# @@(#) 0.1.16  03.04.2021 THI        next try to visualize DEBUG MODE in SQL-Statements
# @@(#) 0.1.17  03.04.2021 THI        changed function ShutSrcInst; chose another sql statement in DEBUG MODE
# @@(#) 0.1.18  07.04.2021 THI        ignore ORA-12514 while database shutdown
# @@(#) 0.1.19  08.04.2021 THI        added function det_active_OH
# @@(#) 0.1.20  08.04.2021 THI        do not use OID-Service in function AudClean
# @@(#) 0.1.21  08.04.2021 THI        function ShutSrcInst now invokes shutdown abort
# @@(#) 0.1.22  08.04.2021 THI        function ShutSrcInst changed
# @@(#) 0.1.23  12.04.2021 THI        added function get_oid_srv
# @@(#) 0.1.24  13.04.2021 THI        changed function check_oid_service
# @@(#) 0.1.25  13.04.2021 THI        changed function ShutSrcInst
# @@(#) 0.1.26  16.04.2021 THI        changed function ShutSrcInst to prevent automatic instance startup at next machine reboot on 6.10 systems
# @@(#) 0.1.27  16.04.2021 THI        slightly changed function ShutSrcInst
# @@(#) 0.1.28  20.04.2021 THI        addded function OraHosts
# @@(#) 0.1.29  20.04.2021 THI        minor change in function det_active_OH
# @@(#) 0.1.30  20.04.2021 THI        have to use the correct variable
# @@(#) 0.1.31  20.04.2021 THI        have to use the correct variable in function OraHosts
# @@(#) 0.1.32  21.04.2021 THI        added first part of function UsrLock
# @@(#) 0.1.33  21.04.2021 THI        added second part of function UsrLock
# @@(#) 0.1.34  21.04.2021 THI        minor error corrections in function UsrLock
# @@(#) 0.2     21.04.2021 THI        added function kill_all_usr_sess
# @@(#) 0.2.1   22.04.2021 THI        added explicit return commands at the end of UsrLock and kill_all_usr_sess
# @@(#) 0.2.2   22.04.2021 THI        cleanup all temporary files
# @@(#) 0.2.3   22.04.2021 THI        FinalMaintenance may run under 19c, too
# @@(#) 0.2.4   23.04.2021 THI        changed starting if in UsrLock
# @@(#) 0.2.5   10.05.2021 THI        added function RemoveDGConfig
# @@(#) 0.2.6   11.05.2021 THI        added function check_dg_config
# @@(#) 0.3     14.05.2021 THI        added function GenEMInfo
# @@(#) 0.3.1   17.05.2021 THI        need some oter string signs
# @@(#) 0.3.2   09.04.2024 MPils      Added "" for Oracle Password
# @(#) ================================================================================================================

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check oid service
#-----------------------------------------------------------------------------------------------------------------
function check_oid_service()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="check oid service"
logger_info "$MESSAGE"
TIMESTAMP=`date +%s`
TMPOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
TNSPING=$ORACLE_HOME/bin/tnsping
$TNSPING $CMDB_OID_SERVICE >$TMPOUT 2>&1
if [ $? -ne 0 ]
then
   logger_error "$MESSAGE failed!"
   MESSAGE=`cat $TMPOUT`
   logger_error "$MESSAGE"
   rm $TMPOUT 2>/dev/null
   exit 1
fi
rm $TMPOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: blackout monitoring
#-----------------------------------------------------------------------------------------------------------------
function MonOff()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="blackout monitoring"
logger_info "$MESSAGE"
echo
logger_info "has to be created, still!"
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: get sys password
#-----------------------------------------------------------------------------------------------------------------
function get_sys_pwd()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="get sys password"
logger_info "$MESSAGE"

PWDFILE_DB_SYS=$PWDDIR/.pwdfile_db_sys
if [ ! -s $PWDFILE_DB_SYS ]
then
   MESSAGE="Password file >$PWDFILE_DB_SYS< not found!"
   logger_error "$MESSAGE"
   exit 1
fi
source $PWDFILE_DB_SYS
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: remove dataguard configuration
#-----------------------------------------------------------------------------------------------------------------
function RemoveDGConfig()
{
FUNCNAME=${FUNCNAME[0]}
TIMESTAMP=`date +%s`
TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"

get_sys_pwd

check_dg_config

#if [ ! "$PROTECTION_MODE" == 'MAXIMUM AVAILABILITY' -a ! "$PROTECTION_MODE" == 'MAXIMUM PROTECTION' ]
if [ "$LOGARC_CONFIG" == '' ]
then
   MESSAGE="not neccesssary to remove dataguard configuration"
   logger_info "$MESSAGE"
   return 0
fi
MESSAGE="remove dataguard configuration"
logger_info "$MESSAGE"

if [ $DEBUG -eq 0 ]
then
   SQL_STATEMENT='alter database set standby to maximize performance;
alter system reset log_archive_config;
SHUTDOWN IMMEDIATE;
STARTUP;
'
else
   SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
fi
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS sys/"${PWDSYS}" as sysdba <<EOSQL
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
$SQL_STATEMENT
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  MESSAGE="Error during sql statement!"
  logger_error "${MESSAGE}"
  cat $TMPSQLOUT
  exit 1
fi

rm $TMPSQLOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check dataguard configuration
#-----------------------------------------------------------------------------------------------------------------
function check_dg_config()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="check dataguard configuration"
logger_info "$MESSAGE"

if [ $DEBUG -eq 0 ]
then
   SQL_STATEMENT="declare
  l_logarc_config    varchar2(4000) :='';
BEGIN
  SELECT value
    INTO l_logarc_config
    FROM v\$parameter
   WHERE name='log_archive_config';

   dbms_output.put_line('LOGARC_CONFIG="'||l_logarc_config||'"');
END;
/"
else
   SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
fi
TIMESTAMP=`date +%s`
TMPSQLOUT_1="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS sys/"${PWDSYS}" as sysdba <<EOSQL
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT_1
$SQL_STATEMENT
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  MESSAGE="Error during sql statement!"
  logger_error "${MESSAGE}"
  cat $TMPSQLOUT_1
  exit 1
fi

if [ $DEBUG -eq 0 ]
then
   source $TMPSQLOUT_1
fi
rm $TMPSQLOUT_1 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: cleanup audit information
#-----------------------------------------------------------------------------------------------------------------
function AudClean()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="cleanup audit information"
logger_info "$MESSAGE"

get_sys_pwd

if [ $DEBUG -eq 0 ]
then
   SQL_STATEMENT='BEGIN
   DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL(
   AUDIT_TRAIL_TYPE           =>  DBMS_AUDIT_MGMT.AUDIT_TRAIL_UNIFIED,
   USE_LAST_ARCH_TIMESTAMP    =>  FALSE);
END;
/'
else
   SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
fi
TIMESTAMP=`date +%s`
TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS sys/"${PWDSYS}" as sysdba <<EOSQL
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
$SQL_STATEMENT
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  MESSAGE="Error during sql statement!"
  logger_error "${MESSAGE}"
  cat $TMPSQLOUT
  exit 1
fi

rm $TMPSQLOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: prepare file orahosts
#-----------------------------------------------------------------------------------------------------------------
function OraHosts()
{
FUNCNAME=${FUNCNAME[0]}
if [ "$SHORTHOST" != "$CMDB_NEW_HOSTNAME" ]
then
   MESSAGE="function $FUNCNAME is not necessary on this host!
In time, it will be invoked from $CMDB_NEW_HOSTNAME"
   logger_info "$MESSAGE"
   return
fi
MESSAGE="prepare orahosts"
logger_info "$MESSAGE"
ORAHOSTS=/oranfs/share/ora_admin/SYSTEM/RemoteExec/orahosts
if [ ! -s $ORAHOSTS ]
then
   MESSAGE="file >$ORAHOSTS< does not exist!"
   logger_error "$MESSAGE"
   exit 1
fi
if [ ! -w $ORAHOSTS ]
then
   MESSAGE="file >$ORAHOSTS< is not writable!"
   logger_error "$MESSAGE"
   exit 1
fi
sed -i s/"$CMDB_SHORTHOST"/"$SHORTHOST"/ $ORAHOSTS
if [ $? -ne 0 ]
then
   MESSAGE="couldn't adjust orahosts!"
   logger_error "$MESSAGE"
   exit 1
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: lock all unwanted users
#-----------------------------------------------------------------------------------------------------------------
function UsrLock()
{
FUNCNAME=${FUNCNAME[0]}
#if [ "$SHORTHOST" != "$CMDB_NEW_HOSTNAME" ]
if [ "$OS_VERSION" == '6.10' ]
then
   MESSAGE="function $FUNCNAME is not necessary on this host!
In time, it will be invoked from $CMDB_NEW_HOSTNAME"
   logger_info "$MESSAGE"
   return
fi
MESSAGE="lock all unwanted users in instance ${CMDB_DB_NAME}@${CMDB_SHORTHOST}"
logger_info "$MESSAGE"

get_oid_srv
check_oid_service

get_sys_pwd

if [ $DEBUG -eq 1 ]
then
   SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
else
   SQL_STATEMENT="select username
from dba_users
where oracle_maintained!='Y'
and account_status='OPEN'
and username not in ('PAOMON','PWDADM','SYSMGMNT','PWDCHGTST','BVEUSDBA','BVEUSGBL');"
fi

#determine users to lock
TIMESTAMP=`date +%s`
TMPUSRSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS -s /nolog <<EOSQL >/dev/null
connect sys/"${PWDSYS}"@$CMDB_OID_SERVICE as sysdba
set hea off
set pagesize 200
set feedback off
set verify off
set echo off heading off trimspool on pagesize 0 linesize 255 feedback off
whenever sqlerror exit sql.sqlcode
spool $TMPUSRSQLOUT
$SQL_STATEMENT
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
   MESSAGE="Error during sql statement!"
   logger_error "${MESSAGE}"
   cat $TMPUSRSQLOUT
   rm $TMPUSRSQLOUT 2>/dev/null
   exit 1
fi

if [ -z $MIG19C_BASE ]
then
   MESSAGE='I need variable MIG19C_BASE'
   logger_error "$MESSAGE"
   exit 1
else
   if [ ! -d $MIG19C_BASE/UsrLock ]
   then
      mkdir -p $MIG19C_BASE/UsrLock
      if [ $? -ne 0 ]
      then
         MESSAGE="cannot create directory $MIG19C_BASE/UsrLock!"
         logger_error "$MESSAGE"
         exit 1
      fi
   fi
fi

#lock users and generate unlock script
for USR2LOCK in `cat $TMPUSRSQLOUT`
do
   if [ $DEBUG -eq 1 ]
   then
      SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
   select sysdate from dual;"
   else
      SQL_STATEMENT="alter user $USR2LOCK account lock;"
   fi

   TIMESTAMP=`date +%s`
   TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
   SQLPLUS=$ORACLE_HOME/bin/sqlplus
   $SQLPLUS -s /nolog <<EOSQL
connect sys/"${PWDSYS}"@$CMDB_OID_SERVICE as sysdba
set hea off
set pagesize 200
set feedback off
set verify off
set echo off heading off trimspool on pagesize 0 linesize 255 feedback off
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
$SQL_STATEMENT
EOSQL
   RC=$?
   if [ $RC -ne 0 ]; then
      MESSAGE="Error during sql statement!"
      logger_error "${MESSAGE}"
      cat $TMPSQLOUT
      rm $TMPSQLOUT 2>/dev/null
      exit 1
   fi

   UNLOCK_USR_SQL="$MIG19C_BASE/UsrLock/unlock_usr_${CMDB_DB_NAME}.sql"
   if [ ! -s $UNLOCK_USR_SQL ]
   then
      >$UNLOCK_USR_SQL
   fi
   echo "alter user $USR2LOCK account unlock;" >>$UNLOCK_USR_SQL
   kill_all_usr_sess
done
rm $TMPUSRSQLOUT 2>/dev/null
rm $TMPSQLOUT 2>/dev/null
return 0
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: kill all user sessions
#-----------------------------------------------------------------------------------------------------------------
function kill_all_usr_sess()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="kill all user $USR2LOCK sessions in instance ${CMDB_DB_NAME}@${CMDB_SHORTHOST}"
logger_info "$MESSAGE"

if [ $DEBUG -eq 1 ]
then
   SESSQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
else
   SESSQL_STATEMENT="select 'alter system kill session '||''''||sid||','||serial#||''''||';'
from v\$session
where username='$USR2LOCK';"
fi

#determine session to kill
#and generate sql file
TIMESTAMP=`date +%s`
TMPSESSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS -s /nolog <<EOSQL >/dev/null
connect sys/"${PWDSYS}"@$CMDB_OID_SERVICE as sysdba
set hea off
set pagesize 200
set feedback off
set verify off
set echo off heading off trimspool on pagesize 0 linesize 255 feedback off
whenever sqlerror exit sql.sqlcode
spool $TMPSESSQLOUT
$SESSQL_STATEMENT
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
   MESSAGE="Error during sql statement!"
   logger_error "${MESSAGE}"
   cat $TMPSESSQLOUT
   rm $TMPSESSQLOUT 2>/dev/null
   exit 1
fi

#execute generated kill commands
if [ -s $TMPSESSQLOUT ]
then
   TIMESTAMP=`date +%s`
   TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
   SQLPLUS=$ORACLE_HOME/bin/sqlplus
   $SQLPLUS -s /nolog <<EOSQL >/dev/null
connect sys/"${PWDSYS}"@$CMDB_OID_SERVICE as sysdba
set hea off
set pagesize 200
set feedback off
set verify off
set echo off heading off trimspool on pagesize 0 linesize 255 feedback off
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
@$TMPSESSQLOUT
EOSQL
   RC=$?
   if [ $RC -ne 0 ]; then
      MESSAGE="Error during sql statement!"
      logger_error "${MESSAGE}"
      cat $TMPSQLOUT
      rm $TMPSQLOUT 2>/dev/null
      exit 1
   fi
else
   MESSAGE="no sessions to kill for user $USR2LOCK!"
   logger_info "$MESSAGE"
fi

rm $TMPSESSQLOUT 2>/dev/null
rm $TMPSQLOUT 2>/dev/null
return 0
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: generate emcli commands
#-----------------------------------------------------------------------------------------------------------------
function GenEMInfo()
{
FUNCNAME=${FUNCNAME[0]}
MESSAGE="generate emcli commands"
logger_info "$MESSAGE"
if [ $# -ne 1 ]
then
   logger_error "parameter needed! [del|mod|add]"
   exit 1
fi
ACTION=$1
if [ "$ACTION" == 'add' ]
then
   ORAEMCLI_SYS=" -sys $CMDB_STAGE"
   OUTFILE="$MIG19C_BASE/EM_Config/2_${ACTION}_${CMDB_DB_NAME}.emdo"
elif [ "$ACTION" == 'del' ]
then
   OUTFILE="$MIG19C_BASE/EM_Config/1_${ACTION}_${CMDB_DB_NAME}.emdo"
elif [ "$ACTION" == 'mod' ]
then
   OUTFILE="$MIG19C_BASE/EM_Config/${ACTION}_${CMDB_DB_NAME}.emdo"
else
   ORAEMCLI_SYS=''
fi

CMD="ORAemcli -act $ACTION -sid $CMDB_DB_NAME -out $OUTFILE $ORAEMCLI_SYS"
bash -c "$CMD"
if [ $? -ne 0 ]
then
   MESSAGE="couldn't $MESSAGE"
   logger_warn "$MESSAGE"
fi

}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: shutdown source instance
#-----------------------------------------------------------------------------------------------------------------
function ShutSrcInst()
{
FUNCNAME=${FUNCNAME[0]}
if [ "$SHORTHOST" != "$CMDB_NEW_HOSTNAME" ]
then
   if [ "$OS_VERSION" == '6.10' ]
   then
      cat /etc/oratab|sed s/':Y$'/':N'/ >/tmp/oratab
      cp /tmp/oratab /etc/oratab && rm /tmp/oratab
      GenEMInfo del
   fi
   MESSAGE="function $FUNCNAME is not necessary on this host!
In time, it will be invoked from $CMDB_NEW_HOSTNAME"
   logger_info "$MESSAGE"
   return
fi
MESSAGE="shutdown source instance ${CMDB_DB_NAME}@${CMDB_SHORTHOST}"
logger_info "$MESSAGE"

get_oid_srv
check_oid_service

get_sys_pwd

if [ $DEBUG -eq 1 ]
then
   SQL_STATEMENT="select 'DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE * DEBUG MODE' from dual;
select sysdate from dual;"
else
   SQL_STATEMENT='shutdown abort;'
fi

TIMESTAMP=`date +%s`
TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS sys/"${PWDSYS}"@$CMDB_OID_SERVICE as sysdba <<EOSQL
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
$SQL_STATEMENT
exit;
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  if [ `grep ORA-12514 ${TMPSQLOUT}` -eq 1 ]
  then
     MESSAGE="Error during sql statement!"
     logger_error "${MESSAGE}"
     cat $TMPSQLOUT
     rm $TMPSQLOUT 2>/dev/null
     exit 1
  fi
fi
rm $TMPSQLOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: check oracle network configuration
#-----------------------------------------------------------------------------------------------------------------
function check_ora_net_conf()
{
MESSAGE="check oracle network configuration"
logger_info "$MESSAGE"
LDAPORAFILE="/app/oracle/bin/templates/netca/BARM_ldap.ora"
if [ ! -f $DESIGNATED_12C_HOME/network/admin/ldap.ora ]
then
   cp -f $LDAPORAFILE $DESIGNATED_12C_HOME/network/admin/ldap.ora
   if [ $? -ne 0 ]
   then
      MESSAGE="couldn't copy ldap.ora!"
      logger_error "$MESSAGE"
      exit 1
   fi
   MESSAGE="created $DESIGNATED_12C_HOME/network/admin/ldap.ora"
   logger_info "$MESSAGE"
fi

SQLNETORAFILE="/app/oracle/bin/templates/netca/BARM_sqlnet.ora"
if [ ! -f $DESIGNATED_12C_HOME/network/admin/sqlnet.ora ]
then
   cp -f $SQLNETORAFILE $DESIGNATED_12C_HOME/network/admin/sqlnet.ora
   if [ $? -ne 0 ]
   then
      MESSAGE="couldn't copy sqlnet.ora!"
      logger_error "$MESSAGE"
      exit 1
   fi
   MESSAGE="created $DESIGNATED_12C_HOME/network/admin/sqlnet.ora"
   logger_info "$MESSAGE"
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: get (first) oid-service
#-----------------------------------------------------------------------------------------------------------------
function get_oid_srv()
{
MESSAGE="get (first) oid-service"
logger_info "$MESSAGE"
FUNCNAME=${FUNCNAME[0]}
TIMESTAMP=`date +%s`

TMPSQLOUT="/tmp/${SCRIPTNAME}.${FUNCNAME}_$TIMESTAMP.tmp"
SQLPLUS=$ORACLE_HOME/bin/sqlplus
$SQLPLUS -s /nolog <<EOSQL >/dev/null
connect BV\$CMDB/"${PWDBVCMDB}"@DBA-P
set serverout on size unlimited feedback off
whenever sqlerror exit sql.sqlcode
spool $TMPSQLOUT
declare
  l_oid_service    varchar2(30) :='';
BEGIN
  SELECT T.CN as oidservice
    INTO l_oid_service
    FROM ORA_TNS_SERVICE T
       , ORA_TNS_SERVICE_HOST TH
       , ORA_HOSTS_UPGRADE_PLAN UP
   WHERE T.ID = TH.ORA_TNS_SERVICE_ID
     AND TH.HOST = UP.HOSTNAME
     AND T.TS > SYSDATE-1
     AND TH.TS > SYSDATE-1
     AND REGEXP_SUBSTR(UP.HOSTNAME, '[^.]+', 1) = REGEXP_SUBSTR ('${CMDB_SHORTHOST}', '[^.]+', 1)
     and rownum=1;

   dbms_output.put_line('CMDB_OID_SERVICE="'||l_oid_service||'"');
END;
/
EOSQL
RC=$?
if [ $RC -ne 0 ]; then
  MESSAGE="Error during sql statement!"
  logger_error "${MESSAGE}"
  cat $TMPSQLOUT
  exit 1
fi

source $TMPSQLOUT
rm $TMPSQLOUT 2>/dev/null
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: determine active ORACLE_HOME in /etc/oratab
#-----------------------------------------------------------------------------------------------------------------
function det_active_OH()
{
MESSAGE="determine active ORACLE_HOME"
logger_info "$MESSAGE"
if [ -z $CMDB_DB_NAME ]
then
   MESSAGE="value of CMDB_DB_NAME is needed!

call function get_cmdb_data first!"
   logger_error "$MESSAGE"
   exit 1
fi
grep "^${CMDB_DB_NAME}" /etc/oratab >/dev/null
if [ $? -ne 0 ] # nicht gefunden
then
   if [ "$SHORTHOST" != "$CMDB_NEW_HOSTNAME" ]
   then
      MESSAGE="cannot determine active ORACLE_HOME!"
      logger_error "$MESSAGE"
      exit 1
   fi
fi
ACT_OH=`grep "^${CMDB_DB_NAME}" /etc/oratab|awk -F\: '{print $2}'`
if [ "$ACT_OH" == "$DESIGNATED_19C_HOME" -a "$WRAPPER_OPT" != 'FinalMaintenance' ]
then
   MESSAGE="instance $CMDB_DB_NAME already migrated to 19c!"
   logger_info "$MESSAGE"
   exit 0
fi
}

#-----------------------------------------------------------------------------------------------------------------
#     FUNCTION: determine os version
#-----------------------------------------------------------------------------------------------------------------
function det_os_version()
{
MESSAGE="determine os version"
logger_info "$MESSAGE"
PRETTY_OS_NAME=`cat /etc/*elease|tail -1`
OS_VERSION=`cat /etc/*elease|tail -1|awk '{print $(NF-1)}'`
}
