# @(#) ================================================================================================================
# @(#)  File        : ORAstart_OUDadusermapjob
# @(#)  Author      : Dieter Smets
# @(#)  Modified    :
# @(#)
# @(#)  Description : This script is invoked by FLOWSTER and starts OUDadusermapjob remotely
# @(#)
# @(#)  Version     : 1.2
# @(#)  Date        : 09.01.2023
# @(#)
# @(#)  Presumption : This script
# @(#)                1. must be started as user oracle
# @(#)
# @@(#)  Change History:
# @@(#)
# @@(#)    0.1  2016-05-04  Smets       Created
# @@(#)    1.0  2020-03-31  M.Pils      Changed OUD_HOST to oraoud1.barmenia.lan and added ssh options
# @@(#)    1.1  09.01.2023  Thi         changed call for ssh commands
# @@(#)    1.2  12.08.20243  Thi         changed OUD_HOST to lxoral6a
# @(#) ================================================================================================================


#
#
# 

SCRIPTNAME=$(basename $0)
BINDIR="/app/oracle/bin"
#
#-----------------------------------------------------------------------
# Logger Script
#-----------------------------------------------------------------------
#
logger() {
if [ -r $BINDIR/log4sh ]
then
   LOCALLOGGER="`basename $0 | cut -d"." -f 1`_log4sh.properties"
   if [ -r $BINDIR/${LOCALLOGGER} ]
   then
      LOG4SH_CONFIGURATION=$BINDIR/$LOCALLOGGER . $BINDIR/log4sh
   else
      LOG4SH_CONFIGURATION=$BINDIR/log4sh.properties . $BINDIR/log4sh
   fi
else
   echo "ERROR: could not load (log4sh)" >&2
   exit 1
fi
#  echo "LOG4SH_CONFIGURATION:$LOG4SH_CONFIGURATION"
}

#
#-----------------------------------------------------------------------
# check host existance
#-----------------------------------------------------------------------
#
check_host_existance() {
logger_info "checke Existenz des Zielhosts"
ping -c3 $DEPLOY_HOST >/dev/null 2>&1
if [ $? -ne 0 ]
then
   MESSAGE="Zielmaschine >$DEPLOY_HOST< ist nicht pingbar!"
   logger_error "$MESSAGE"
   echo "$MESSAGE"
   exit 1
fi
}

#
#-----------------------------------------------------------------------
# delete old logfiles
#-----------------------------------------------------------------------
#
del_old_logs() {
#Diese Funktion loescht alte Logfiles aelter als 30 Tage
LOGDIR=/app/oracle/admin/log
FILEPATTERN='ORAstart_OUDadusermapjob'
find ${LOGDIR} -user oracle -name "${FILEPATTERN}*" -mtime +30 -exec rm {} \;
}

#
#-----------------------------------------------------------------------
# check ssh connectivity
#-----------------------------------------------------------------------
#
check_ssh_connectivity() {
#Diese Funktion prueft die SSH-Connectivity zu dem uebergebenen HOST
#durch die Verwendung von -o "StrictHostKeyChecking=no" -o "BatchMode=yes" wird zusaetzlich automatisch ein Eintrag in der known_hosts erzeugt,
#ohne das man die sonst obligatorische Frage nach dem Weitermachen mit yes beantworten muss
logger_info "checke SSH-Vertrauensstellung zu Zielhost"
REM_HOST=$1
SSH_STATUS=`(ssh -q -o "StrictHostKeyChecking=no" -o "BatchMode=yes" -o "ConnectTimeout=3" $REM_HOST "echo 2>&1" && echo SSH_OK || echo SSH_NOK)|tail -1`
if [ "$SSH_STATUS" != "SSH_OK" ]
then
   MESSAGE="Es besteht keine SSH-Vertrauensstellung zu >$REM_HOST<!"
   logger_error "$MESSAGE"
   echo "$MESSAGE"
   exit 1
fi
}

del_old_logs

logger

#logger_info "$SCRIPTVERSION"
#logger_info "$SCRIPTDATE"
DATE=`date +%Y%m%d%H%M%S`
logger_info "$DATE $SCRIPTNAME gestartet"
logger_info "$*"
PARAM_LIST=$1
OUD_ADUSER=`echo $PARAM_LIST|sed s/_/' '/|awk '{print $1}'`
OUD_PGM="/app/oracle/bin/OUD/OUDadusermapjob"
OUD_HOST="lxoral6a.barmenia.lan"

#check_host_existance
#check_ssh_connectivity $DEPLOY_HOST

SSHCMD='ssh -t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLEvel=error'
CMD="$SSHCMD $OUD_HOST \"bash --login -i -c '$OUD_PGM -u $OUD_ADUSER -NEW' >/tmp/remote_OUDadusermapjob_$DATE\"" 
logger_info "CMD: $CMD"
#####
#EXIT zu Testzwecken
#exit
#####

/bin/bash -c "$CMD"
REMOTE_RC=$?

if [ $REMOTE_RC -gt 0 ]
then
   scp $OUD_HOST:/tmp/remote_OUDadusermapjob_$DATE /tmp/${OUD_HOST}_remote_OUDadusermapjob_$DATE >/dev/null
   CMD="$SSHCMD $OUD_HOST 'rm /tmp/remote_OUDadusermapjob_$DATE 2>/dev/null'"
   /bin/bash -c "$CMD"
   REMOTE_ERG=$(strings /tmp/${OUD_HOST}_remote_OUDadusermapjob_$DATE)
   rm /tmp/${OUD_HOST}_remote_OUDadusermapjob_$DATE
else
   REMOTE_ERG="Ausfuehrung erfolgreich!"
   CMD="$SSHCMD $OUD_HOST 'rm /tmp/remote_OUDadusermapjob_$DATE 2>/dev/null'"
   /bin/bash -c "$CMD"
fi

logger_info "$REMOTE_ERG"
logger_info "REMOTE_RC: $REMOTE_RC"

#Ausgabestring zur Weiterverarbeitung im Workflow
echo "$REMOTE_ERG"
exit $REMOTE_RC
